<webidl-xml name="Microsoft Edge Platform" original-file="browser.webidl" xmlns="http://schemas.microsoft.com/ie/webidl-xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://schemas.microsoft.com/ie/webidl-xml webidl-xml-schema.xsd">
  <callback-functions>
    <callback-function name="DecodeErrorCallback" callback="1" type="void"/>
    <callback-function name="DecodeSuccessCallback" callback="1" type="void">
      <param name="decodedData" type="AudioBuffer"/>
    </callback-function>
    <callback-function name="ErrorEventHandler" callback="1" type="void">
      <param name="columnNumber" optional="1" type="unsigned long"/>
      <param name="event" type="(Event or DOMString)"/>
      <param name="fileno" optional="1" type="unsigned long"/>
      <param name="source" optional="1" type="DOMString"/>
    </callback-function>
    <callback-function name="ForEachCallback" callback="1" type="void">
      <param name="keyId" type="BufferSource"/>
      <param name="status" type="MediaKeyStatus"/>
    </callback-function>
    <callback-function name="FrameRequestCallback" callback="1" type="void">
      <param name="time" type="DOMHighResTimeStamp"/>
    </callback-function>
    <callback-function name="FunctionStringCallback" callback="1" type="void">
      <param name="data" type="DOMString"/>
    </callback-function>
    <callback-function name="IntersectionObserverCallback" callback="1" type="void">
      <param name="entries" type="sequence&lt;IntersectionObserverEntry&gt;"/>
      <param name="observer" type="IntersectionObserver"/>
    </callback-function>
    <callback-function name="MediaQueryListListener" callback="1" type="void">
      <param name="mql" type="MediaQueryList"/>
    </callback-function>
    <callback-function name="MSExecAtPriorityFunctionCallback" callback="1" tags="MSAppOnly" type="any">
      <param name="args" type="any" variadic="1"/>
    </callback-function>
    <callback-function name="MSLaunchUriCallback" callback="1" type="void"/>
    <callback-function name="MSUnsafeFunctionCallback" callback="1" tags="MSAppOnly" type="any"/>
    <callback-function name="MutationCallback" callback="1" type="void">
      <param name="mutations" type="sequence&lt;MutationRecord&gt;"/>
      <param name="observer" type="MutationObserver"/>
    </callback-function>
    <callback-function name="NavigatorUserMediaErrorCallback" callback="1" type="void">
      <param name="error" type="MediaStreamError"/>
    </callback-function>
    <callback-function name="NavigatorUserMediaSuccessCallback" callback="1" type="void">
      <param name="stream" type="MediaStream"/>
    </callback-function>
    <callback-function name="NotificationPermissionCallback" callback="1" type="void">
      <param name="permission" type="NotificationPermission"/>
    </callback-function>
    <callback-function name="PositionCallback" callback="1" type="void">
      <param name="position" type="Position"/>
    </callback-function>
    <callback-function name="PositionErrorCallback" callback="1" type="void">
      <param name="error" type="PositionError"/>
    </callback-function>
    <callback-function name="RTCPeerConnectionErrorCallback" callback="1" type="void">
      <param name="error" type="DOMError"/>
    </callback-function>
    <callback-function name="RTCSessionDescriptionCallback" callback="1" type="void">
      <param name="sdp" type="RTCSessionDescription"/>
    </callback-function>
    <callback-function name="RTCStatsCallback" callback="1" type="void">
      <param name="report" type="RTCStatsReport"/>
    </callback-function>
    <callback-function name="VoidFunction" callback="1" type="void"/>
  </callback-functions>
  <callback-interfaces>
    <interface name="EventListener" extends="Object">
      <methods>
        <method name="handleEvent" type="void">
          <param name="evt" type="Event"/>
        </method>
      </methods>
    </interface>
    <interface name="WebKitEntriesCallback" extends="Object">
      <methods>
        <method name="handleEvent" type="void">
          <param name="entries" type="WebKitEntry[]"/>
        </method>
      </methods>
    </interface>
    <interface name="WebKitErrorCallback" extends="Object">
      <methods>
        <method name="handleEvent" type="void">
          <param name="err" type="DOMError"/>
        </method>
      </methods>
    </interface>
    <interface name="WebKitFileCallback" extends="Object">
      <methods>
        <method name="handleEvent" type="void">
          <param name="file" type="File"/>
        </method>
      </methods>
    </interface>
  </callback-interfaces>
  <dictionaries>
    <dictionary name="Account" extends="Object">
      <members>
        <member name="displayName" required="1" type="DOMString"/>
        <member name="id" required="1" type="DOMString"/>
        <member name="imageURL" type="DOMString"/>
        <member name="name" type="DOMString"/>
        <member name="rpDisplayName" required="1" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="Algorithm" extends="Object">
      <members>
        <member name="name" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="AnimationEventInit" extends="EventInit">
      <members>
        <member name="animationName" default="&quot;&quot;" type="DOMString"/>
        <member name="elapsedTime" default="0.0" type="float"/>
      </members>
    </dictionary>
    <dictionary name="AssertionOptions" extends="Object">
      <members>
        <member name="allowList" type="sequence&lt;ScopedCredentialDescriptor&gt;"/>
        <member name="extensions" type="WebAuthnExtensions"/>
        <member name="rpId" type="USVString"/>
        <member name="timeoutSeconds" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="CacheQueryOptions" extends="Object">
      <members>
        <member name="cacheName" type="DOMString"/>
        <member name="ignoreMethod" default="false" type="boolean"/>
        <member name="ignoreSearch" default="false" type="boolean"/>
        <member name="ignoreVary" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="ClientData" extends="Object">
      <members>
        <member name="challenge" required="1" type="DOMString"/>
        <member name="extensions" type="WebAuthnExtensions"/>
        <member name="hashAlg" required="1" type="(DOMString or Algorithm)" type-original="AlgorithmIdentifier"/>
        <member name="origin" required="1" type="DOMString"/>
        <member name="rpId" required="1" type="DOMString"/>
        <member name="tokenBinding" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="CloseEventInit" extends="EventInit">
      <members>
        <member name="code" default="0" type="unsigned short"/>
        <member name="reason" default="&quot;&quot;" type="DOMString"/>
        <member name="wasClean" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="CompositionEventInit" extends="UIEventInit">
      <members>
        <member name="data" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="ConfirmSiteSpecificExceptionsInformation" extends="ExceptionInformation">
      <members>
        <member name="arrayOfDomainStrings" type="sequence&lt;DOMString&gt;"/>
      </members>
    </dictionary>
    <dictionary name="ConstrainBooleanParameters" extends="Object">
      <members>
        <member name="exact" type="boolean"/>
        <member name="ideal" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="ConstrainDOMStringParameters" extends="Object">
      <members>
        <member name="exact" type="(DOMString or sequence&lt;DOMString&gt;)"/>
        <member name="ideal" type="(DOMString or sequence&lt;DOMString&gt;)"/>
      </members>
    </dictionary>
    <dictionary name="ConstrainDoubleRange" extends="DoubleRange">
      <members>
        <member name="exact" type="double"/>
        <member name="ideal" type="double"/>
      </members>
    </dictionary>
    <dictionary name="ConstrainLongRange" extends="LongRange">
      <members>
        <member name="exact" type="long"/>
        <member name="ideal" type="long"/>
      </members>
    </dictionary>
    <dictionary name="ConstrainVideoFacingModeParameters" extends="Object">
      <members>
        <member name="exact" type="(VideoFacingModeEnum or sequence&lt;VideoFacingModeEnum&gt;)"/>
        <member name="ideal" type="(VideoFacingModeEnum or sequence&lt;VideoFacingModeEnum&gt;)"/>
      </members>
    </dictionary>
    <dictionary name="CustomEventInit" extends="EventInit">
      <members>
        <member name="detail" default="null" type="any"/>
      </members>
    </dictionary>
    <dictionary name="DeviceAccelerationDict" extends="Object">
      <members>
        <member name="x" default="null" nullable="1" type="double"/>
        <member name="y" default="null" nullable="1" type="double"/>
        <member name="z" default="null" nullable="1" type="double"/>
      </members>
    </dictionary>
    <dictionary name="DeviceLightEventInit" extends="EventInit">
      <members>
        <member name="value" default="Infinity" type="UnrestrictedDouble"/>
      </members>
    </dictionary>
    <dictionary name="DeviceMotionEventInit" extends="EventInit">
      <members>
        <member name="acceleration" default="null" nullable="1" type="DeviceAccelerationDict"/>
        <member name="accelerationIncludingGravity" default="null" nullable="1" type="DeviceAccelerationDict"/>
        <member name="interval" default="null" nullable="1" type="double"/>
        <member name="rotationRate" default="null" nullable="1" type="DeviceRotationRateDict"/>
      </members>
    </dictionary>
    <dictionary name="DeviceOrientationEventInit" extends="EventInit">
      <members>
        <member name="absolute" default="false" type="boolean"/>
        <member name="alpha" default="null" nullable="1" type="double"/>
        <member name="beta" default="null" nullable="1" type="double"/>
        <member name="gamma" default="null" nullable="1" type="double"/>
      </members>
    </dictionary>
    <dictionary name="DeviceRotationRateDict" extends="Object">
      <members>
        <member name="alpha" default="null" nullable="1" type="double"/>
        <member name="beta" default="null" nullable="1" type="double"/>
        <member name="gamma" default="null" nullable="1" type="double"/>
      </members>
    </dictionary>
    <dictionary name="DOMRectInit" extends="Object">
      <members>
        <member name="height" default="0" type="unrestricted double"/>
        <member name="width" default="0" type="unrestricted double"/>
        <member name="x" default="0" type="unrestricted double"/>
        <member name="y" default="0" type="unrestricted double"/>
      </members>
    </dictionary>
    <dictionary name="DoubleRange" extends="Object">
      <members>
        <member name="max" type="double"/>
        <member name="min" type="double"/>
      </members>
    </dictionary>
    <dictionary name="ErrorEventInit" extends="EventInit">
      <members>
        <member name="colno" default="0" type="unsigned long"/>
        <member name="error" default="null" type="any"/>
        <member name="filename" default="&quot;&quot;" type="DOMString"/>
        <member name="lineno" default="0" type="unsigned long"/>
        <member name="message" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="EventInit" extends="Object">
      <members>
        <member name="bubbles" default="false" type="boolean"/>
        <member name="cancelable" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="EventModifierInit" extends="UIEventInit">
      <members>
        <member name="altKey" default="false" type="boolean"/>
        <member name="ctrlKey" default="false" type="boolean"/>
        <member name="metaKey" default="false" type="boolean"/>
        <member name="modifierAltGraph" default="false" type="boolean"/>
        <member name="modifierCapsLock" default="false" type="boolean"/>
        <member name="modifierFn" default="false" type="boolean"/>
        <member name="modifierFnLock" default="false" type="boolean"/>
        <member name="modifierHyper" default="false" type="boolean"/>
        <member name="modifierNumLock" default="false" type="boolean"/>
        <member name="modifierOS" default="false" type="boolean"/>
        <member name="modifierScrollLock" default="false" type="boolean"/>
        <member name="modifierSuper" default="false" type="boolean"/>
        <member name="modifierSymbol" default="false" type="boolean"/>
        <member name="modifierSymbolLock" default="false" type="boolean"/>
        <member name="shiftKey" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="ExceptionInformation" extends="Object">
      <members>
        <member name="domain" nullable="1" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="FocusEventInit" extends="UIEventInit">
      <members>
        <member name="relatedTarget" default="null" nullable="1" type="EventTarget"/>
      </members>
    </dictionary>
    <dictionary name="FocusNavigationEventInit" extends="EventInit">
      <members>
        <member name="navigationReason" default="null" nullable="1" type="DOMString"/>
        <member name="originHeight" default="0" type="float"/>
        <member name="originLeft" default="0" type="float"/>
        <member name="originTop" default="0" type="float"/>
        <member name="originWidth" default="0" type="float"/>
      </members>
    </dictionary>
    <dictionary name="FocusNavigationOrigin" extends="Object">
      <members>
        <member name="originHeight" type="float"/>
        <member name="originLeft" type="float"/>
        <member name="originTop" type="float"/>
        <member name="originWidth" type="float"/>
      </members>
    </dictionary>
    <dictionary name="GamepadEventInit" extends="EventInit">
      <members>
        <member name="gamepad" default="null" nullable="1" type="Gamepad"/>
      </members>
    </dictionary>
    <dictionary name="GetNotificationOptions" extends="Object">
      <members>
        <member name="tag" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="HashChangeEventInit" extends="EventInit">
      <members>
        <member name="newURL" default="null" nullable="1" type="DOMString"/>
        <member name="oldURL" default="null" nullable="1" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="IDBIndexParameters" extends="Object">
      <members>
        <member name="unique" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="IDBObjectStoreParameters" extends="Object">
      <members>
        <member name="keyPath" default="null" nullable="1" type="IDBKeyPath"/>
      </members>
    </dictionary>
    <dictionary name="IntersectionObserverEntryInit" extends="Object">
      <members>
        <member name="boundingClientRect" required="1" type="DOMRectInit"/>
        <member name="intersectionRect" required="1" type="DOMRectInit"/>
        <member name="rootBounds" required="1" type="DOMRectInit"/>
        <member name="target" required="1" type="Element"/>
        <member name="time" required="1" type="DOMHighResTimeStamp"/>
      </members>
    </dictionary>
    <dictionary name="IntersectionObserverInit" extends="Object">
      <members>
        <member name="root" default="null" nullable="1" type="Element"/>
        <member name="rootMargin" default="&quot;0px&quot;" type="DOMString"/>
        <member name="threshold" default="0" type="(double or sequence&lt;double&gt;)"/>
      </members>
    </dictionary>
    <dictionary name="KeyAlgorithm" extends="Object">
      <members>
        <member name="name" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="KeyboardEventInit" extends="EventModifierInit">
      <members>
        <member name="key" default="&quot;&quot;" type="DOMString"/>
        <member name="location" default="0" type="unsigned long"/>
        <member name="repeat" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="LongRange" extends="Object">
      <members>
        <member name="max" type="long"/>
        <member name="min" type="long"/>
      </members>
    </dictionary>
    <dictionary name="MediaEncryptedEventInit" extends="EventInit">
      <members>
        <member name="initData" default="null" nullable="1" type="ArrayBuffer"/>
        <member name="initDataType" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="MediaKeyMessageEventInit" extends="EventInit">
      <members>
        <member name="message" default="null" nullable="1" type="ArrayBuffer"/>
        <member name="messageType" default="&quot;license-request&quot;" type="MediaKeyMessageType"/>
      </members>
    </dictionary>
    <dictionary name="MediaKeySystemConfiguration" extends="Object">
      <members>
        <member name="audioCapabilities" type="sequence&lt;MediaKeySystemMediaCapability&gt;"/>
        <member name="distinctiveIdentifier" default="&quot;optional&quot;" type="MediaKeysRequirement"/>
        <member name="initDataTypes" type="sequence&lt;DOMString&gt;"/>
        <member name="persistentState" default="&quot;optional&quot;" type="MediaKeysRequirement"/>
        <member name="videoCapabilities" type="sequence&lt;MediaKeySystemMediaCapability&gt;"/>
      </members>
    </dictionary>
    <dictionary name="MediaKeySystemMediaCapability" extends="Object">
      <members>
        <member name="contentType" default="&quot;&quot;" type="DOMString"/>
        <member name="robustness" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="MediaStreamConstraints" extends="Object">
      <members>
        <member name="audio" default="false" type="(boolean or MediaTrackConstraints)"/>
        <member name="video" default="false" type="(boolean or MediaTrackConstraints)"/>
      </members>
    </dictionary>
    <dictionary name="MediaStreamErrorEventInit" extends="EventInit">
      <members>
        <member name="error" default="null" nullable="1" type="MediaStreamError"/>
      </members>
    </dictionary>
    <dictionary name="MediaStreamEventInit" extends="EventInit">
      <members>
        <member name="stream" default="null" type="MediaStream"/>
      </members>
    </dictionary>
    <dictionary name="MediaStreamTrackEventInit" extends="EventInit">
      <members>
        <member name="track" default="null" nullable="1" type="MediaStreamTrack"/>
      </members>
    </dictionary>
    <dictionary name="MediaTrackCapabilities" extends="Object">
      <members>
        <member name="aspectRatio" type="(double or DoubleRange)"/>
        <member name="deviceId" type="DOMString"/>
        <member name="echoCancellation" type="sequence&lt;boolean&gt;"/>
        <member name="facingMode" type="DOMString"/>
        <member name="frameRate" type="(double or DoubleRange)"/>
        <member name="groupId" type="DOMString"/>
        <member name="height" type="(long or LongRange)"/>
        <member name="sampleRate" type="(long or LongRange)"/>
        <member name="sampleSize" type="(long or LongRange)"/>
        <member name="volume" type="(double or DoubleRange)"/>
        <member name="width" type="(long or LongRange)"/>
      </members>
    </dictionary>
    <dictionary name="MediaTrackConstraints" extends="MediaTrackConstraintSet">
      <members>
        <member name="advanced" type="sequence&lt;MediaTrackConstraintSet&gt;"/>
      </members>
    </dictionary>
    <dictionary name="MediaTrackConstraintSet" extends="Object">
      <members>
        <member name="aspectRatio" type="(double or ConstrainDoubleRange)" type-original="ConstrainDouble"/>
        <member name="deviceId" type="(DOMString or sequence&lt;DOMString&gt; or ConstrainDOMStringParameters)" type-original="ConstrainDOMString"/>
        <member name="echoCancelation" type="(boolean or ConstrainBooleanParameters)" type-original="ConstrainBoolean"/>
        <member name="facingMode" type="(DOMString or sequence&lt;DOMString&gt; or ConstrainDOMStringParameters)" type-original="ConstrainDOMString"/>
        <member name="frameRate" type="(double or ConstrainDoubleRange)" type-original="ConstrainDouble"/>
        <member name="groupId" type="(DOMString or sequence&lt;DOMString&gt; or ConstrainDOMStringParameters)" type-original="ConstrainDOMString"/>
        <member name="height" type="(long or ConstrainLongRange)" type-original="ConstrainLong"/>
        <member name="sampleRate" type="(long or ConstrainLongRange)" type-original="ConstrainLong"/>
        <member name="sampleSize" type="(long or ConstrainLongRange)" type-original="ConstrainLong"/>
        <member name="volume" type="(double or ConstrainDoubleRange)" type-original="ConstrainDouble"/>
        <member name="width" type="(long or ConstrainLongRange)" type-original="ConstrainLong"/>
      </members>
    </dictionary>
    <dictionary name="MediaTrackSettings" extends="Object">
      <members>
        <member name="aspectRatio" type="double"/>
        <member name="deviceId" type="DOMString"/>
        <member name="echoCancellation" type="boolean"/>
        <member name="facingMode" type="DOMString"/>
        <member name="frameRate" type="double"/>
        <member name="groupId" type="DOMString"/>
        <member name="height" type="long"/>
        <member name="sampleRate" type="long"/>
        <member name="sampleSize" type="long"/>
        <member name="volume" type="double"/>
        <member name="width" type="long"/>
      </members>
    </dictionary>
    <dictionary name="MediaTrackSupportedConstraints" extends="Object">
      <members>
        <member name="aspectRatio" type="boolean"/>
        <member name="deviceId" type="boolean"/>
        <member name="echoCancellation" type="boolean"/>
        <member name="facingMode" type="boolean"/>
        <member name="frameRate" type="boolean"/>
        <member name="groupId" type="boolean"/>
        <member name="height" type="boolean"/>
        <member name="sampleRate" type="boolean"/>
        <member name="sampleSize" type="boolean"/>
        <member name="volume" type="boolean"/>
        <member name="width" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="MessageEventInit" extends="EventInit">
      <members>
        <member name="data" default="null" type="any"/>
        <member name="origin" default="&quot;&quot;" type="DOMString"/>
        <member name="ports" default="null" type="sequence&lt;MessagePort&gt;"/>
        <member name="source" default="null" type="Window"/>
      </members>
    </dictionary>
    <dictionary name="MouseEventInit" extends="EventModifierInit">
      <members>
        <member name="button" default="0" type="short"/>
        <member name="buttons" default="0" type="unsigned short"/>
        <member name="clientX" default="0" type="long"/>
        <member name="clientY" default="0" type="long"/>
        <member name="relatedTarget" default="null" nullable="1" type="EventTarget"/>
        <member name="screenX" default="0" type="long"/>
        <member name="screenY" default="0" type="long"/>
      </members>
    </dictionary>
    <dictionary name="MSAccountInfo" extends="Object">
      <members>
        <member name="accountImageUri" type="DOMString"/>
        <member name="accountName" type="DOMString"/>
        <member name="rpDisplayName" required="1" type="DOMString"/>
        <member name="userDisplayName" required="1" type="DOMString"/>
        <member name="userId" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="MSAudioLocalClientEvent" extends="MSLocalClientEventBase">
      <members>
        <member name="cpuInsufficientEventRatio" type="float"/>
        <member name="deviceCaptureNotFunctioningEventRatio" type="float"/>
        <member name="deviceClippingEventRatio" type="float"/>
        <member name="deviceEchoEventRatio" type="float"/>
        <member name="deviceGlitchesEventRatio" type="float"/>
        <member name="deviceHalfDuplexAECEventRatio" type="float"/>
        <member name="deviceHowlingEventCount" type="unsigned long"/>
        <member name="deviceLowSNREventRatio" type="float"/>
        <member name="deviceLowSpeechLevelEventRatio" type="float"/>
        <member name="deviceMultipleEndpointsEventCount" type="unsigned long"/>
        <member name="deviceNearEndToEchoRatioEventRatio" type="float"/>
        <member name="deviceRenderMuteEventRatio" type="float"/>
        <member name="deviceRenderNotFunctioningEventRatio" type="float"/>
        <member name="deviceRenderZeroVolumeEventRatio" type="float"/>
        <member name="networkDelayEventRatio" type="float"/>
        <member name="networkSendQualityEventRatio" type="float"/>
      </members>
    </dictionary>
    <dictionary name="MSAudioRecvPayload" extends="MSPayloadBase">
      <members>
        <member name="burstLossLength1" type="float"/>
        <member name="burstLossLength2" type="float"/>
        <member name="burstLossLength3" type="float"/>
        <member name="burstLossLength4" type="float"/>
        <member name="burstLossLength5" type="float"/>
        <member name="burstLossLength6" type="float"/>
        <member name="burstLossLength7" type="float"/>
        <member name="burstLossLength8OrHigher" type="float"/>
        <member name="fecRecvDistance1" type="float"/>
        <member name="fecRecvDistance2" type="float"/>
        <member name="fecRecvDistance3" type="float"/>
        <member name="packetReorderDepthAvg" type="long"/>
        <member name="packetReorderDepthMax" type="long"/>
        <member name="packetReorderRatio" type="float"/>
        <member name="ratioCompressedSamplesAvg" type="float"/>
        <member name="ratioConcealedSamplesAvg" type="float"/>
        <member name="ratioStretchedSamplesAvg" type="float"/>
        <member name="samplingRate" type="unsigned long"/>
        <member name="signal" type="MSAudioRecvSignal"/>
      </members>
    </dictionary>
    <dictionary name="MSAudioRecvSignal" extends="Object">
      <members>
        <member name="initialSignalLevelRMS" type="float"/>
        <member name="recvNoiseLevelCh1" type="long"/>
        <member name="recvSignalLevelCh1" type="long"/>
        <member name="renderLoopbackSignalLevel" type="float"/>
        <member name="renderNoiseLevel" type="float"/>
        <member name="renderSignalLevel" type="float"/>
      </members>
    </dictionary>
    <dictionary name="MSAudioSendPayload" extends="MSPayloadBase">
      <members>
        <member name="audioFECUsed" type="boolean"/>
        <member name="samplingRate" type="unsigned long"/>
        <member name="sendMutePercent" type="float"/>
        <member name="signal" type="MSAudioSendSignal"/>
      </members>
    </dictionary>
    <dictionary name="MSAudioSendSignal" extends="Object">
      <members>
        <member name="noiseLevel" type="long"/>
        <member name="sendNoiseLevelCh1" type="long"/>
        <member name="sendSignalLevelCh1" type="long"/>
      </members>
    </dictionary>
    <dictionary name="MSConnectivity" extends="Object">
      <members>
        <member name="iceType" type="MSIceType"/>
        <member name="iceWarningFlags" type="MSIceWarningFlags"/>
        <member name="relayAddress" type="MSRelayAddress"/>
      </members>
    </dictionary>
    <dictionary name="MSCredentialFilter" extends="Object">
      <members>
        <member name="accept" type="sequence&lt;MSCredentialSpec&gt;"/>
      </members>
    </dictionary>
    <dictionary name="MSCredentialParameters" extends="Object">
      <members>
        <member name="type" type="MSCredentialType"/>
      </members>
    </dictionary>
    <dictionary name="MSCredentialSpec" extends="Object">
      <members>
        <member name="id" type="DOMString"/>
        <member name="type" required="1" type="MSCredentialType"/>
      </members>
    </dictionary>
    <dictionary name="MSDelay" extends="Object">
      <members>
        <member name="roundTrip" type="unsigned long"/>
        <member name="roundTripMax" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="MSDescription" extends="RTCStats">
      <members>
        <member name="connectivity" type="MSConnectivity"/>
        <member name="deviceDevName" type="DOMString"/>
        <member name="localAddr" type="MSIPAddressInfo"/>
        <member name="networkconnectivity" type="MSNetworkConnectivityInfo"/>
        <member name="reflexiveLocalIPAddr" type="MSIPAddressInfo"/>
        <member name="remoteAddr" type="MSIPAddressInfo"/>
        <member name="transport" type="RTCIceProtocol"/>
      </members>
    </dictionary>
    <dictionary name="MSFIDOCredentialParameters" extends="MSCredentialParameters">
      <members>
        <member name="algorithm" type="(DOMString or Algorithm)" type-original="AlgorithmIdentifier"/>
        <member name="authenticators" type="sequence&lt;AAGUID&gt;"/>
      </members>
    </dictionary>
    <dictionary name="MSIceWarningFlags" extends="Object">
      <members>
        <member name="allocationMessageIntegrityFailed" type="boolean"/>
        <member name="alternateServerReceived" type="boolean"/>
        <member name="connCheckMessageIntegrityFailed" type="boolean"/>
        <member name="connCheckOtherError" type="boolean"/>
        <member name="fipsAllocationFailure" type="boolean"/>
        <member name="multipleRelayServersAttempted" type="boolean"/>
        <member name="noRelayServersConfigured" type="boolean"/>
        <member name="portRangeExhausted" type="boolean"/>
        <member name="pseudoTLSFailure" type="boolean"/>
        <member name="tcpNatConnectivityFailed" type="boolean"/>
        <member name="tcpRelayConnectivityFailed" type="boolean"/>
        <member name="turnAuthUnknownUsernameError" type="boolean"/>
        <member name="turnTcpAllocateFailed" type="boolean"/>
        <member name="turnTcpSendFailed" type="boolean"/>
        <member name="turnTcpTimedOut" type="boolean"/>
        <member name="turnTurnTcpConnectivityFailed" type="boolean"/>
        <member name="turnUdpAllocateFailed" type="boolean"/>
        <member name="turnUdpSendFailed" type="boolean"/>
        <member name="udpLocalConnectivityFailed" type="boolean"/>
        <member name="udpNatConnectivityFailed" type="boolean"/>
        <member name="udpRelayConnectivityFailed" type="boolean"/>
        <member name="useCandidateChecksFailed" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="MSIPAddressInfo" extends="Object">
      <members>
        <member name="ipAddr" type="DOMString"/>
        <member name="manufacturerMacAddrMask" type="DOMString"/>
        <member name="port" type="unsigned short"/>
      </members>
    </dictionary>
    <dictionary name="MSJitter" extends="Object">
      <members>
        <member name="interArrival" type="unsigned long"/>
        <member name="interArrivalMax" type="unsigned long"/>
        <member name="interArrivalSD" type="float"/>
      </members>
    </dictionary>
    <dictionary name="MSLocalClientEventBase" extends="RTCStats">
      <members>
        <member name="networkBandwidthLowEventRatio" type="float"/>
        <member name="networkReceiveQualityEventRatio" type="float"/>
      </members>
    </dictionary>
    <dictionary name="MSNetwork" extends="RTCStats">
      <members>
        <member name="delay" type="MSDelay"/>
        <member name="jitter" type="MSJitter"/>
        <member name="packetLoss" type="MSPacketLoss"/>
        <member name="utilization" type="MSUtilization"/>
      </members>
    </dictionary>
    <dictionary name="MSNetworkConnectivityInfo" extends="Object">
      <members>
        <member name="linkspeed" type="unsigned long"/>
        <member name="networkConnectionDetails" type="DOMString"/>
        <member name="vpn" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="MSNetworkInterfaceType" extends="Object">
      <members>
        <member name="interfaceTypeEthernet" type="boolean"/>
        <member name="interfaceTypePPP" type="boolean"/>
        <member name="interfaceTypeTunnel" type="boolean"/>
        <member name="interfaceTypeWireless" type="boolean"/>
        <member name="interfaceTypeWWAN" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="MSOutboundNetwork" extends="MSNetwork">
      <members>
        <member name="appliedBandwidthLimit" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="MSPacketLoss" extends="Object">
      <members>
        <member name="lossRate" type="float"/>
        <member name="lossRateMax" type="float"/>
      </members>
    </dictionary>
    <dictionary name="MSPayloadBase" extends="RTCStats">
      <members>
        <member name="payloadDescription" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="MSPortRange" extends="Object">
      <members>
        <member name="max" type="unsigned short"/>
        <member name="min" type="unsigned short"/>
      </members>
    </dictionary>
    <dictionary name="MSRelayAddress" extends="Object">
      <members>
        <member name="port" type="unsigned short"/>
        <member name="relayAddress" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="MSSignatureParameters" extends="Object">
      <members>
        <member name="userPrompt" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="MSTransportDiagnosticsStats" extends="RTCStats">
      <members>
        <member name="allocationTimeInMs" type="unsigned long"/>
        <member name="baseAddress" type="DOMString"/>
        <member name="baseInterface" type="MSNetworkInterfaceType"/>
        <member name="iceRole" type="RTCIceRole"/>
        <member name="iceWarningFlags" type="MSIceWarningFlags"/>
        <member name="interfaces" type="MSNetworkInterfaceType"/>
        <member name="localAddress" type="DOMString"/>
        <member name="localAddrType" type="MSIceAddrType"/>
        <member name="localInterface" type="MSNetworkInterfaceType"/>
        <member name="localMR" type="DOMString"/>
        <member name="localMRTCPPort" type="unsigned short"/>
        <member name="localSite" type="DOMString"/>
        <member name="msRtcEngineVersion" type="DOMString"/>
        <member name="networkName" type="DOMString"/>
        <member name="numConsentReqReceived" type="unsigned long"/>
        <member name="numConsentReqSent" type="unsigned long"/>
        <member name="numConsentRespReceived" type="unsigned long"/>
        <member name="numConsentRespSent" type="unsigned long"/>
        <member name="portRangeMax" type="unsigned short"/>
        <member name="portRangeMin" type="unsigned short"/>
        <member name="protocol" type="RTCIceProtocol"/>
        <member name="remoteAddress" type="DOMString"/>
        <member name="remoteAddrType" type="MSIceAddrType"/>
        <member name="remoteMR" type="DOMString"/>
        <member name="remoteMRTCPPort" type="unsigned short"/>
        <member name="remoteSite" type="DOMString"/>
        <member name="rtpRtcpMux" type="boolean"/>
        <member name="stunVer" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="MSUtilization" extends="Object">
      <members>
        <member name="bandwidthEstimation" type="unsigned long long"/>
        <member name="bandwidthEstimationAvg" type="unsigned long long"/>
        <member name="bandwidthEstimationMax" type="unsigned long long"/>
        <member name="bandwidthEstimationMin" type="unsigned long long"/>
        <member name="bandwidthEstimationStdDev" type="unsigned long long"/>
        <member name="packets" type="unsigned long long"/>
      </members>
    </dictionary>
    <dictionary name="MSVideoPayload" extends="MSPayloadBase">
      <members>
        <member name="durationSeconds" type="float"/>
        <member name="resolution" type="DOMString"/>
        <member name="videoBitRateAvg" type="unsigned long"/>
        <member name="videoBitRateMax" type="unsigned long"/>
        <member name="videoFrameRateAvg" type="float"/>
        <member name="videoPacketLossRate" type="float"/>
      </members>
    </dictionary>
    <dictionary name="MSVideoRecvPayload" extends="MSVideoPayload">
      <members>
        <member name="lowBitRateCallPercent" type="float"/>
        <member name="lowFrameRateCallPercent" type="float"/>
        <member name="recvBitRateAverage" type="unsigned long"/>
        <member name="recvBitRateMaximum" type="unsigned long"/>
        <member name="recvCodecType" type="DOMString"/>
        <member name="recvFpsHarmonicAverage" type="float"/>
        <member name="recvFrameRateAverage" type="float"/>
        <member name="recvNumResSwitches" type="float"/>
        <member name="recvReorderBufferMaxSuccessfullyOrderedExtent" type="unsigned long"/>
        <member name="recvReorderBufferMaxSuccessfullyOrderedLateTime" type="unsigned long"/>
        <member name="recvReorderBufferPacketsDroppedDueToBufferExhaustion" type="unsigned long"/>
        <member name="recvReorderBufferPacketsDroppedDueToTimeout" type="unsigned long"/>
        <member name="recvReorderBufferReorderedPackets" type="unsigned long"/>
        <member name="recvResolutionHeight" type="unsigned long"/>
        <member name="recvResolutionWidth" type="unsigned long"/>
        <member name="recvVideoStreamsMax" type="unsigned long"/>
        <member name="recvVideoStreamsMin" type="unsigned long"/>
        <member name="recvVideoStreamsMode" type="long"/>
        <member name="reorderBufferTotalPackets" type="unsigned long"/>
        <member name="videoFrameLossRate" type="float"/>
        <member name="videoPostFECPLR" type="float"/>
        <member name="videoResolutions" type="MSVideoResolutionDistribution"/>
      </members>
    </dictionary>
    <dictionary name="MSVideoResolutionDistribution" extends="Object">
      <members>
        <member name="cifQuality" type="unsigned long"/>
        <member name="h1080Quality" type="unsigned long"/>
        <member name="h1440Quality" type="unsigned long"/>
        <member name="h2160Quality" type="unsigned long"/>
        <member name="h720Quality" type="unsigned long"/>
        <member name="vgaQuality" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="MSVideoSendPayload" extends="MSVideoPayload">
      <members>
        <member name="sendBitRateAverage" type="unsigned long long"/>
        <member name="sendBitRateMaximum" type="unsigned long long"/>
        <member name="sendFrameRateAverage" type="float"/>
        <member name="sendResolutionHeight" type="unsigned long"/>
        <member name="sendResolutionWidth" type="unsigned long"/>
        <member name="sendVideoStreamsMax" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="MsZoomToOptions" extends="Object">
      <members>
        <member name="animate" type="DOMString"/>
        <member name="contentX" type="long"/>
        <member name="contentY" type="long"/>
        <member name="scaleFactor" type="float"/>
        <member name="viewportX" nullable="1" type="DOMString"/>
        <member name="viewportY" nullable="1" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="MutationObserverInit" extends="Object">
      <members>
        <member name="attributeFilter" type="sequence&lt;DOMString&gt;"/>
        <member name="attributeOldValue" default="false" type="boolean"/>
        <member name="attributes" default="false" type="boolean"/>
        <member name="characterData" default="false" type="boolean"/>
        <member name="characterDataOldValue" default="false" type="boolean"/>
        <member name="childList" default="false" type="boolean"/>
        <member name="subtree" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="NotificationOptions" extends="Object">
      <members>
        <member name="body" default="&quot;&quot;" type="DOMString"/>
        <member name="dir" default="&quot;auto&quot;" type="NotificationDirection"/>
        <member name="icon" default="&quot;&quot;" type="DOMString"/>
        <member name="lang" default="&quot;&quot;" type="DOMString"/>
        <member name="tag" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="ObjectURLOptions" extends="Object">
      <members>
        <member name="oneTimeOnly" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="PaymentCurrencyAmount" extends="Object">
      <members>
        <member name="currency" required="1" type="DOMString"/>
        <member name="currencySystem" default="&quot;urn:iso:std:iso:4217&quot;" type="DOMString"/>
        <member name="value" required="1" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="PaymentDetails" extends="Object">
      <members>
        <member name="displayItems" type="sequence&lt;PaymentItem&gt;"/>
        <member name="error" type="DOMString"/>
        <member name="modifiers" type="sequence&lt;PaymentDetailsModifier&gt;"/>
        <member name="shippingOptions" type="sequence&lt;PaymentShippingOption&gt;"/>
        <member name="total" type="PaymentItem"/>
      </members>
    </dictionary>
    <dictionary name="PaymentDetailsModifier" extends="Object">
      <members>
        <member name="additionalDisplayItems" type="sequence&lt;PaymentItem&gt;"/>
        <member name="data" type="object"/>
        <member name="supportedMethods" required="1" type="sequence&lt;DOMString&gt;"/>
        <member name="total" type="PaymentItem"/>
      </members>
    </dictionary>
    <dictionary name="PaymentItem" extends="Object">
      <members>
        <member name="amount" required="1" type="PaymentCurrencyAmount"/>
        <member name="label" required="1" type="DOMString"/>
        <member name="pending" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="PaymentMethodData" extends="Object">
      <members>
        <member name="data" type="object"/>
        <member name="supportedMethods" required="1" type="sequence&lt;DOMString&gt;"/>
      </members>
    </dictionary>
    <dictionary name="PaymentOptions" extends="Object">
      <members>
        <member name="requestPayerEmail" default="false" type="boolean"/>
        <member name="requestPayerName" default="false" type="boolean"/>
        <member name="requestPayerPhone" default="false" type="boolean"/>
        <member name="requestShipping" default="false" type="boolean"/>
        <member name="shippingType" default="&quot;shipping&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="PaymentRequestUpdateEventInit" extends="EventInit"/>
    <dictionary name="PaymentShippingOption" extends="Object">
      <members>
        <member name="amount" required="1" type="PaymentCurrencyAmount"/>
        <member name="id" required="1" type="DOMString"/>
        <member name="label" required="1" type="DOMString"/>
        <member name="selected" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="PeriodicWaveConstraints" extends="Object">
      <members>
        <member name="disableNormalization" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="PointerEventInit" extends="MouseEventInit">
      <members>
        <member name="height" default="0" type="long"/>
        <member name="isPrimary" default="false" type="boolean"/>
        <member name="pointerId" default="0" type="long"/>
        <member name="pointerType" default="&quot;&quot;" type="DOMString"/>
        <member name="pressure" default="0" type="float"/>
        <member name="tiltX" default="0" type="long"/>
        <member name="tiltY" default="0" type="long"/>
        <member name="width" default="0" type="long"/>
      </members>
    </dictionary>
    <dictionary name="PopStateEventInit" extends="EventInit">
      <members>
        <member name="state" default="null" type="any"/>
      </members>
    </dictionary>
    <dictionary name="PositionOptions" extends="Object">
      <members>
        <member name="enableHighAccuracy" default="false" type="boolean"/>
        <member name="maximumAge" default="0" type="long"/>
        <member name="timeout" type="long"/>
      </members>
    </dictionary>
    <dictionary name="ProgressEventInit" extends="EventInit">
      <members>
        <member name="lengthComputable" default="false" type="boolean"/>
        <member name="loaded" default="0" type="unsigned long long"/>
        <member name="total" default="0" type="unsigned long long"/>
      </members>
    </dictionary>
    <dictionary name="PushSubscriptionOptionsInit" extends="Object">
      <members>
        <member name="applicationServerKey" default="null" nullable="1" type="BufferSource"/>
        <member name="userVisibleOnly" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="RegistrationOptions" extends="Object">
      <members>
        <member name="scope" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RequestInit" extends="Object">
      <members>
        <member name="body" nullable="1" type="(Blob or BufferSource or FormData or DOMString)" type-original="BodyInit"/>
        <member name="cache" type="RequestCache"/>
        <member name="credentials" type="RequestCredentials"/>
        <member name="headers" type="(Headers or sequence&lt;sequence&lt;DOMString&gt;&gt;)" type-original="HeadersInit"/>
        <member name="integrity" type="DOMString"/>
        <member name="keepalive" type="boolean"/>
        <member name="method" type="DOMString" type-original="ByteString"/>
        <member name="mode" type="RequestMode"/>
        <member name="redirect" type="RequestRedirect"/>
        <member name="referrer" type="DOMString" type-original="USVString"/>
        <member name="referrerPolicy" type="ReferrerPolicy"/>
        <member name="window" type="any"/>
      </members>
    </dictionary>
    <dictionary name="ResponseInit" extends="Object">
      <members>
        <member name="headers" type="(Headers or sequence&lt;sequence&lt;DOMString&gt;&gt;)" type-original="HeadersInit"/>
        <member name="status" default="200" type="unsigned short"/>
        <member name="statusText" default="&quot;OK&quot;" type="DOMString" type-original="ByteString"/>
      </members>
    </dictionary>
    <dictionary name="RTCConfiguration" extends="Object">
      <members>
        <member name="bundlePolicy" default="&quot;balanced&quot;" type="RTCBundlePolicy"/>
        <member name="iceServers" type="sequence&lt;RTCIceServer&gt;"/>
        <member name="iceTransportPolicy" default="&quot;all&quot;" type="RTCIceTransportPolicy"/>
        <member name="peerIdentity" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCDtlsFingerprint" extends="Object">
      <members>
        <member name="algorithm" type="DOMString"/>
        <member name="value" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCDtlsParameters" extends="Object">
      <members>
        <member name="fingerprints" type="sequence&lt;RTCDtlsFingerprint&gt;"/>
        <member name="role" default="&quot;auto&quot;" type="RTCDtlsRole"/>
      </members>
    </dictionary>
    <dictionary name="RTCDTMFToneChangeEventInit" extends="EventInit">
      <members>
        <member name="tone" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCIceCandidateAttributes" extends="RTCStats">
      <members>
        <member name="addressSourceUrl" type="DOMString"/>
        <member name="candidateType" type="RTCStatsIceCandidateType"/>
        <member name="ipAddress" type="DOMString"/>
        <member name="portNumber" type="long"/>
        <member name="priority" type="long"/>
        <member name="transport" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCIceCandidateComplete" extends="Object"/>
    <dictionary name="RTCIceCandidateDictionary" extends="Object">
      <members>
        <member name="foundation" type="DOMString"/>
        <member name="ip" type="DOMString"/>
        <member name="msMTurnSessionId" type="DOMString"/>
        <member name="port" type="unsigned short"/>
        <member name="priority" type="unsigned long"/>
        <member name="protocol" type="RTCIceProtocol"/>
        <member name="relatedAddress" default="&quot;&quot;" type="DOMString"/>
        <member name="relatedPort" type="unsigned short"/>
        <member name="tcpType" type="RTCIceTcpCandidateType"/>
        <member name="type" type="RTCIceCandidateType"/>
      </members>
    </dictionary>
    <dictionary name="RTCIceCandidateInit" extends="Object">
      <members>
        <member name="candidate" type="DOMString"/>
        <member name="sdpMid" type="DOMString"/>
        <member name="sdpMLineIndex" type="unsigned short"/>
      </members>
    </dictionary>
    <dictionary name="RTCIceCandidatePair" extends="Object">
      <members>
        <member name="local" type="RTCIceCandidateDictionary"/>
        <member name="remote" type="RTCIceCandidateDictionary"/>
      </members>
    </dictionary>
    <dictionary name="RTCIceCandidatePairStats" extends="RTCStats">
      <members>
        <member name="availableIncomingBitrate" type="double"/>
        <member name="availableOutgoingBitrate" type="double"/>
        <member name="bytesReceived" type="unsigned long long"/>
        <member name="bytesSent" type="unsigned long long"/>
        <member name="localCandidateId" type="DOMString"/>
        <member name="nominated" type="boolean"/>
        <member name="priority" type="unsigned long long"/>
        <member name="readable" type="boolean"/>
        <member name="remoteCandidateId" type="DOMString"/>
        <member name="roundTripTime" type="double"/>
        <member name="state" type="RTCStatsIceCandidatePairState"/>
        <member name="transportId" type="DOMString"/>
        <member name="writable" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="RTCIceGatherOptions" extends="Object">
      <members>
        <member name="gatherPolicy" type="RTCIceGatherPolicy"/>
        <member name="iceservers" type="sequence&lt;RTCIceServer&gt;"/>
        <member name="portRange" type="MSPortRange"/>
      </members>
    </dictionary>
    <dictionary name="RTCIceParameters" extends="Object">
      <members>
        <member name="iceLite" nullable="1" type="boolean"/>
        <member name="password" type="DOMString"/>
        <member name="usernameFragment" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCIceServer" extends="Object">
      <members>
        <member name="credential" nullable="1" type="DOMString"/>
        <member name="urls" type="any"/>
        <member name="username" nullable="1" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCInboundRTPStreamStats" extends="RTCRTPStreamStats">
      <members>
        <member name="bytesReceived" type="unsigned long long"/>
        <member name="fractionLost" type="double"/>
        <member name="jitter" type="double"/>
        <member name="packetsLost" type="unsigned long"/>
        <member name="packetsReceived" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="RTCMediaStreamTrackStats" extends="RTCStats">
      <members>
        <member name="audioLevel" type="double"/>
        <member name="echoReturnLoss" type="double"/>
        <member name="echoReturnLossEnhancement" type="double"/>
        <member name="frameHeight" type="unsigned long"/>
        <member name="framesCorrupted" type="unsigned long"/>
        <member name="framesDecoded" type="unsigned long"/>
        <member name="framesDropped" type="unsigned long"/>
        <member name="framesPerSecond" type="double"/>
        <member name="framesReceived" type="unsigned long"/>
        <member name="framesSent" type="unsigned long"/>
        <member name="frameWidth" type="unsigned long"/>
        <member name="remoteSource" type="boolean"/>
        <member name="ssrcIds" type="sequence&lt;DOMString&gt;"/>
        <member name="trackIdentifier" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCOfferOptions" extends="Object">
      <members>
        <member name="iceRestart" default="false" type="boolean"/>
        <member name="offerToReceiveAudio" type="long"/>
        <member name="offerToReceiveVideo" type="long"/>
        <member name="voiceActivityDetection" default="true" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="RTCOutboundRTPStreamStats" extends="RTCRTPStreamStats">
      <members>
        <member name="bytesSent" type="unsigned long long"/>
        <member name="packetsSent" type="unsigned long"/>
        <member name="roundTripTime" type="double"/>
        <member name="targetBitrate" type="double"/>
      </members>
    </dictionary>
    <dictionary name="RTCPeerConnectionIceEventInit" extends="EventInit">
      <members>
        <member name="candidate" default="null" type="RTCIceCandidate"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtcpFeedback" extends="Object">
      <members>
        <member name="parameter" type="DOMString"/>
        <member name="type" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtcpParameters" extends="Object">
      <members>
        <member name="cname" type="DOMString"/>
        <member name="mux" default="true" type="boolean"/>
        <member name="reducedSize" default="false" type="boolean"/>
        <member name="ssrc" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpCapabilities" extends="Object">
      <members>
        <member name="codecs" type="sequence&lt;RTCRtpCodecCapability&gt;"/>
        <member name="fecMechanisms" type="sequence&lt;DOMString&gt;"/>
        <member name="headerExtensions" type="sequence&lt;RTCRtpHeaderExtension&gt;"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpCodecCapability" extends="Object">
      <members>
        <member name="clockRate" type="unsigned long"/>
        <member name="kind" type="DOMString"/>
        <member name="maxptime" type="unsigned long"/>
        <member name="maxSpatialLayers" default="0" type="unsigned short"/>
        <member name="maxTemporalLayers" default="0" type="unsigned short"/>
        <member name="name" type="DOMString"/>
        <member name="numChannels" type="unsigned long"/>
        <member name="options" type="Dictionary"/>
        <member name="parameters" type="Dictionary"/>
        <member name="preferredPayloadType" type="octet" type-original="payloadtype"/>
        <member name="ptime" type="unsigned long"/>
        <member name="rtcpFeedback" type="sequence&lt;RTCRtcpFeedback&gt;"/>
        <member name="svcMultiStreamSupport" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpCodecParameters" extends="Object">
      <members>
        <member name="clockRate" type="unsigned long"/>
        <member name="maxptime" type="unsigned long"/>
        <member name="name" type="DOMString"/>
        <member name="numChannels" type="unsigned long"/>
        <member name="parameters" type="Dictionary"/>
        <member name="payloadType" type="payloadType"/>
        <member name="ptime" type="unsigned long"/>
        <member name="rtcpFeedback" type="sequence&lt;RTCRtcpFeedback&gt;"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpContributingSource" extends="Object">
      <members>
        <member name="audioLevel" type="byte"/>
        <member name="csrc" type="unsigned long"/>
        <member name="timestamp" type="DOMHighResTimeStamp"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpEncodingParameters" extends="Object">
      <members>
        <member name="active" default="true" type="boolean"/>
        <member name="codecPayloadType" type="octet" type-original="payloadtype"/>
        <member name="dependencyEncodingIds" type="sequence&lt;DOMString&gt;"/>
        <member name="encodingId" type="DOMString"/>
        <member name="fec" type="RTCRtpFecParameters"/>
        <member name="framerateScale" type="double"/>
        <member name="maxBitrate" type="double"/>
        <member name="maxFramerate" type="unsigned long"/>
        <member name="minQuality" default="0" type="double"/>
        <member name="priority" default="1.0" type="double"/>
        <member name="resolutionScale" type="double"/>
        <member name="rtx" type="RTCRtpRtxParameters"/>
        <member name="ssrc" type="unsigned long"/>
        <member name="ssrcRange" type="RTCSsrcRange"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpFecParameters" extends="Object">
      <members>
        <member name="mechanism" type="DOMString"/>
        <member name="ssrc" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpHeaderExtension" extends="Object">
      <members>
        <member name="kind" type="DOMString"/>
        <member name="preferredEncrypt" default="false" type="boolean"/>
        <member name="preferredId" type="unsigned short"/>
        <member name="uri" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpHeaderExtensionParameters" extends="Object">
      <members>
        <member name="encrypt" default="false" type="boolean"/>
        <member name="id" type="unsigned short"/>
        <member name="uri" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpParameters" extends="Object">
      <members>
        <member name="codecs" type="sequence&lt;RTCRtpCodecParameters&gt;"/>
        <member name="degradationPreference" default="&quot;balanced&quot;" type="RTCDegradationPreference"/>
        <member name="encodings" type="sequence&lt;RTCRtpEncodingParameters&gt;"/>
        <member name="headerExtensions" type="sequence&lt;RTCRtpHeaderExtensionParameters&gt;"/>
        <member name="muxId" default="&quot;&quot;" type="DOMString"/>
        <member name="rtcp" type="RTCRtcpParameters"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpRtxParameters" extends="Object">
      <members>
        <member name="ssrc" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="RTCRTPStreamStats" extends="RTCStats">
      <members>
        <member name="associateStatsId" type="DOMString"/>
        <member name="codecId" type="DOMString"/>
        <member name="firCount" type="unsigned long"/>
        <member name="isRemote" default="false" type="boolean"/>
        <member name="mediaTrackId" type="DOMString"/>
        <member name="nackCount" type="unsigned long"/>
        <member name="pliCount" type="unsigned long"/>
        <member name="sliCount" type="unsigned long"/>
        <member name="ssrc" type="DOMString"/>
        <member name="transportId" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpUnhandled" extends="Object">
      <members>
        <member name="muxId" type="DOMString"/>
        <member name="payloadType" type="octet" type-original="payloadtype"/>
        <member name="ssrc" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="RTCSessionDescriptionInit" extends="Object">
      <members>
        <member name="sdp" type="DOMString"/>
        <member name="type" type="RTCSdpType"/>
      </members>
    </dictionary>
    <dictionary name="RTCSrtpKeyParam" extends="Object">
      <members>
        <member name="keyMethod" type="DOMString"/>
        <member name="keySalt" type="DOMString"/>
        <member name="lifetime" type="DOMString"/>
        <member name="mkiLength" type="unsigned short"/>
        <member name="mkiValue" type="unsigned short"/>
      </members>
    </dictionary>
    <dictionary name="RTCSrtpSdesParameters" extends="Object">
      <members>
        <member name="cryptoSuite" type="DOMString"/>
        <member name="keyParams" type="sequence&lt;RTCSrtpKeyParam&gt;"/>
        <member name="sessionParams" type="sequence&lt;DOMString&gt;"/>
        <member name="tag" type="unsigned short"/>
      </members>
    </dictionary>
    <dictionary name="RTCSsrcRange" extends="Object">
      <members>
        <member name="max" type="unsigned long"/>
        <member name="min" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="RTCStats" extends="Object">
      <members>
        <member name="id" type="DOMString"/>
        <member name="msType" type="MSStatsType"/>
        <member name="timestamp" type="DOMHighResTimeStamp"/>
        <member name="type" type="RTCStatsType"/>
      </members>
    </dictionary>
    <dictionary name="RTCStatsReport" extends="Object"/>
    <dictionary name="RTCTransportStats" extends="RTCStats">
      <members>
        <member name="activeConnection" type="boolean"/>
        <member name="bytesReceived" type="unsigned long long"/>
        <member name="bytesSent" type="unsigned long long"/>
        <member name="localCertificateId" type="DOMString"/>
        <member name="remoteCertificateId" type="DOMString"/>
        <member name="rtcpTransportStatsId" type="DOMString"/>
        <member name="selectedCandidatePairId" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="ScopedCredentialDescriptor" extends="Object">
      <members>
        <member name="id" required="1" type="BufferSource"/>
        <member name="transports" type="sequence&lt;Transport&gt;"/>
        <member name="type" required="1" type="ScopedCredentialType"/>
      </members>
    </dictionary>
    <dictionary name="ScopedCredentialOptions" extends="Object">
      <members>
        <member name="excludeList" type="sequence&lt;ScopedCredentialDescriptor&gt;"/>
        <member name="extensions" type="WebAuthnExtensions"/>
        <member name="rpId" type="USVString"/>
        <member name="timeoutSeconds" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="ScopedCredentialParameters" extends="Object">
      <members>
        <member name="algorithm" required="1" type="(DOMString or Algorithm)" type-original="AlgorithmIdentifier"/>
        <member name="type" required="1" type="ScopedCredentialType"/>
      </members>
    </dictionary>
    <dictionary name="ServiceWorkerMessageEventInit" extends="EventInit">
      <members>
        <member name="data" type="any"/>
        <member name="lastEventId" type="DOMString"/>
        <member name="origin" type="DOMString"/>
        <member name="ports" nullable="1" type="sequence&lt;MessagePort&gt;"/>
        <member name="source" nullable="1" type="(ServiceWorker or MessagePort)"/>
      </members>
    </dictionary>
    <dictionary name="SpeechSynthesisEventInit" extends="EventInit">
      <members>
        <member name="charIndex" default="0" type="unsigned long"/>
        <member name="elapsedTime" default="0" type="float"/>
        <member name="name" default="&quot;&quot;" type="DOMString"/>
        <member name="utterance" default="null" nullable="1" type="SpeechSynthesisUtterance"/>
      </members>
    </dictionary>
    <dictionary name="StoreExceptionsInformation" extends="ExceptionInformation">
      <members>
        <member name="detailURI" nullable="1" type="DOMString"/>
        <member name="explanationString" nullable="1" type="DOMString"/>
        <member name="siteName" nullable="1" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="StoreSiteSpecificExceptionsInformation" extends="StoreExceptionsInformation">
      <members>
        <member name="arrayOfDomainStrings" type="sequence&lt;DOMString&gt;"/>
      </members>
    </dictionary>
    <dictionary name="TrackEventInit" extends="EventInit">
      <members>
        <member name="track" default="null" nullable="1" type="(VideoTrack or AudioTrack or TextTrack)"/>
      </members>
    </dictionary>
    <dictionary name="TransitionEventInit" extends="EventInit">
      <members>
        <member name="elapsedTime" default="0.0" type="float"/>
        <member name="propertyName" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="UIEventInit" extends="EventInit">
      <members>
        <member name="detail" default="0" type="long"/>
        <member name="view" default="null" nullable="1" type="Window"/>
      </members>
    </dictionary>
    <dictionary name="WebAuthnExtensions" extends="Object"/>
    <dictionary name="WebGLContextAttributes" extends="Object">
      <members>
        <member name="alpha" default="true" type="boolean"/>
        <member name="antialias" default="true" type="boolean"/>
        <member name="depth" default="true" type="boolean"/>
        <member name="premultipliedAlpha" default="true" type="boolean"/>
        <member name="preserveDrawingBuffer" default="false" type="boolean"/>
        <member name="stencil" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="WebGLContextEventInit" extends="EventInit">
      <members>
        <member name="statusMessage" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="WheelEventInit" extends="MouseEventInit">
      <members>
        <member name="deltaMode" default="0" type="unsigned long"/>
        <member name="deltaX" default="0.0" type="double"/>
        <member name="deltaY" default="0.0" type="double"/>
        <member name="deltaZ" default="0.0" type="double"/>
      </members>
    </dictionary>
  </dictionaries>
  <enums>
    <enum name="AppendMode">
      <value>segments</value>
      <value>sequence</value>
    </enum>
    <enum name="AudioContextState">
      <value>suspended</value>
      <value>running</value>
      <value>closed</value>
    </enum>
    <enum name="BiquadFilterType">
      <value>lowpass</value>
      <value>highpass</value>
      <value>bandpass</value>
      <value>lowshelf</value>
      <value>highshelf</value>
      <value>peaking</value>
      <value>notch</value>
      <value>allpass</value>
    </enum>
    <enum name="CanvasFillRule">
      <value>nonzero</value>
      <value>evenodd</value>
    </enum>
    <enum name="ChannelCountMode">
      <value>max</value>
      <value>clamped-max</value>
      <value>explicit</value>
    </enum>
    <enum name="ChannelInterpretation">
      <value>speakers</value>
      <value>discrete</value>
    </enum>
    <enum name="DistanceModelType">
      <value>linear</value>
      <value>inverse</value>
      <value>exponential</value>
    </enum>
    <enum name="ExpandGranularity">
      <value>character</value>
      <value>word</value>
      <value>sentence</value>
      <value>textedit</value>
    </enum>
    <enum name="GamepadInputEmulationType">
      <value>mouse</value>
      <value>keyboard</value>
      <value>gamepad</value>
    </enum>
    <enum name="IDBCursorDirection">
      <value>next</value>
      <value>nextunique</value>
      <value>prev</value>
      <value>prevunique</value>
    </enum>
    <enum name="IDBRequestReadyState">
      <value>pending</value>
      <value>done</value>
    </enum>
    <enum name="IDBTransactionMode">
      <value>readonly</value>
      <value>readwrite</value>
      <value>versionchange</value>
    </enum>
    <enum name="ListeningState">
      <value>inactive</value>
      <value>active</value>
      <value>disambiguation</value>
    </enum>
    <enum name="MediaDeviceKind">
      <value>audioinput</value>
      <value>audiooutput</value>
      <value>videoinput</value>
    </enum>
    <enum name="MediaKeyMessageType">
      <value>license-request</value>
      <value>license-renewal</value>
      <value>license-release</value>
      <value>individualization-request</value>
    </enum>
    <enum name="MediaKeySessionType">
      <value>temporary</value>
      <value>persistent-license</value>
      <value>persistent-release-message</value>
    </enum>
    <enum name="MediaKeysRequirement">
      <value>required</value>
      <value>optional</value>
      <value>not-allowed</value>
    </enum>
    <enum name="MediaKeyStatus">
      <value>usable</value>
      <value>expired</value>
      <value>output-downscaled</value>
      <value>output-not-allowed</value>
      <value>status-pending</value>
      <value>internal-error</value>
    </enum>
    <enum name="MediaStreamTrackState">
      <value>live</value>
      <value>ended</value>
    </enum>
    <enum name="MSCredentialType">
      <value>FIDO_2_0</value>
    </enum>
    <enum name="MSIceAddrType">
      <value>os</value>
      <value>stun</value>
      <value>turn</value>
      <value>peer-derived</value>
    </enum>
    <enum name="MSIceType">
      <value>failed</value>
      <value>direct</value>
      <value>relay</value>
    </enum>
    <enum name="MSStatsType">
      <value>description</value>
      <value>localclientevent</value>
      <value>inbound-network</value>
      <value>outbound-network</value>
      <value>inbound-payload</value>
      <value>outbound-payload</value>
      <value>transportdiagnostics</value>
    </enum>
    <enum name="MSTransportType">
      <value>Embedded</value>
      <value>USB</value>
      <value>NFC</value>
      <value>BT</value>
    </enum>
    <enum name="MSWebViewPermissionState">
      <value>unknown</value>
      <value>defer</value>
      <value>allow</value>
      <value>deny</value>
    </enum>
    <enum name="MSWebViewPermissionType">
      <value>geolocation</value>
      <value>unlimitedIndexedDBQuota</value>
      <value>media</value>
      <value>pointerlock</value>
      <value>webnotifications</value>
    </enum>
    <enum name="NavigationReason">
      <value>up</value>
      <value>down</value>
      <value>left</value>
      <value>right</value>
    </enum>
    <enum name="NavigationType">
      <value>navigate</value>
      <value>reload</value>
      <value>back_forward</value>
      <value>prerender</value>
    </enum>
    <enum name="NotificationDirection">
      <value>auto</value>
      <value>ltr</value>
      <value>rtl</value>
    </enum>
    <enum name="NotificationPermission">
      <value>default</value>
      <value>denied</value>
      <value>granted</value>
    </enum>
    <enum name="OscillatorType">
      <value>sine</value>
      <value>square</value>
      <value>sawtooth</value>
      <value>triangle</value>
      <value>custom</value>
    </enum>
    <enum name="OverSampleType">
      <value>none</value>
      <value>2x</value>
      <value>4x</value>
    </enum>
    <enum name="PanningModelType">
      <value>equalpower</value>
    </enum>
    <enum name="PaymentComplete">
      <value>success</value>
      <value>fail</value>
      <value/>
    </enum>
    <enum name="PaymentShippingType">
      <value>shipping</value>
      <value>delivery</value>
      <value>pickup</value>
    </enum>
    <enum name="PushEncryptionKeyName">
      <value>p256dh</value>
      <value>auth</value>
    </enum>
    <enum name="PushPermissionState">
      <value>granted</value>
      <value>denied</value>
      <value>prompt</value>
    </enum>
    <enum name="ReferrerPolicy">
      <value/>
      <value>no-referrer</value>
      <value>no-referrer-when-downgrade</value>
      <value>origin-only</value>
      <value>origin-when-cross-origin</value>
      <value>unsafe-url</value>
    </enum>
    <enum name="RequestCache">
      <value>default</value>
      <value>no-store</value>
      <value>reload</value>
      <value>no-cache</value>
      <value>force-cache</value>
    </enum>
    <enum name="RequestCredentials">
      <value>omit</value>
      <value>same-origin</value>
      <value>include</value>
    </enum>
    <enum name="RequestDestination">
      <value/>
      <value>document</value>
      <value>sharedworker</value>
      <value>subresource</value>
      <value>unknown</value>
      <value>worker</value>
    </enum>
    <enum name="RequestMode">
      <value>navigate</value>
      <value>same-origin</value>
      <value>no-cors</value>
      <value>cors</value>
    </enum>
    <enum name="RequestRedirect">
      <value>follow</value>
      <value>error</value>
      <value>manual</value>
    </enum>
    <enum name="RequestType">
      <value/>
      <value>audio</value>
      <value>font</value>
      <value>image</value>
      <value>script</value>
      <value>style</value>
      <value>track</value>
      <value>video</value>
    </enum>
    <enum name="ResponseType">
      <value>basic</value>
      <value>cors</value>
      <value>default</value>
      <value>error</value>
      <value>opaque</value>
      <value>opaqueredirect</value>
    </enum>
    <enum name="RTCBundlePolicy">
      <value>balanced</value>
      <value>max-compat</value>
      <value>max-bundle</value>
    </enum>
    <enum name="RTCDegradationPreference">
      <value>maintain-framerate</value>
      <value>maintain-resolution</value>
      <value>balanced</value>
    </enum>
    <enum name="RTCDtlsRole">
      <value>auto</value>
      <value>client</value>
      <value>server</value>
    </enum>
    <enum name="RTCDtlsTransportState">
      <value>new</value>
      <value>connecting</value>
      <value>connected</value>
      <value>closed</value>
    </enum>
    <enum name="RTCIceCandidateType">
      <value>host</value>
      <value>srflx</value>
      <value>prflx</value>
      <value>relay</value>
    </enum>
    <enum name="RTCIceComponent">
      <value>RTP</value>
      <value>RTCP</value>
    </enum>
    <enum name="RTCIceConnectionState">
      <value>new</value>
      <value>checking</value>
      <value>connected</value>
      <value>completed</value>
      <value>failed</value>
      <value>disconnected</value>
      <value>closed</value>
    </enum>
    <enum name="RTCIceGathererState">
      <value>new</value>
      <value>gathering</value>
      <value>complete</value>
    </enum>
    <enum name="RTCIceGatheringState">
      <value>new</value>
      <value>gathering</value>
      <value>complete</value>
    </enum>
    <enum name="RTCIceGatherPolicy">
      <value>all</value>
      <value>nohost</value>
      <value>relay</value>
    </enum>
    <enum name="RTCIceProtocol">
      <value>udp</value>
      <value>tcp</value>
    </enum>
    <enum name="RTCIceRole">
      <value>controlling</value>
      <value>controlled</value>
    </enum>
    <enum name="RTCIceTcpCandidateType">
      <value>active</value>
      <value>passive</value>
      <value>so</value>
    </enum>
    <enum name="RTCIceTransportPolicy">
      <value>none</value>
      <value>relay</value>
      <value>all</value>
    </enum>
    <enum name="RTCIceTransportState">
      <value>new</value>
      <value>checking</value>
      <value>connected</value>
      <value>completed</value>
      <value>disconnected</value>
      <value>closed</value>
    </enum>
    <enum name="RTCSdpType">
      <value>offer</value>
      <value>pranswer</value>
      <value>answer</value>
    </enum>
    <enum name="RTCSignalingState">
      <value>stable</value>
      <value>have-local-offer</value>
      <value>have-remote-offer</value>
      <value>have-local-pranswer</value>
      <value>have-remote-pranswer</value>
      <value>closed</value>
    </enum>
    <enum name="RTCStatsIceCandidatePairState">
      <value>frozen</value>
      <value>waiting</value>
      <value>inprogress</value>
      <value>failed</value>
      <value>succeeded</value>
      <value>cancelled</value>
    </enum>
    <enum name="RTCStatsIceCandidateType">
      <value>host</value>
      <value>serverreflexive</value>
      <value>peerreflexive</value>
      <value>relayed</value>
    </enum>
    <enum name="RTCStatsType">
      <value>inboundrtp</value>
      <value>outboundrtp</value>
      <value>session</value>
      <value>datachannel</value>
      <value>track</value>
      <value>transport</value>
      <value>candidatepair</value>
      <value>localcandidate</value>
      <value>remotecandidate</value>
    </enum>
    <enum name="ScopedCredentialType">
      <value>ScopedCred</value>
    </enum>
    <enum name="ServiceWorkerState">
      <value>installing</value>
      <value>installed</value>
      <value>activating</value>
      <value>activated</value>
      <value>redundant</value>
    </enum>
    <enum name="Transport">
      <value>usb</value>
      <value>nfc</value>
      <value>ble</value>
    </enum>
    <enum name="VideoFacingModeEnum">
      <value>user</value>
      <value>environment</value>
      <value>left</value>
      <value>right</value>
    </enum>
    <enum name="VisibilityState">
      <value>hidden</value>
      <value>visible</value>
      <value>prerender</value>
      <value>unloaded</value>
    </enum>
    <enum name="XMLHttpRequestResponseType">
      <value/>
      <value>arraybuffer</value>
      <value>blob</value>
      <value>document</value>
      <value>json</value>
      <value>text</value>
    </enum>
  </enums>
  <interfaces>
    <interface name="AnalyserNode" extends="AudioNode">
      <methods>
        <method name="getByteFrequencyData" type="void">
          <param name="array" type="Uint8Array"/>
        </method>
        <method name="getByteTimeDomainData" type="void">
          <param name="array" type="Uint8Array"/>
        </method>
        <method name="getFloatFrequencyData" type="void">
          <param name="array" type="Float32Array"/>
        </method>
        <method name="getFloatTimeDomainData" type="void">
          <param name="array" type="Float32Array"/>
        </method>
      </methods>
      <properties>
        <property name="fftSize" type="unsigned long"/>
        <property name="frequencyBinCount" read-only="1" type="unsigned long"/>
        <property name="maxDecibels" type="double"/>
        <property name="minDecibels" type="double"/>
        <property name="smoothingTimeConstant" type="double"/>
      </properties>
    </interface>
    <interface name="ANGLE_instanced_arrays" extends="Object">
      <constants>
        <constant name="VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE" type="unsigned long" type-original="GLenum" value="0x88FE"/>
      </constants>
      <methods>
        <method name="drawArraysInstancedANGLE" type="void">
          <param name="mode" type="unsigned long" type-original="GLenum"/>
          <param name="first" type="long" type-original="GLint"/>
          <param name="count" type="long" type-original="GLsizei"/>
          <param name="primcount" type="long" type-original="GLsizei"/>
        </method>
        <method name="drawElementsInstancedANGLE" type="void">
          <param name="mode" type="unsigned long" type-original="GLenum"/>
          <param name="count" type="long" type-original="GLsizei"/>
          <param name="type" type="unsigned long" type-original="GLenum"/>
          <param name="offset" type="long long" type-original="GLintptr"/>
          <param name="primcount" type="long" type-original="GLsizei"/>
        </method>
        <method name="vertexAttribDivisorANGLE" type="void">
          <param name="index" type="unsigned long" type-original="GLuint"/>
          <param name="divisor" type="unsigned long" type-original="GLuint"/>
        </method>
      </methods>
    </interface>
    <interface name="AnimationEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="AnimationEventInit"/>
      </constructor>
      <methods>
        <method name="initAnimationEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="animationNameArg" type="DOMString"/>
          <param name="elapsedTimeArg" type="float"/>
        </method>
      </methods>
      <properties>
        <property name="animationName" read-only="1" type="DOMString"/>
        <property name="elapsedTime" read-only="1" type="float"/>
      </properties>
    </interface>
    <interface name="ApplicationCache" extends="EventTarget">
      <constants>
        <constant name="CHECKING" type="unsigned short" value="2"/>
        <constant name="DOWNLOADING" type="unsigned short" value="3"/>
        <constant name="IDLE" type="unsigned short" value="1"/>
        <constant name="OBSOLETE" type="unsigned short" value="5"/>
        <constant name="UNCACHED" type="unsigned short" value="0"/>
        <constant name="UPDATEREADY" type="unsigned short" value="4"/>
      </constants>
      <events>
        <event name="progress" dispatch="sync" follows="downloading" precedes="updateready" skips-window="1" type="ProgressEvent"/>
        <event name="obsolete" dispatch="sync" follows="downloading" skips-window="1" type="Event"/>
        <event name="error" dispatch="sync" follows="downloading" skips-window="1" type="Event"/>
        <event name="cached" dispatch="sync" follows="downloading" skips-window="1" type="Event"/>
        <event name="updateready" dispatch="sync" follows="progress" skips-window="1" type="Event"/>
        <event name="downloading" dispatch="sync" follows="checking" precedes="noupdate progress obsolete cached" skips-window="1" type="Event"/>
        <event name="noupdate" dispatch="sync" follows="downloading" skips-window="1" type="Event"/>
        <event name="checking" dispatch="sync" precedes="downloading" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="abort" type="void"/>
        <method name="swapCache" type="void"/>
        <method name="update" type="void"/>
      </methods>
      <properties>
        <property name="oncached" event-handler="cached" type="EventHandler"/>
        <property name="onchecking" event-handler="checking" type="EventHandler"/>
        <property name="ondownloading" event-handler="downloading" type="EventHandler"/>
        <property name="onerror" event-handler="error" type="EventHandler"/>
        <property name="onnoupdate" event-handler="noupdate" type="EventHandler"/>
        <property name="onobsolete" event-handler="obsolete" type="EventHandler"/>
        <property name="onprogress" event-handler="progress" type="EventHandler"/>
        <property name="onupdateready" event-handler="updateready" type="EventHandler"/>
        <property name="status" read-only="1" type="unsigned short"/>
      </properties>
    </interface>
    <interface name="Attr" extends="Node">
      <properties>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="ownerElement" read-only="1" type="Element"/>
        <property name="prefix" nullable="1" read-only="1" type="DOMString"/>
        <property name="specified" read-only="1" type="boolean"/>
        <property name="value" type="DOMString"/>
      </properties>
    </interface>
    <interface name="AudioBuffer" extends="Object">
      <methods>
        <method name="copyFromChannel" type="void">
          <param name="destination" type="Float32Array"/>
          <param name="channelNumber" type="long"/>
          <param name="startInChannel" default="0" optional="1" type="unsigned long"/>
        </method>
        <method name="copyToChannel" type="void">
          <param name="source" type="Float32Array"/>
          <param name="channelNumber" type="long"/>
          <param name="startInChannel" default="0" optional="1" type="unsigned long"/>
        </method>
        <method name="getChannelData" type="Float32Array">
          <param name="channel" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="duration" read-only="1" type="double"/>
        <property name="length" read-only="1" type="long"/>
        <property name="numberOfChannels" read-only="1" type="long"/>
        <property name="sampleRate" read-only="1" type="float"/>
      </properties>
    </interface>
    <interface name="AudioBufferSourceNode" extends="AudioNode">
      <events>
        <event name="end" dispatch="sync" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="start" type="void">
          <param name="when" default="0" optional="1" type="double"/>
          <param name="offset" default="0" optional="1" type="double"/>
          <param name="duration" optional="1" type="double"/>
        </method>
        <method name="stop" type="void">
          <param name="when" default="0" optional="1" type="double"/>
        </method>
      </methods>
      <properties>
        <property name="buffer" nullable="1" type="AudioBuffer"/>
        <property name="detune" read-only="1" type="AudioParam"/>
        <property name="loop" type="boolean"/>
        <property name="loopEnd" type="double"/>
        <property name="loopStart" type="double"/>
        <property name="onended" event-handler="ended" type="EventHandler"/>
        <property name="playbackRate" read-only="1" type="AudioParam"/>
      </properties>
    </interface>
    <interface name="AudioContext" extends="EventTarget">
      <constructor/>
      <methods>
        <method name="close" type="Promise&lt;void&gt;"/>
        <method name="createAnalyser" type="AnalyserNode"/>
        <method name="createBiquadFilter" type="BiquadFilterNode"/>
        <method name="createBuffer" type="AudioBuffer">
          <param name="numberOfChannels" type="unsigned long"/>
          <param name="length" type="unsigned long"/>
          <param name="sampleRate" type="float"/>
        </method>
        <method name="createBufferSource" type="AudioBufferSourceNode"/>
        <method name="createChannelMerger" type="ChannelMergerNode">
          <param name="numberOfInputs" default="6" optional="1" type="unsigned long"/>
        </method>
        <method name="createChannelSplitter" type="ChannelSplitterNode">
          <param name="numberOfOutputs" default="6" optional="1" type="unsigned long"/>
        </method>
        <method name="createConvolver" type="ConvolverNode"/>
        <method name="createDelay" type="DelayNode">
          <param name="maxDelayTime" default="1.0" optional="1" type="double"/>
        </method>
        <method name="createDynamicsCompressor" type="DynamicsCompressorNode"/>
        <method name="createGain" type="GainNode"/>
        <method name="createIIRFilter" type="IIRFilterNode">
          <param name="feedforward" type="sequence&lt;double&gt;"/>
          <param name="feedback" type="sequence&lt;double&gt;"/>
        </method>
        <method name="createMediaElementSource" type="MediaElementAudioSourceNode">
          <param name="mediaElement" type="HTMLMediaElement"/>
        </method>
        <method name="createMediaStreamSource" type="MediaStreamAudioSourceNode">
          <param name="mediaStream" type="MediaStream"/>
        </method>
        <method name="createOscillator" type="OscillatorNode"/>
        <method name="createPanner" type="PannerNode"/>
        <method name="createPeriodicWave" type="PeriodicWave">
          <param name="real" type="Float32Array"/>
          <param name="imag" type="Float32Array"/>
          <param name="constraints" optional="1" type="PeriodicWaveConstraints"/>
        </method>
        <method name="createScriptProcessor" type="ScriptProcessorNode">
          <param name="bufferSize" default="0" optional="1" type="unsigned long"/>
          <param name="numberOfInputChannels" default="2" optional="1" type="unsigned long"/>
          <param name="numberOfOutputChannels" default="2" optional="1" type="unsigned long"/>
        </method>
        <method name="createStereoPanner" type="StereoPannerNode"/>
        <method name="createWaveShaper" type="WaveShaperNode"/>
        <method name="decodeAudioData" type="Promise&lt;AudioBuffer&gt;">
          <param name="audioData" type="ArrayBuffer"/>
          <param name="successCallback" optional="1" type="DecodeSuccessCallback"/>
          <param name="errorCallback" optional="1" type="DecodeErrorCallback"/>
        </method>
        <method name="resume" type="Promise&lt;void&gt;"/>
        <method name="suspend" type="Promise&lt;void&gt;">
          <param name="suspendTime" type="double"/>
        </method>
      </methods>
      <properties>
        <property name="currentTime" read-only="1" type="double"/>
        <property name="destination" read-only="1" type="AudioDestinationNode"/>
        <property name="listener" read-only="1" type="AudioListener"/>
        <property name="onstatechange" event-handler="statechange" type="EventHandler"/>
        <property name="sampleRate" read-only="1" type="float"/>
        <property name="state" read-only="1" type="AudioContextState"/>
      </properties>
    </interface>
    <interface name="AudioDestinationNode" extends="AudioNode">
      <properties>
        <property name="maxChannelCount" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="AudioListener" extends="Object">
      <methods>
        <method name="setOrientation" type="void">
          <param name="x" type="double"/>
          <param name="y" type="double"/>
          <param name="z" type="double"/>
          <param name="xUp" type="double"/>
          <param name="yUp" type="double"/>
          <param name="zUp" type="double"/>
        </method>
        <method name="setPosition" type="void">
          <param name="x" type="double"/>
          <param name="y" type="double"/>
          <param name="z" type="double"/>
        </method>
        <method name="setVelocity" type="void">
          <param name="x" type="double"/>
          <param name="y" type="double"/>
          <param name="z" type="double"/>
        </method>
      </methods>
      <properties>
        <property name="dopplerFactor" type="double"/>
        <property name="speedOfSound" type="double"/>
      </properties>
    </interface>
    <interface name="AudioNode" extends="EventTarget">
      <methods>
        <method name="connect" type="AudioNode">
          <param name="destination" type="AudioNode"/>
          <param name="output" default="0" optional="1" type="unsigned long"/>
          <param name="input" default="0" optional="1" type="unsigned long"/>
        </method>
        <method name="disconnect" type="void"/>
      </methods>
      <properties>
        <property name="channelCount" type="unsigned long"/>
        <property name="channelCountMode" type="ChannelCountMode"/>
        <property name="channelInterpretation" type="ChannelInterpretation"/>
        <property name="context" read-only="1" type="AudioContext"/>
        <property name="numberOfInputs" read-only="1" type="unsigned long"/>
        <property name="numberOfOutputs" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="AudioParam" extends="Object">
      <methods>
        <method name="cancelScheduledValues" type="AudioParam">
          <param name="startTime" type="double"/>
        </method>
        <method name="exponentialRampToValueAtTime" type="AudioParam">
          <param name="value" type="float"/>
          <param name="endTime" type="double"/>
        </method>
        <method name="linearRampToValueAtTime" type="AudioParam">
          <param name="value" type="float"/>
          <param name="endTime" type="double"/>
        </method>
        <method name="setTargetAtTime" type="AudioParam">
          <param name="target" type="float"/>
          <param name="startTime" type="double"/>
          <param name="timeConstant" type="double"/>
        </method>
        <method name="setValueAtTime" type="AudioParam">
          <param name="value" type="float"/>
          <param name="startTime" type="double"/>
        </method>
        <method name="setValueCurveAtTime" type="AudioParam">
          <param name="values" type="Float32Array"/>
          <param name="startTime" type="double"/>
          <param name="duration" type="double"/>
        </method>
      </methods>
      <properties>
        <property name="defaultValue" read-only="1" type="float"/>
        <property name="value" type="float"/>
      </properties>
    </interface>
    <interface name="AudioProcessingEvent" extends="Event">
      <properties>
        <property name="inputBuffer" read-only="1" type="AudioBuffer"/>
        <property name="outputBuffer" read-only="1" type="AudioBuffer"/>
        <property name="playbackTime" read-only="1" type="double"/>
      </properties>
    </interface>
    <interface name="AudioTrack" extends="Object">
      <properties>
        <property name="enabled" type="boolean"/>
        <property name="id" read-only="1" type="DOMString"/>
        <property name="kind" type="DOMString"/>
        <property name="label" read-only="1" type="DOMString"/>
        <property name="language" type="DOMString"/>
        <property name="sourceBuffer" read-only="1" type="SourceBuffer"/>
      </properties>
    </interface>
    <interface name="AudioTrackList" extends="EventTarget">
      <events>
        <event name="addtrack" dispatch="async" skips-window="1" type="TrackEvent"/>
        <event name="removetrack" dispatch="async" skips-window="1" type="TrackEvent"/>
        <event name="change" dispatch="async" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="getTrackById" nullable="1" type="AudioTrack">
          <param name="id" type="DOMString"/>
        </method>
        <method name="item" getter="1" type="AudioTrack">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="onaddtrack" event-handler="addtrack" type="EventHandler"/>
        <property name="onchange" event-handler="change" type="EventHandler"/>
        <property name="onremovetrack" event-handler="removetrack" type="EventHandler"/>
      </properties>
    </interface>
    <interface name="BarProp" extends="Object">
      <properties>
        <property name="visible" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="BeforeUnloadEvent" extends="Event">
      <properties>
        <property name="returnValue" nullable="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="BiquadFilterNode" extends="AudioNode">
      <methods>
        <method name="getFrequencyResponse" type="void">
          <param name="frequencyHz" type="Float32Array"/>
          <param name="magResponse" type="Float32Array"/>
          <param name="phaseResponse" type="Float32Array"/>
        </method>
      </methods>
      <properties>
        <property name="detune" read-only="1" type="AudioParam"/>
        <property name="frequency" read-only="1" type="AudioParam"/>
        <property name="gain" read-only="1" type="AudioParam"/>
        <property name="Q" read-only="1" type="AudioParam"/>
        <property name="type" type="BiquadFilterType"/>
      </properties>
    </interface>
    <interface name="Blob" extends="Object">
      <constructor/>
      <methods>
        <method name="msClose" type="void"/>
        <method name="msDetachStream" type="any"/>
        <method name="slice" type="Blob">
          <param name="start" default="0" optional="1" type="long long"/>
          <param name="end" default="0" optional="1" type="long long"/>
          <param name="contentType" optional="1" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="size" read-only="1" type="unsigned long long"/>
        <property name="type" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="Cache" extends="Object">
      <methods>
        <method name="add" new-object="1" type="Promise&lt;void&gt;">
          <param name="request" type="RequestInfo"/>
        </method>
        <method name="addAll" new-object="1" type="Promise&lt;void&gt;">
          <param name="requests" type="sequence&lt;RequestInfo&gt;"/>
        </method>
        <method name="delete" new-object="1" type="Promise&lt;boolean&gt;">
          <param name="request" type="RequestInfo"/>
          <param name="options" optional="1" type="CacheQueryOptions"/>
        </method>
        <method name="keys" new-object="1" type="Promise&lt;sequence&lt;Request&gt;&gt;">
          <param name="request" optional="1" type="RequestInfo"/>
          <param name="options" optional="1" type="CacheQueryOptions"/>
        </method>
        <method name="match" new-object="1" type="Promise&lt;Response&gt;">
          <param name="request" type="RequestInfo"/>
          <param name="options" optional="1" type="CacheQueryOptions"/>
        </method>
        <method name="matchAll" new-object="1" type="Promise&lt;sequence&lt;Response&gt;&gt;">
          <param name="request" optional="1" type="RequestInfo"/>
          <param name="options" optional="1" type="CacheQueryOptions"/>
        </method>
        <method name="put" new-object="1" type="Promise&lt;void&gt;">
          <param name="request" type="RequestInfo"/>
          <param name="response" type="Response"/>
        </method>
      </methods>
    </interface>
    <interface name="CacheStorage" extends="Object" secure-context="1">
      <methods>
        <method name="delete" new-object="1" type="Promise&lt;boolean&gt;">
          <param name="cacheName" type="DOMString"/>
        </method>
        <method name="has" new-object="1" type="Promise&lt;boolean&gt;">
          <param name="cacheName" type="DOMString"/>
        </method>
        <method name="keys" new-object="1" type="Promise&lt;sequence&lt;DOMString&gt;&gt;"/>
        <method name="match" new-object="1" type="Promise&lt;any&gt;">
          <param name="request" type="RequestInfo"/>
          <param name="options" optional="1" type="CacheQueryOptions"/>
        </method>
        <method name="open" new-object="1" type="Promise&lt;Cache&gt;">
          <param name="cacheName" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="CanvasGradient" extends="Object">
      <methods>
        <method name="addColorStop" type="void">
          <param name="offset" type="float"/>
          <param name="color" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="CanvasPattern" extends="Object"/>
    <interface name="CanvasRenderingContext2D" extends="Object">
      <implements>CanvasPathMethods</implements>
      <methods>
        <method name="beginPath" type="void"/>
        <method name="clearRect" type="void">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="w" type="float"/>
          <param name="h" type="float"/>
        </method>
        <method name="clip" type="void">
          <param name="fillRule" default="&quot;nonzero&quot;" optional="1" type="CanvasFillRule"/>
        </method>
        <method name="createImageData" type="ImageData">
          <param name="imageDataOrSw" type="(float or ImageData)"/>
          <param name="sh" optional="1" type="float"/>
        </method>
        <method name="createLinearGradient" type="CanvasGradient">
          <param name="x0" type="float"/>
          <param name="y0" type="float"/>
          <param name="x1" type="float"/>
          <param name="y1" type="float"/>
        </method>
        <method name="createPattern" type="CanvasPattern">
          <param name="image" type="(HTMLImageElement or HTMLCanvasElement or HTMLVideoElement)"/>
          <param name="repetition" type="DOMString"/>
        </method>
        <method name="createRadialGradient" type="CanvasGradient">
          <param name="x0" type="float"/>
          <param name="y0" type="float"/>
          <param name="r0" type="float"/>
          <param name="x1" type="float"/>
          <param name="y1" type="float"/>
          <param name="r1" type="float"/>
        </method>
        <method name="drawFocusIfNeeded" type="void">
          <param name="element" type="Element"/>
        </method>
        <method name="drawImage" type="void">
          <param name="image" type="(HTMLImageElement or HTMLCanvasElement or HTMLVideoElement)"/>
          <param name="offsetX" type="float"/>
          <param name="offsetY" type="float"/>
          <param name="width" optional="1" type="float"/>
          <param name="height" optional="1" type="float"/>
          <param name="canvasOffsetX" optional="1" type="float"/>
          <param name="canvasOffsetY" optional="1" type="float"/>
          <param name="canvasImageWidth" optional="1" type="float"/>
          <param name="canvasImageHeight" optional="1" type="float"/>
        </method>
        <method name="fill" type="void">
          <param name="fillRule" default="&quot;nonzero&quot;" optional="1" type="CanvasFillRule"/>
        </method>
        <method name="fillRect" type="void">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="w" type="float"/>
          <param name="h" type="float"/>
        </method>
        <method name="fillText" type="void">
          <param name="text" type="DOMString"/>
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="maxWidth" optional="1" type="float"/>
        </method>
        <method name="getImageData" type="ImageData">
          <param name="sx" type="float"/>
          <param name="sy" type="float"/>
          <param name="sw" type="float"/>
          <param name="sh" type="float"/>
        </method>
        <method name="getLineDash" type="sequence&lt;UnrestrictedDouble&gt;"/>
        <method name="isPointInPath" type="boolean">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="fillRule" default="&quot;nonzero&quot;" optional="1" type="CanvasFillRule"/>
        </method>
        <method name="measureText" type="TextMetrics">
          <param name="text" type="DOMString"/>
        </method>
        <method name="putImageData" type="void">
          <param name="imagedata" type="ImageData"/>
          <param name="dx" type="float"/>
          <param name="dy" type="float"/>
          <param name="dirtyX" optional="1" type="float"/>
          <param name="dirtyY" optional="1" type="float"/>
          <param name="dirtyWidth" optional="1" type="float"/>
          <param name="dirtyHeight" optional="1" type="float"/>
        </method>
        <method name="restore" type="void"/>
        <method name="rotate" type="void">
          <param name="angle" type="float"/>
        </method>
        <method name="save" type="void"/>
        <method name="scale" type="void">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
        </method>
        <method name="setLineDash" type="void">
          <param name="segments" type="sequence&lt;UnrestrictedDouble&gt;"/>
        </method>
        <method name="setTransform" type="void">
          <param name="m11" type="float"/>
          <param name="m12" type="float"/>
          <param name="m21" type="float"/>
          <param name="m22" type="float"/>
          <param name="dx" type="float"/>
          <param name="dy" type="float"/>
        </method>
        <method name="stroke" type="void">
          <param name="path" optional="1" type="Path2D"/>
        </method>
        <method name="strokeRect" type="void">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="w" type="float"/>
          <param name="h" type="float"/>
        </method>
        <method name="strokeText" type="void">
          <param name="text" type="DOMString"/>
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="maxWidth" optional="1" type="float"/>
        </method>
        <method name="transform" type="void">
          <param name="m11" type="float"/>
          <param name="m12" type="float"/>
          <param name="m21" type="float"/>
          <param name="m22" type="float"/>
          <param name="dx" type="float"/>
          <param name="dy" type="float"/>
        </method>
        <method name="translate" type="void">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
        </method>
      </methods>
      <properties>
        <property name="canvas" read-only="1" type="HTMLCanvasElement"/>
        <property name="fillStyle" type="any"/>
        <property name="font" type="DOMString"/>
        <property name="globalAlpha" type="float"/>
        <property name="globalCompositeOperation" type="DOMString"/>
        <property name="imageSmoothingEnabled" type="bool"/>
        <property name="lineCap" type="DOMString"/>
        <property name="lineDashOffset" type="UnrestrictedDouble"/>
        <property name="lineJoin" type="DOMString"/>
        <property name="lineWidth" type="float"/>
        <property name="miterLimit" type="float"/>
        <property name="msFillRule" type="CanvasFillRule"/>
        <property name="shadowBlur" type="float"/>
        <property name="shadowColor" type="DOMString"/>
        <property name="shadowOffsetX" type="float"/>
        <property name="shadowOffsetY" type="float"/>
        <property name="strokeStyle" type="any"/>
        <property name="textAlign" type="DOMString"/>
        <property name="textBaseline" type="DOMString"/>
      </properties>
    </interface>
    <interface name="CDATASection" extends="Text"/>
    <interface name="ChannelMergerNode" extends="AudioNode"/>
    <interface name="ChannelSplitterNode" extends="AudioNode"/>
    <interface name="CharacterData" extends="Node">
      <events>
        <event name="DOMCharacterDataModified" bubbles="1" dispatch="sync" type="MutationEvent"/>
        <event name="DOMSubtreeModified" bubbles="1" dispatch="async-and-combine" type="MutationEvent"/>
      </events>
      <implements>ChildNode</implements>
      <methods>
        <method name="appendData" type="void">
          <param name="arg" type="DOMString"/>
        </method>
        <method name="deleteData" type="void">
          <param name="offset" type="unsigned long"/>
          <param name="count" type="unsigned long"/>
        </method>
        <method name="insertData" type="void">
          <param name="offset" type="unsigned long"/>
          <param name="arg" type="DOMString"/>
        </method>
        <method name="replaceData" type="void">
          <param name="offset" type="unsigned long"/>
          <param name="count" type="unsigned long"/>
          <param name="arg" type="DOMString"/>
        </method>
        <method name="substringData" type="DOMString">
          <param name="offset" type="unsigned long"/>
          <param name="count" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="data" type="DOMString"/>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="ClientRect" extends="Object">
      <properties>
        <property name="bottom" type="long"/>
        <property name="height" read-only="1" type="float"/>
        <property name="left" type="long"/>
        <property name="right" type="long"/>
        <property name="top" type="long"/>
        <property name="width" read-only="1" type="float"/>
      </properties>
    </interface>
    <interface name="ClientRectList" extends="Object">
      <methods>
        <method name="item" getter="1" type="ClientRect">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="ClipboardEvent" extends="Event">
      <properties>
        <property name="clipboardData" read-only="1" type="DataTransfer"/>
      </properties>
    </interface>
    <interface name="CloseEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="CloseEventInit"/>
      </constructor>
      <methods>
        <method name="initCloseEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="wasCleanArg" type="boolean"/>
          <param name="codeArg" type="unsigned short"/>
          <param name="reasonArg" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="code" read-only="1" type="unsigned short"/>
        <property name="reason" read-only="1" type="DOMString"/>
        <property name="wasClean" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="Comment" extends="CharacterData">
      <properties>
        <property name="text" type="DOMString"/>
      </properties>
    </interface>
    <interface name="CompositionEvent" extends="UIEvent">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="CompositionEventInit"/>
      </constructor>
      <methods>
        <method name="initCompositionEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="viewArg" type="Window"/>
          <param name="dataArg" type="DOMString"/>
          <param name="locale" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="data" read-only="1" type="DOMString"/>
        <property name="locale" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="Console" extends="Object">
      <methods>
        <method name="assert" type="void">
          <param name="test" optional="1" type="boolean"/>
          <param name="message" optional="1" type="DOMString"/>
          <param name="optionalParams" type="any" variadic="1"/>
        </method>
        <method name="clear" type="void"/>
        <method name="count" type="void">
          <param name="countTitle" optional="1" type="DOMString"/>
        </method>
        <method name="debug" type="void">
          <param name="message" optional="1" type="DOMString"/>
          <param name="optionalParams" type="any" variadic="1"/>
        </method>
        <method name="dir" type="void">
          <param name="value" optional="1" type="any"/>
          <param name="optionalParams" type="any" variadic="1"/>
        </method>
        <method name="dirxml" type="void">
          <param name="value" type="any"/>
        </method>
        <method name="error" type="void">
          <param name="message" optional="1" type="DOMString"/>
          <param name="optionalParams" type="any" variadic="1"/>
        </method>
        <method name="exception" type="void">
          <param name="message" optional="1" type="DOMString"/>
          <param name="optionalParams" type="any" variadic="1"/>
        </method>
        <method name="group" type="void">
          <param name="groupTitle" optional="1" type="DOMString"/>
        </method>
        <method name="groupCollapsed" type="void">
          <param name="groupTitle" optional="1" type="DOMString"/>
        </method>
        <method name="groupEnd" type="void"/>
        <method name="info" type="void">
          <param name="message" optional="1" type="DOMString"/>
          <param name="optionalParams" type="any" variadic="1"/>
        </method>
        <method name="log" type="void">
          <param name="message" optional="1" type="DOMString"/>
          <param name="optionalParams" type="any" variadic="1"/>
        </method>
        <method name="msIsIndependentlyComposed" type="boolean">
          <param name="element" type="Element"/>
        </method>
        <method name="profile" type="void">
          <param name="reportName" optional="1" type="DOMString"/>
        </method>
        <method name="profileEnd" type="void"/>
        <method name="select" type="void">
          <param name="element" type="Element"/>
        </method>
        <method name="table" type="void">
          <param name="data" type="any" variadic="1"/>
        </method>
        <method name="time" type="void">
          <param name="timerName" optional="1" type="DOMString"/>
        </method>
        <method name="timeEnd" type="void">
          <param name="timerName" optional="1" type="DOMString"/>
        </method>
        <method name="trace" type="void"/>
        <method name="warn" type="void">
          <param name="message" optional="1" type="DOMString"/>
          <param name="optionalParams" type="any" variadic="1"/>
        </method>
      </methods>
    </interface>
    <interface name="ConvolverNode" extends="AudioNode">
      <properties>
        <property name="buffer" nullable="1" type="AudioBuffer"/>
        <property name="normalize" type="boolean"/>
      </properties>
    </interface>
    <interface name="Coordinates" extends="Object">
      <properties>
        <property name="accuracy" read-only="1" type="double"/>
        <property name="altitude" nullable="1" read-only="1" type="double"/>
        <property name="altitudeAccuracy" nullable="1" read-only="1" type="double"/>
        <property name="heading" nullable="1" read-only="1" type="double"/>
        <property name="latitude" read-only="1" type="double"/>
        <property name="longitude" read-only="1" type="double"/>
        <property name="speed" nullable="1" read-only="1" type="double"/>
      </properties>
    </interface>
    <interface name="Crypto" extends="Object">
      <implements>RandomSource</implements>
      <properties>
        <property name="subtle" read-only="1" type="SubtleCrypto"/>
      </properties>
    </interface>
    <interface name="CryptoKey" extends="Object">
      <properties>
        <property name="algorithm" read-only="1" type="KeyAlgorithm"/>
        <property name="extractable" read-only="1" type="boolean"/>
        <property name="type" read-only="1" type="DOMString" type-original="KeyType"/>
        <property name="usages" read-only="1" type="sequence&lt;DOMString&gt;"/>
      </properties>
    </interface>
    <interface name="CryptoKeyPair" extends="Object">
      <properties>
        <property name="privateKey" type="CryptoKey"/>
        <property name="publicKey" type="CryptoKey"/>
      </properties>
    </interface>
    <interface name="CSS" extends="Object" static="1">
      <methods>
        <method name="supports" static="1" type="boolean">
          <param name="property" type="DOMString"/>
          <param name="value" optional="1" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="CSSConditionRule" extends="CSSGroupingRule">
      <properties>
        <property name="conditionText" type="DOMString"/>
      </properties>
    </interface>
    <interface name="CSSFontFaceRule" extends="CSSRule">
      <properties>
        <property name="style" read-only="1" type="CSSStyleDeclaration"/>
      </properties>
    </interface>
    <interface name="CSSGroupingRule" extends="CSSRule">
      <methods>
        <method name="deleteRule" type="void">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="insertRule" type="unsigned long">
          <param name="rule" type="DOMString"/>
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="cssRules" read-only="1" type="CSSRuleList"/>
      </properties>
    </interface>
    <interface name="CSSImportRule" extends="CSSRule">
      <properties>
        <property name="href" read-only="1" type="DOMString"/>
        <property name="media" put-forwards="mediaText" read-only="1" type="MediaList"/>
        <property name="styleSheet" read-only="1" type="CSSStyleSheet"/>
      </properties>
    </interface>
    <interface name="CSSKeyframeRule" extends="CSSRule">
      <properties>
        <property name="keyText" type="DOMString"/>
        <property name="style" read-only="1" type="CSSStyleDeclaration"/>
      </properties>
    </interface>
    <interface name="CSSKeyframesRule" extends="CSSRule">
      <methods>
        <method name="appendRule" type="void">
          <param name="rule" type="DOMString"/>
        </method>
        <method name="deleteRule" type="void">
          <param name="rule" type="DOMString"/>
        </method>
        <method name="findRule" type="CSSKeyframeRule">
          <param name="rule" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="cssRules" read-only="1" type="CSSRuleList"/>
        <property name="name" type="DOMString"/>
      </properties>
    </interface>
    <interface name="CSSMediaRule" extends="CSSConditionRule">
      <properties>
        <property name="media" put-forwards="mediaText" read-only="1" type="MediaList"/>
      </properties>
    </interface>
    <interface name="CSSNamespaceRule" extends="CSSRule">
      <properties>
        <property name="namespaceURI" read-only="1" type="DOMString"/>
        <property name="prefix" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="CSSPageRule" extends="CSSRule">
      <properties>
        <property name="pseudoClass" read-only="1" type="DOMString"/>
        <property name="selector" read-only="1" type="DOMString"/>
        <property name="selectorText" type="DOMString"/>
        <property name="style" read-only="1" type="CSSStyleDeclaration"/>
      </properties>
    </interface>
    <interface name="CSSRule" extends="Object">
      <constants>
        <constant name="CHARSET_RULE" type="unsigned short" value="2"/>
        <constant name="FONT_FACE_RULE" type="unsigned short" value="5"/>
        <constant name="IMPORT_RULE" type="unsigned short" value="3"/>
        <constant name="KEYFRAME_RULE" type="unsigned short" value="8"/>
        <constant name="KEYFRAMES_RULE" type="unsigned short" value="7"/>
        <constant name="MEDIA_RULE" type="unsigned short" value="4"/>
        <constant name="NAMESPACE_RULE" type="unsigned short" value="10"/>
        <constant name="PAGE_RULE" type="unsigned short" value="6"/>
        <constant name="STYLE_RULE" type="unsigned short" value="1"/>
        <constant name="SUPPORTS_RULE" type="unsigned short" value="12"/>
        <constant name="UNKNOWN_RULE" type="unsigned short" value="0"/>
        <constant name="VIEWPORT_RULE" type="unsigned short" value="15"/>
      </constants>
      <properties>
        <property name="cssText" type="DOMString"/>
        <property name="parentRule" read-only="1" type="CSSRule"/>
        <property name="parentStyleSheet" read-only="1" type="CSSStyleSheet"/>
        <property name="type" read-only="1" type="unsigned short"/>
      </properties>
    </interface>
    <interface name="CSSRuleList" extends="Object">
      <methods>
        <method name="item" getter="1" type="CSSRule">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="long"/>
      </properties>
    </interface>
    <interface name="CSSStyleDeclaration" extends="Object">
      <methods>
        <method name="getPropertyPriority" type="DOMString">
          <param name="propertyName" type="DOMString"/>
        </method>
        <method name="getPropertyValue" type="DOMString">
          <param name="propertyName" type="DOMString"/>
        </method>
        <method name="item" getter="1" type="DOMString">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeProperty" type="DOMString">
          <param name="propertyName" type="DOMString"/>
        </method>
        <method name="setProperty" type="void">
          <param name="propertyName" type="DOMString"/>
          <param name="value" nullable="1" type="DOMString"/>
          <param name="priority" nullable="1" optional="1" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="alignContent" css-property="align-content" css-property-enum-values="stretch flex-start flex-end center space-between space-around inherit initial" css-property-initial="stretch" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="alignItems" css-property="align-items" css-property-enum-values="stretch flex-start flex-end center baseline inherit initial" css-property-initial="stretch" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="alignmentBaseline" css-property="alignment-baseline" css-property-enum-values="auto baseline before-edge text-before-edge middle central after-edge text-after-edge ideographic alphabetic hanging mathematical inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="alignSelf" css-property="align-self" css-property-enum-values="auto flex-start flex-end center baseline stretch inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="animation" css-property="animation" css-property-enum-values="inherit initial" css-property-shorthand="1" css-property-subproperties="animation-duration animation-timing-function animation-delay animation-iteration-count animation-direction animation-fill-mode animation-play-state animation-name" css-property-value-syntax="css_animation" nullable="1" type="DOMString"/>
        <property name="animationDelay" css-property="animation-delay" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="comma_separated_css_times" nullable="1" type="DOMString"/>
        <property name="animationDirection" css-property="animation-direction" css-property-enum-values="normal reverse alternate alternate-reverse inherit initial" css-property-initial="normal" css-property-value-syntax="comma_separated_enums" nullable="1" type="DOMString"/>
        <property name="animationDuration" css-property="animation-duration" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="comma_separated_css_times" nullable="1" type="DOMString"/>
        <property name="animationFillMode" css-property="animation-fill-mode" css-property-enum-values="none forwards backwards both inherit initial" css-property-initial="none" css-property-value-syntax="comma_separated_enums" nullable="1" type="DOMString"/>
        <property name="animationIterationCount" css-property="animation-iteration-count" css-property-enum-values="infinite inherit initial" css-property-initial="1" css-property-value-syntax="comma_separated_non_negative_integer" nullable="1" type="DOMString"/>
        <property name="animationName" css-property="animation-name" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="comma_separated_keyframes_refs" nullable="1" type="DOMString"/>
        <property name="animationPlayState" css-property="animation-play-state" css-property-enum-values="running paused inherit initial" css-property-initial="running" css-property-value-syntax="comma_separated_enums" nullable="1" type="DOMString"/>
        <property name="animationTimingFunction" css-property="animation-timing-function" css-property-enum-values="step-start step-end ease ease-in ease-out ease-in-out linear inherit initial" css-property-initial="ease" css-property-value-syntax="comma_separated_css_timing_functions" nullable="1" type="DOMString"/>
        <property name="backfaceVisibility" css-property="backface-visibility" css-property-enum-values="visible hidden inherit initial" css-property-initial="visible" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="background" css-property="background" css-property-animatable="1" css-property-enum-values="none left center right top bottom scroll fixed local repeat-x repeat-y repeat space round no-repeat inherit initial" css-property-shorthand="1" css-property-subproperties="background-attachment background-clip background-color background-image background-origin background-position background-repeat background-size" css-property-value-syntax="css_background" nullable="1" type="DOMString"/>
        <property name="backgroundAttachment" css-property="background-attachment" css-property-enum-values="scroll fixed local inherit initial" css-property-initial="scroll" css-property-value-syntax="comma_separated_enums" nullable="1" type="DOMString"/>
        <property name="backgroundClip" css-property="background-clip" css-property-enum-values="border-box padding-box content-box inherit initial" css-property-initial="border-box" css-property-value-syntax="comma_separated_enums" nullable="1" type="DOMString"/>
        <property name="backgroundColor" css-property="background-color" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="transparent" css-property-value-syntax="css_color" nullable="1" type="DOMString"/>
        <property name="backgroundImage" css-property="background-image" css-property-animatable="1" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="comma_separated_css_urls" nullable="1" type="DOMString"/>
        <property name="backgroundOrigin" css-property="background-origin" css-property-enum-values="border-box padding-box content-box inherit initial" css-property-initial="padding-box" css-property-value-syntax="comma_separated_enums" nullable="1" type="DOMString"/>
        <property name="backgroundPosition" css-property="background-position" css-property-animatable="1" css-property-enum-values="left center right top bottom inherit initial" css-property-shorthand="1" css-property-subproperties="background-position-x background-position-y" css-property-value-syntax="comma_separated_0_to_2_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="backgroundPositionX" css-property="background-position-x" css-property-animatable="1" css-property-enum-values="left center right inherit initial" css-property-initial="0%" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="backgroundPositionY" css-property="background-position-y" css-property-animatable="1" css-property-enum-values="top center bottom inherit initial" css-property-initial="0%" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="backgroundRepeat" css-property="background-repeat" css-property-enum-values="repeat-x repeat-y repeat space round no-repeat initial" css-property-initial="repeat" css-property-value-syntax="comma_separated_enums" nullable="1" type="DOMString"/>
        <property name="backgroundSize" css-property="background-size" css-property-animatable="1" css-property-enum-values="auto cover contain inherit initial" css-property-initial="auto" css-property-value-syntax="comma_separated_1_or_2_space_separated_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="baselineShift" css-property="baseline-shift" css-property-enum-values="baseline sub super inherit initial" css-property-initial="baseline" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="border" css-property="border" css-property-animatable="1" css-property-enum-values="none hidden dotted dashed solid double groove ridge inset outset thin medium thick inherit initial" css-property-shorthand="1" css-property-subproperties="border-top border-right border-bottom border-left" css-property-value-syntax="1_to_3_space_separated_of_css_length_css_color_and_enum" nullable="1" type="DOMString"/>
        <property name="borderBottom" css-property="border-bottom" css-property-animatable="1" css-property-enum-values="none hidden dotted dashed solid double groove ridge inset outset thin medium thick inherit initial" css-property-shorthand="1" css-property-subproperties="border-bottom-width border-bottom-style border-bottom-color" css-property-value-syntax="1_to_3_space_separated_of_css_length_css_color_and_enum" nullable="1" type="DOMString"/>
        <property name="borderBottomColor" css-property="border-bottom-color" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="currentColor" css-property-value-syntax="css_color" nullable="1" type="DOMString"/>
        <property name="borderBottomLeftRadius" css-property="border-bottom-left-radius" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="1_or_2_space_separated_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="borderBottomRightRadius" css-property="border-bottom-right-radius" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="1_or_2_space_separated_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="borderBottomStyle" css-property="border-bottom-style" css-property-enum-values="none hidden dotted dashed solid double groove ridge inset outset inherit initial" css-property-initial="none" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="borderBottomWidth" css-property="border-bottom-width" css-property-animatable="1" css-property-enum-values="thin medium thick inherit initial" css-property-initial="medium" css-property-value-syntax="css_length" nullable="1" type="DOMString"/>
        <property name="borderCollapse" css-property="border-collapse" css-property-enum-values="separate collapse inherit initial" css-property-initial="separate" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="borderColor" css-property="border-color" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-shorthand="1" css-property-subproperties="border-top-color border-right-color border-bottom-color border-left-color" css-property-value-syntax="1_to_4_space_separated_css_color" nullable="1" type="DOMString"/>
        <property name="borderImage" css-property="border-image" css-property-enum-values="none fill auto stretch repeat round space inherit initial" css-property-shorthand="1" css-property-subproperties="border-image-source border-image-slice border-image-width border-image-outset border-image-repeat" css-property-value-syntax="css_border_image" nullable="1" type="DOMString"/>
        <property name="borderImageOutset" css-property="border-image-outset" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="1_to_4_space_separated_css_length_or_non_negative_integer" nullable="1" type="DOMString"/>
        <property name="borderImageRepeat" css-property="border-image-repeat" css-property-enum-values="stretch repeat round space inherit initial" css-property-initial="stretch" css-property-value-syntax="1_or_2_space_separated_enums" nullable="1" type="DOMString"/>
        <property name="borderImageSlice" css-property="border-image-slice" css-property-enum-values="fill inherit initial" css-property-initial="0" css-property-value-syntax="1_to_4_space_separated_css_percentage_or_non_negative_integer" nullable="1" type="DOMString"/>
        <property name="borderImageSource" css-property="border-image-source" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="css_url" nullable="1" type="DOMString"/>
        <property name="borderImageWidth" css-property="border-image-width" css-property-enum-values="auto inherit initial" css-property-initial="1px" css-property-value-syntax="1_to_4_space_separated_css_percentage_or_length_or_non_negative_integer" nullable="1" type="DOMString"/>
        <property name="borderLeft" css-property="border-left" css-property-animatable="1" css-property-enum-values="none hidden dotted dashed solid double groove ridge inset outset thin medium thick inherit initial" css-property-shorthand="1" css-property-subproperties="border-left-width border-left-style border-left-color" css-property-value-syntax="1_to_3_space_separated_of_css_length_css_color_and_enum" nullable="1" type="DOMString"/>
        <property name="borderLeftColor" css-property="border-left-color" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="currentColor" css-property-value-syntax="css_color" nullable="1" type="DOMString"/>
        <property name="borderLeftStyle" css-property="border-left-style" css-property-enum-values="none hidden dotted dashed solid double groove ridge inset outset inherit initial" css-property-initial="none" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="borderLeftWidth" css-property="border-left-width" css-property-animatable="1" css-property-enum-values="thin medium thick inherit initial" css-property-initial="medium" css-property-value-syntax="css_length" nullable="1" type="DOMString"/>
        <property name="borderRadius" css-property="border-radius" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-shorthand="1" css-property-subproperties="border-top-left-radius border-top-right-radius border-bottom-right-radius border-bottom-left-radius" css-property-value-syntax="0_or_1_slash_separated_1_to_4_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="borderRight" css-property="border-right" css-property-animatable="1" css-property-enum-values="none hidden dotted dashed solid double groove ridge inset outset thin medium thick inherit initial" css-property-shorthand="1" css-property-subproperties="border-right-width border-right-style border-right-color" css-property-value-syntax="1_to_3_space_separated_of_css_length_css_color_and_enum" nullable="1" type="DOMString"/>
        <property name="borderRightColor" css-property="border-right-color" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="currentColor" css-property-value-syntax="css_color" nullable="1" type="DOMString"/>
        <property name="borderRightStyle" css-property="border-right-style" css-property-enum-values="none hidden dotted dashed solid double groove ridge inset outset inherit initial" css-property-initial="none" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="borderRightWidth" css-property="border-right-width" css-property-animatable="1" css-property-enum-values="thin medium thick inherit initial" css-property-initial="medium" css-property-value-syntax="css_length" nullable="1" type="DOMString"/>
        <property name="borderSpacing" css-property="border-spacing" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="1_or_2_space_separated_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="borderStyle" css-property="border-style" css-property-enum-values="none hidden dotted dashed solid double groove ridge inset outset inherit initial" css-property-shorthand="1" css-property-subproperties="border-top-style border-right-style border-bottom-style border-left-style" css-property-value-syntax="1_to_4_space_separated_enums" nullable="1" type="DOMString"/>
        <property name="borderTop" css-property="border-top" css-property-animatable="1" css-property-enum-values="none hidden dotted dashed solid double groove ridge inset outset thin medium thick inherit initial" css-property-shorthand="1" css-property-subproperties="border-top-width border-top-style border-top-color" css-property-value-syntax="1_to_3_space_separated_of_css_length_css_color_and_enum" nullable="1" type="DOMString"/>
        <property name="borderTopColor" css-property="border-top-color" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="currentColor" css-property-value-syntax="css_color" nullable="1" type="DOMString"/>
        <property name="borderTopLeftRadius" css-property="border-top-left-radius" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="1_or_2_space_separated_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="borderTopRightRadius" css-property="border-top-right-radius" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="1_or_2_space_separated_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="borderTopStyle" css-property="border-top-style" css-property-enum-values="none hidden dotted dashed solid double groove ridge inset outset inherit initial" css-property-initial="none" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="borderTopWidth" css-property="border-top-width" css-property-animatable="1" css-property-enum-values="thin medium thick inherit initial" css-property-initial="medium" css-property-value-syntax="css_length" nullable="1" type="DOMString"/>
        <property name="borderWidth" css-property="border-width" css-property-animatable="1" css-property-enum-values="thin medium thick inherit initial" css-property-shorthand="1" css-property-subproperties="border-top-width border-right-width border-bottom-width border-left-width" css-property-value-syntax="1_to_4_space_separated_css_lengths" nullable="1" type="DOMString"/>
        <property name="bottom" css-property="bottom" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-initial="auto" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="boxShadow" css-property="box-shadow" css-property-animatable="1" css-property-enum-values="none inset inherit initial" css-property-initial="none" css-property-value-syntax="comma_separated_2_or_4_css_lengths_with_optional_css_color" nullable="1" type="DOMString"/>
        <property name="boxSizing" css-property="box-sizing" css-property-enum-values="content-box border-box inherit initial" css-property-initial="content-box" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="breakAfter" css-property="break-after" css-property-enum-values="auto always avoid left right page column avoid-page avoid-column inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="breakBefore" css-property="break-before" css-property-enum-values="auto always avoid left right page column avoid-page avoid-column inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="breakInside" css-property="break-inside" css-property-enum-values="auto avoid avoid-page avoid-column inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="captionSide" css-property="caption-side" css-property-enum-values="top bottom left right inherit initial" css-property-initial="top" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="clear" css-property="clear" css-property-enum-values="none left right both inherit initial" css-property-initial="none" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="clip" css-property="clip" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-initial="auto" css-property-value-syntax="css_shape_rect" nullable="1" type="DOMString"/>
        <property name="clipPath" css-property="clip-path" css-property-enum-values="none inherit initial" css-property-initial="auto" css-property-value-syntax="css_url_of_local_id_ref" nullable="1" type="DOMString"/>
        <property name="clipRule" css-property="clip-rule" css-property-enum-values="nonzero evenodd inherit initial" css-property-initial="nonzero" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="color" css-property="color" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="black" css-property-value-syntax="css_color" nullable="1" type="DOMString"/>
        <property name="colorInterpolationFilters" css-property="color-interpolation-filters" css-property-enum-values="linearRGB auto sRGB inherit initial" css-property-initial="linearRGB" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="columnCount" css-property="column-count" css-property-enum-values="auto inherit initial" css-property-initial="auto" css-property-value-syntax="css_length" type="any"/>
        <property name="columnFill" css-property="column-fill" css-property-enum-values="auto balance inherit initial" css-property-initial="balance" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="columnGap" css-property="column-gap" css-property-enum-values="normal inherit initial" css-property-initial="normal" css-property-value-syntax="css_length" type="any"/>
        <property name="columnRule" css-property="column-rule" css-property-enum-values="transparent thin medium thick inherit initial" css-property-shorthand="1" css-property-subproperties="column-rule-width column-rule-style column-rule-color" css-property-value-syntax="1_to_3_space_separated_of_css_length_css_color_and_enum" nullable="1" type="DOMString"/>
        <property name="columnRuleColor" css-property="column-rule-color" css-property-enum-values="inherit initial" css-property-initial="currentColor" css-property-value-syntax="css_color" type="any"/>
        <property name="columnRuleStyle" css-property="column-rule-style" css-property-enum-values="none hidden dotted dashed solid double groove ridge inset outset inherit initial" css-property-initial="none" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="columnRuleWidth" css-property="column-rule-width" css-property-enum-values="thin medium thick inherit initial" css-property-initial="medium" css-property-value-syntax="css_length" type="any"/>
        <property name="columns" css-property="columns" css-property-enum-values="auto inherit initial" css-property-shorthand="1" css-property-subproperties="column-width column-count" css-property-value-syntax="1_or_2_space_separated_css_length" nullable="1" type="DOMString"/>
        <property name="columnSpan" css-property="column-span" css-property-enum-values="none all inherit initial" css-property-initial="none" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="columnWidth" css-property="column-width" css-property-enum-values="auto inherit initial" css-property-initial="auto" css-property-value-syntax="css_length" type="any"/>
        <property name="content" css-property="content" css-property-enum-values="normal none inherit initial" css-property-initial="normal" css-property-value-syntax="css_content" nullable="1" type="DOMString"/>
        <property name="counterIncrement" css-property="counter-increment" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="space_separated_token_and_optional_signed_integer" nullable="1" type="DOMString"/>
        <property name="counterReset" css-property="counter-reset" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="space_separated_token_and_optional_signed_integer" nullable="1" type="DOMString"/>
        <property name="cssFloat" css-property="float" css-property-enum-values="left right none inherit initial" css-property-initial="none" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="cssText" type="DOMString"/>
        <property name="cursor" css-property="cursor" css-property-enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit initial" css-property-initial="auto" css-property-value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum" nullable="1" type="DOMString"/>
        <property name="direction" css-property="direction" css-property-enum-values="ltr rtl inherit initial" css-property-initial="ltr" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="display" css-property="display" css-property-enum-values="inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial" css-property-initial="inline" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="dominantBaseline" css-property="dominant-baseline" css-property-enum-values="auto use-script no-change reset-size ideographic alphabetic hanging mathematical central middle text-after-edge text-before-edge inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="emptyCells" css-property="empty-cells" css-property-enum-values="show hide inherit initial" css-property-initial="show" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="enableBackground" css-property="enable-background" css-property-enum-values="accumulate inherit initial" css-property-initial="accumulate" css-property-value-syntax="svg_enum_new_followed_by_svg_viewbox" nullable="1" type="DOMString"/>
        <property name="fill" css-property="fill" css-property-animatable="1" css-property-enum-values="none currentColor inherit initial" css-property-initial="black" css-property-value-syntax="svg_paint_or_css_color" nullable="1" type="DOMString"/>
        <property name="fillOpacity" css-property="fill-opacity" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="1" css-property-value-syntax="0_to_1_floating_point_number" nullable="1" type="DOMString"/>
        <property name="fillRule" css-property="fill-rule" css-property-enum-values="nonzero evenodd inherit initial" css-property-initial="nonzero" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="filter" css-property="filter" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="none" css-property-value-syntax="space_separated_filter_functions" nullable="1" type="DOMString"/>
        <property name="flex" css-property="flex" css-property-animatable="1" css-property-enum-values="auto content none inherit initial" css-property-shorthand="1" css-property-subproperties="flex-grow flex-shrink flex-basis" css-property-value-syntax="css_flex" nullable="1" type="DOMString"/>
        <property name="flexBasis" css-property="flex-basis" css-property-animatable="1" css-property-enum-values="auto content inherit initial" css-property-initial="auto" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="flexDirection" css-property="flex-direction" css-property-enum-values="row row-reverse column column-reverse inherit initial" css-property-initial="row" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="flexFlow" css-property="flex-flow" css-property-enum-values="row row-reverse column column-reverse nowrap wrap wrap-reverse inherit initial" css-property-shorthand="1" css-property-subproperties="flex-direction flex-wrap" css-property-value-syntax="1_or_2_space_separated_enums" nullable="1" type="DOMString"/>
        <property name="flexGrow" css-property="flex-grow" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="1_or_greater_integer" nullable="1" type="DOMString"/>
        <property name="flexShrink" css-property="flex-shrink" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="1" css-property-value-syntax="1_or_greater_integer" nullable="1" type="DOMString"/>
        <property name="flexWrap" css-property="flex-wrap" css-property-enum-values="nowrap wrap wrap-reverse inherit initial" css-property-initial="nowrap" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="floodColor" css-property="flood-color" css-property-animatable="1" css-property-enum-values="currentColor inherit initial" css-property-initial="black" css-property-value-syntax="css_color" nullable="1" type="DOMString"/>
        <property name="floodOpacity" css-property="flood-opacity" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="1" css-property-value-syntax="0_to_1_floating_point_number" nullable="1" type="DOMString"/>
        <property name="font" css-property="font" css-property-animatable="1" css-property-enum-values="caption icon menu message-box small-caption status-bar inherit initial" css-property-shorthand="1" css-property-subproperties="font-style font-variant font-weight font-stretch font-size line-height font-family" css-property-value-syntax="css_font" nullable="1" type="DOMString"/>
        <property name="fontFamily" css-property="font-family" css-property-enum-values="inherit initial" css-property-initial="serif" css-property-value-syntax="comma_separated_css_font_family_followed_by_generic_family" nullable="1" type="DOMString"/>
        <property name="fontFeatureSettings" css-property="font-feature-settings" css-property-enum-values="normal inherit initial" css-property-initial="normal" css-property-value-syntax="comma_separated_font_feature_tag" nullable="1" type="DOMString"/>
        <property name="fontSize" css-property="font-size" css-property-animatable="1" css-property-enum-values="smaller larger xx-small x-small small medium large x-large xx-large inherit initial" css-property-initial="medium" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="fontSizeAdjust" css-property="font-size-adjust" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="floating_point_number" nullable="1" type="DOMString"/>
        <property name="fontStretch" css-property="font-stretch" css-property-enum-values="normal wider narrower ultra-condensed extra-condensed condensed semi-condensed semi-expanded expanded extra-expanded ultra-expanded inherit initial" css-property-initial="normal" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="fontStyle" css-property="font-style" css-property-enum-values="normal italic oblique inherit initial" css-property-initial="normal" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="fontVariant" css-property="font-variant" css-property-enum-values="normal small-caps inherit initial" css-property-initial="normal" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="fontWeight" css-property="font-weight" css-property-animatable="1" css-property-enum-values="normal bold bolder lighter 100 200 300 400 500 600 700 800 900 inherit initial" css-property-initial="normal" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="glyphOrientationHorizontal" css-property="glyph-orientation-horizontal" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="css_angle" nullable="1" type="DOMString"/>
        <property name="glyphOrientationVertical" css-property="glyph-orientation-vertical" css-property-enum-values="auto inherit initial" css-property-initial="auto" css-property-value-syntax="css_angle" nullable="1" type="DOMString"/>
        <property name="height" css-property="height" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-initial="auto" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="imeMode" css-property="ime-mode" css-property-enum-values="auto active inactive disabled initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="justifyContent" css-property="justify-content" css-property-enum-values="flex-start flex-end center space-between space-around inherit initial" css-property-initial="flex-start" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="kerning" css-property="kerning" css-property-enum-values="auto inherit initial" css-property-initial="auto" css-property-value-syntax="css_length" nullable="1" type="DOMString"/>
        <property name="layoutGrid" css-property="layout-grid" css-property-enum-values="none auto line char both loose strict fixed inherit initial" css-property-shorthand="1" css-property-subproperties="layout-grid-mode layout-grid-type layout-grid-line layout-grid-char" css-property-value-syntax="css_layout_grid" nullable="1" type="DOMString"/>
        <property name="layoutGridChar" css-property="layout-grid-char" css-property-enum-values="none auto inherit initial" css-property-initial="none" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="layoutGridLine" css-property="layout-grid-line" css-property-enum-values="none auto inherit initial" css-property-initial="none" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="layoutGridMode" css-property="layout-grid-mode" css-property-enum-values="none line char both inherit initial" css-property-initial="both" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="layoutGridType" css-property="layout-grid-type" css-property-enum-values="loose strict fixed inherit initial" css-property-initial="loose" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="left" css-property="left" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-initial="auto" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="letterSpacing" css-property="letter-spacing" css-property-animatable="1" css-property-enum-values="normal inherit initial" css-property-initial="normal" css-property-value-syntax="css_length" nullable="1" type="DOMString"/>
        <property name="lightingColor" css-property="lighting-color" css-property-animatable="1" css-property-enum-values="currentColor inherit initial" css-property-initial="white" css-property-value-syntax="css_color" nullable="1" type="DOMString"/>
        <property name="lineBreak" css-property="line-break" css-property-enum-values="normal strict inherit initial" css-property-initial="normal" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="lineHeight" css-property="line-height" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="normal" css-property-value-syntax="css_percentage_or_length_or_floating_point_number" nullable="1" type="DOMString"/>
        <property name="listStyle" css-property="list-style" css-property-enum-values="none inside outside disc circle square decimal decimal-leading-zero lower-roman upper-roman lower-greek lower-latin upper-latin armenian georgian lower-alpha upper-alpha none inherit initial" css-property-shorthand="1" css-property-subproperties="list-style-type list-style-position list-style-image" css-property-value-syntax="css_list_style" nullable="1" type="DOMString"/>
        <property name="listStyleImage" css-property="list-style-image" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="css_url" nullable="1" type="DOMString"/>
        <property name="listStylePosition" css-property="list-style-position" css-property-enum-values="inside outside inherit initial" css-property-initial="outside" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="listStyleType" css-property="list-style-type" css-property-enum-values="disc circle square decimal decimal-leading-zero lower-roman upper-roman lower-greek lower-latin upper-latin armenian georgian lower-alpha upper-alpha none inherit initial" css-property-initial="disc" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="margin" css-property="margin" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-shorthand="1" css-property-subproperties="margin-top margin-right margin-bottom margin-left" css-property-value-syntax="1_to_4_space_separated_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="marginBottom" css-property="margin-bottom" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-initial="0" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="marginLeft" css-property="margin-left" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-initial="0" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="marginRight" css-property="margin-right" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-initial="0" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="marginTop" css-property="margin-top" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-initial="0" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="marker" css-property="marker" css-property-enum-values="none inherit initial" css-property-shorthand="1" css-property-subproperties="marker-start marker-mid marker-end" css-property-value-syntax="css_url_of_local_id_ref" nullable="1" type="DOMString"/>
        <property name="markerEnd" css-property="marker-end" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="css_url_of_local_id_ref" nullable="1" type="DOMString"/>
        <property name="markerMid" css-property="marker-mid" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="css_url_of_local_id_ref" nullable="1" type="DOMString"/>
        <property name="markerStart" css-property="marker-start" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="css_url_of_local_id_ref" nullable="1" type="DOMString"/>
        <property name="mask" css-property="mask" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="css_url_of_local_id_ref" nullable="1" type="DOMString"/>
        <property name="maxHeight" css-property="max-height" css-property-animatable="1" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="maxWidth" css-property="max-width" css-property-animatable="1" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="minHeight" css-property="min-height" css-property-animatable="1" css-property-enum-values="none inherit initial" css-property-initial="0" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="minWidth" css-property="min-width" css-property-animatable="1" css-property-enum-values="none inherit initial" css-property-initial="0" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="msContentZoomChaining" css-property="-ms-content-zoom-chaining" css-property-enum-values="none chained inherit initial" css-property-initial="none" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="msContentZooming" css-property="-ms-content-zooming" css-property-enum-values="none zoom inherit initial" css-property-initial="none" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="msContentZoomLimit" css-property="-ms-content-zoom-limit" css-property-enum-values="inherit initial" css-property-shorthand="1" css-property-subproperties="-ms-content-zoom-limit-min -ms-content-zoom-limit-max" css-property-value-syntax="1_or_2_space_separated_css_percentage" nullable="1" type="DOMString"/>
        <property name="msContentZoomLimitMax" css-property="-ms-content-zoom-limit-max" css-property-enum-values="inherit initial" css-property-initial="400%" css-property-value-syntax="css_percentage" type="any"/>
        <property name="msContentZoomLimitMin" css-property="-ms-content-zoom-limit-min" css-property-enum-values="inherit initial" css-property-initial="100%" css-property-value-syntax="css_percentage" type="any"/>
        <property name="msContentZoomSnap" css-property="-ms-content-zoom-snap" css-property-enum-values="inherit initial" css-property-shorthand="1" css-property-subproperties="-ms-content-zoom-snap-type -ms-content-zoom-snap-points" css-property-value-syntax="css_snap_type_and_points" nullable="1" type="DOMString"/>
        <property name="msContentZoomSnapPoints" css-property="-ms-content-zoom-snap-points" css-property-enum-values="inherit initial" css-property-initial="snapInterval(0%, 100%)" css-property-value-syntax="snap_interval_or_snap_list" nullable="1" type="DOMString"/>
        <property name="msContentZoomSnapType" css-property="-ms-content-zoom-snap-type" css-property-enum-values="none proximity mandatory inherit initial" css-property-initial="none" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="msFlowFrom" css-property="-ms-flow-from" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="comma_separated_tokens" nullable="1" type="DOMString"/>
        <property name="msFlowInto" css-property="-ms-flow-into" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="comma_separated_tokens" nullable="1" type="DOMString"/>
        <property name="msFontFeatureSettings" css-property="-ms-font-feature-settings" css-property-enum-values="normal inherit initial" css-property-initial="normal" css-property-value-syntax="comma_separated_font_feature_tag" nullable="1" type="DOMString"/>
        <property name="msGridColumn" css-property="-ms-grid-column" css-property-enum-values="inherit initial" css-property-initial="1" css-property-value-syntax="1_or_greater_integer" type="any"/>
        <property name="msGridColumnAlign" css-property="-ms-grid-column-align" css-property-enum-values="stretch start end center inherit initial" css-property-initial="stretch" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="msGridColumns" css-property="-ms-grid-columns" css-property-enum-values="none auto min-content max-content inherit initial" css-property-initial="auto" css-property-value-syntax="css_grid_dimension_list" nullable="1" type="DOMString"/>
        <property name="msGridColumnSpan" css-property="-ms-grid-column-span" css-property-enum-values="inherit initial" css-property-initial="1" css-property-value-syntax="non_negative_integer" type="any"/>
        <property name="msGridRow" css-property="-ms-grid-row" css-property-enum-values="inherit initial" css-property-initial="1" css-property-value-syntax="1_or_greater_integer" type="any"/>
        <property name="msGridRowAlign" css-property="-ms-grid-row-align" css-property-enum-values="stretch start end center inherit initial" css-property-initial="stretch" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="msGridRows" css-property="-ms-grid-rows" css-property-enum-values="none auto min-content max-content inherit initial" css-property-initial="auto" css-property-value-syntax="css_grid_dimension_list" nullable="1" type="DOMString"/>
        <property name="msGridRowSpan" css-property="-ms-grid-row-span" css-property-enum-values="inherit initial" css-property-initial="1" css-property-value-syntax="non_negative_integer" type="any"/>
        <property name="msHighContrastAdjust" css-property="-ms-high-contrast-adjust" css-property-enum-values="auto none inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="msHyphenateLimitChars" css-property="-ms-hyphenate-limit-chars" css-property-enum-values="auto inherit initial" css-property-initial="auto" css-property-value-syntax="1_to_3_space_separated_non_negative_integer" nullable="1" type="DOMString"/>
        <property name="msHyphenateLimitLines" css-property="-ms-hyphenate-limit-lines" css-property-enum-values="no-limit inherit initial" css-property-initial="no-limit" css-property-value-syntax="non_negative_integer" type="any"/>
        <property name="msHyphenateLimitZone" css-property="-ms-hyphenate-limit-zone" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="css_percentage_or_length" type="any"/>
        <property name="msHyphens" css-property="-ms-hyphens" css-property-enum-values="none manual auto inherit initial" css-property-initial="manual" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="msImeAlign" css-property="-ms-ime-align" css-property-enum-values="auto after inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="msOverflowStyle" css-property="-ms-overflow-style" css-property-enum-values="auto none scrollbar -ms-autohiding-scrollbar inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="msScrollChaining" css-property="-ms-scroll-chaining" css-property-enum-values="chained none inherit initial" css-property-initial="chained" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="msScrollLimit" css-property="-ms-scroll-limit" css-property-enum-values="auto inherit initial" css-property-shorthand="1" css-property-subproperties="-ms-scroll-limit-x-min -ms-scroll-limit-y-min -ms-scroll-limit-x-max -ms-scroll-limit-y-max" css-property-value-syntax="1_to_4_space_separated_css_lengths" nullable="1" type="DOMString"/>
        <property name="msScrollLimitXMax" css-property="-ms-scroll-limit-x-max" css-property-enum-values="auto inherit initial" css-property-initial="0" css-property-value-syntax="css_length" type="any"/>
        <property name="msScrollLimitXMin" css-property="-ms-scroll-limit-x-min" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="css_length" type="any"/>
        <property name="msScrollLimitYMax" css-property="-ms-scroll-limit-y-max" css-property-enum-values="auto inherit initial" css-property-initial="0" css-property-value-syntax="css_length" type="any"/>
        <property name="msScrollLimitYMin" css-property="-ms-scroll-limit-y-min" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="css_length" type="any"/>
        <property name="msScrollRails" css-property="-ms-scroll-rails" css-property-enum-values="railed none inherit initial" css-property-initial="railed" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="msScrollSnapPointsX" css-property="-ms-scroll-snap-points-x" css-property-enum-values="inherit initial" css-property-initial="snapInterval(0, 100%)" css-property-value-syntax="snap_interval_or_snap_list" nullable="1" type="DOMString"/>
        <property name="msScrollSnapPointsY" css-property="-ms-scroll-snap-points-y" css-property-enum-values="inherit initial" css-property-initial="snapInterval(0, 100%)" css-property-value-syntax="snap_interval_or_snap_list" nullable="1" type="DOMString"/>
        <property name="msScrollSnapType" css-property="-ms-scroll-snap-type" css-property-enum-values="none proximity mandatory inherit initial" css-property-initial="none" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="msScrollSnapX" css-property="-ms-scroll-snap-x" css-property-enum-values="none proximity mandatory inherit initial" css-property-shorthand="1" css-property-subproperties="-ms-scroll-snap-type -ms-scroll-snap-points-x" css-property-value-syntax="css_snap_type_and_points" nullable="1" type="DOMString"/>
        <property name="msScrollSnapY" css-property="-ms-scroll-snap-y" css-property-enum-values="none proximity mandatory inherit initial" css-property-shorthand="1" css-property-subproperties="-ms-scroll-snap-type -ms-scroll-snap-points-y" css-property-value-syntax="css_snap_type_and_points" nullable="1" type="DOMString"/>
        <property name="msScrollTranslation" css-property="-ms-scroll-translation" css-property-enum-values="inherit none vertical-to-horizontal" css-property-initial="inherit" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="msTextCombineHorizontal" css-property="-ms-text-combine-horizontal" css-property-enum-values="none all digits inherit initial" css-property-initial="none" css-property-value-syntax="css_text_combine_enum_and_digit" nullable="1" type="DOMString"/>
        <property name="msTextSizeAdjust" css-property="-ms-text-size-adjust" css-property-enum-values="auto none inherit initial" css-property-initial="auto" css-property-value-syntax="css_percentage" type="any"/>
        <property name="msTouchAction" css-property="-ms-touch-action" css-property-enum-values="auto none pan-x pan-y manipulation pinch-zoom double-tap-zoom inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="msTouchSelect" css-property="-ms-touch-select" css-property-enum-values="grippers none inherit initial" css-property-initial="grippers" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="msUserSelect" css-property="-ms-user-select" css-property-enum-values="text none element all inherit initial" css-property-initial="text" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="msWrapFlow" css-property="-ms-wrap-flow" css-property-enum-values="auto both start end maximum clear inherit initial" css-property-initial="auto" css-property-value-syntax="enum" type="DOMString"/>
        <property name="msWrapMargin" css-property="-ms-wrap-margin" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="css_length" type="any"/>
        <property name="msWrapThrough" css-property="-ms-wrap-through" css-property-enum-values="wrap none inherit initial" css-property-initial="wrap" css-property-value-syntax="enum" type="DOMString"/>
        <property name="opacity" css-property="opacity" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="1" css-property-value-syntax="0_to_1_floating_point_number" nullable="1" type="DOMString"/>
        <property name="order" css-property="order" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="signed_integer" nullable="1" type="DOMString"/>
        <property name="orphans" css-property="orphans" css-property-enum-values="inherit initial" css-property-initial="2" css-property-value-syntax="1_or_greater_integer" nullable="1" type="DOMString"/>
        <property name="outline" css-property="outline" css-property-animatable="1" css-property-enum-values="invert thin medium thick none dotted dashed solid double groove ridge inset outset inherit initial" css-property-shorthand="1" css-property-subproperties="outline-width outline-style outline-color" css-property-value-syntax="1_to_3_space_separated_of_css_length_css_color_and_enum" nullable="1" type="DOMString"/>
        <property name="outlineColor" css-property="outline-color" css-property-animatable="1" css-property-enum-values="invert inherit initial" css-property-initial="invert" css-property-value-syntax="css_color" nullable="1" type="DOMString"/>
        <property name="outlineOffset" css-property="outline-offset" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="css_length" nullable="1" type="DOMString"/>
        <property name="outlineStyle" css-property="outline-style" css-property-enum-values="auto none dotted dashed solid double groove ridge inset outset inherit initial" css-property-initial="none" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="outlineWidth" css-property="outline-width" css-property-animatable="1" css-property-enum-values="thin medium thick inherit initial" css-property-initial="medium" css-property-value-syntax="css_length" nullable="1" type="DOMString"/>
        <property name="overflow" css-property="overflow" css-property-enum-values="visible hidden scroll auto inherit initial" css-property-initial="visible" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="overflowX" css-property="overflow-x" css-property-enum-values="visible scroll hidden auto inherit initial" css-property-initial="visible" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="overflowY" css-property="overflow-y" css-property-enum-values="visible scroll hidden auto inherit initial" css-property-initial="visible" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="padding" css-property="padding" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-shorthand="1" css-property-subproperties="padding-top padding-right padding-bottom padding-left" css-property-value-syntax="1_to_4_space_separated_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="paddingBottom" css-property="padding-bottom" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-initial="0" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="paddingLeft" css-property="padding-left" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-initial="0" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="paddingRight" css-property="padding-right" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-initial="0" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="paddingTop" css-property="padding-top" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-initial="0" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="pageBreakAfter" css-property="page-break-after" css-property-enum-values="auto always avoid left right inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="pageBreakBefore" css-property="page-break-before" css-property-enum-values="auto always avoid left right inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="pageBreakInside" css-property="page-break-inside" css-property-enum-values="auto avoid inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="parentRule" read-only="1" type="CSSRule"/>
        <property name="perspective" css-property="perspective" css-property-animatable="1" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="css_length" nullable="1" type="DOMString"/>
        <property name="perspectiveOrigin" css-property="perspective-origin" css-property-animatable="1" css-property-enum-values="left right center top bottom inherit initial" css-property-initial="50% 50%" css-property-value-syntax="1_or_2_space_separated_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="pointerEvents" css-property="pointer-events" css-property-enum-values="auto none visiblePainted visibleFill visibleStroke visible painted fill stroke all inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="position" css-property="position" css-property-enum-values="static relative absolute fixed inherit initial" css-property-initial="static" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="quotes" css-property="quotes" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="space_separated_strings" nullable="1" type="DOMString"/>
        <property name="right" css-property="right" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-initial="auto" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="rotate" css-property="rotate" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="0deg 0 0 1" css-property-value-syntax="1_css_angle_followed_by_optional_3_space_separated_floating_point_number" nullable="1" type="DOMString"/>
        <property name="rubyAlign" css-property="ruby-align" css-property-enum-values="auto left center right distribute-letter distribute-space line-edge inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="rubyOverhang" css-property="ruby-overhang" css-property-enum-values="auto whitespace none inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="rubyPosition" css-property="ruby-position" css-property-enum-values="above inline inherit initial" css-property-initial="above" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="scale" css-property="scale" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="0 0 0" css-property-value-syntax="1_to_3_space_separated_floating_point_number" nullable="1" type="DOMString"/>
        <property name="stopColor" css-property="stop-color" css-property-animatable="1" css-property-enum-values="currentColor inherit initial" css-property-initial="black" css-property-value-syntax="css_color" nullable="1" type="DOMString"/>
        <property name="stopOpacity" css-property="stop-opacity" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="1" css-property-value-syntax="0_to_1_floating_point_number" nullable="1" type="DOMString"/>
        <property name="stroke" css-property="stroke" css-property-animatable="1" css-property-enum-values="none currentColor inherit initial" css-property-initial="none" css-property-value-syntax="svg_paint_or_css_color" nullable="1" type="DOMString"/>
        <property name="strokeDasharray" css-property="stroke-dasharray" css-property-animatable="1" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="comma_or_space_separated_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="strokeDashoffset" css-property="stroke-dashoffset" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="strokeLinecap" css-property="stroke-linecap" css-property-enum-values="butt round square inherit initial" css-property-initial="butt" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="strokeLinejoin" css-property="stroke-linejoin" css-property-enum-values="miter round bevel inherit initial" css-property-initial="miter" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="strokeMiterlimit" css-property="stroke-miterlimit" css-property-enum-values="inherit initial" css-property-initial="4" css-property-value-syntax="1_or_greater_floating_point_number" nullable="1" type="DOMString"/>
        <property name="strokeOpacity" css-property="stroke-opacity" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="1" css-property-value-syntax="0_to_1_floating_point_number" nullable="1" type="DOMString"/>
        <property name="strokeWidth" css-property="stroke-width" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="1" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="tableLayout" css-property="table-layout" css-property-enum-values="auto fixed inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="textAlign" css-property="text-align" css-property-enum-values="left right center justify inherit initial" css-property-initial="left" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="textAlignLast" css-property="text-align-last" css-property-enum-values="auto center inherit justify left right inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="textAnchor" css-property="text-anchor" css-property-enum-values="start middle end inherit initial" css-property-initial="start" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="textDecoration" css-property="text-decoration" css-property-enum-values="none underline overline line-through blink inherit initial" css-property-initial="none" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="textIndent" css-property="text-indent" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="textJustify" css-property="text-justify" css-property-enum-values="auto distribute distribute-all-lines distribute-center-last inter-cluster inter-ideograph inter-word kashida newspaper inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="textKashida" css-property="text-kashida" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="css_percentage" nullable="1" type="DOMString"/>
        <property name="textKashidaSpace" css-property="text-kashida-space" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="css_percentage" nullable="1" type="DOMString"/>
        <property name="textOverflow" css-property="text-overflow" css-property-enum-values="clip ellipsis inherit initial" css-property-initial="clip" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="textShadow" css-property="text-shadow" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="none" css-property-value-syntax="css_text_shadow_list" nullable="1" type="DOMString"/>
        <property name="textTransform" css-property="text-transform" css-property-enum-values="none capitalize uppercase lowercase inherit initial" css-property-initial="none" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="textUnderlinePosition" css-property="text-underline-position" css-property-enum-values="auto above below auto-pos inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="top" css-property="top" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-initial="auto" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="touchAction" css-property="touch-action" css-property-enum-values="auto none pan-x pan-y manipulation pinch-zoom double-tap-zoom inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="transform" css-property="transform" css-property-aliases="-ms-transform" css-property-animatable="1" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="css_transform_list" nullable="1" type="DOMString"/>
        <property name="transformOrigin" css-property="transform-origin" css-property-aliases="-ms-transform-origin" css-property-animatable="1" css-property-enum-values="left center right top bottom inherit initial" css-property-initial="50% 50%" css-property-value-syntax="css_transform_origin" nullable="1" type="DOMString"/>
        <property name="transformStyle" css-property="transform-style" css-property-enum-values="flat preserve-3d inherit initial" css-property-initial="flat" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="transition" css-property="transition" css-property-aliases="-ms-transition" css-property-enum-values="inherit initial" css-property-shorthand="1" css-property-subproperties="transition-property transition-duration transition-timing-function transition-delay" css-property-value-syntax="css_transition" nullable="1" type="DOMString"/>
        <property name="transitionDelay" css-property="transition-delay" css-property-aliases="-ms-transition-delay" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="comma_separated_css_times" nullable="1" type="DOMString"/>
        <property name="transitionDuration" css-property="transition-duration" css-property-aliases="-ms-transition-duration" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="comma_separated_css_times" nullable="1" type="DOMString"/>
        <property name="transitionProperty" css-property="transition-property" css-property-aliases="-ms-transition-property" css-property-enum-values="none all inherit initial" css-property-initial="all" css-property-value-syntax="comma_separated_tokens" nullable="1" type="DOMString"/>
        <property name="transitionTimingFunction" css-property="transition-timing-function" css-property-aliases="-ms-transition-timing-function" css-property-enum-values="step-start step-end ease ease-in ease-out ease-in-out linear inherit initial" css-property-initial="ease" css-property-value-syntax="comma_separated_css_timing_functions" nullable="1" type="DOMString"/>
        <property name="translate" css-property="translate" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="0px 0px 0px" css-property-value-syntax="1_to_3_space_separated_css_length_and_first_two_optionally_percentage" nullable="1" type="DOMString"/>
        <property name="unicodeBidi" css-property="unicode-bidi" css-property-enum-values="normal embed bidi-override inherit" css-property-initial="normal" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="verticalAlign" css-property="vertical-align" css-property-animatable="1" css-property-enum-values="baseline auto sub super top middle bottom text-top text-bottom inherit initial" css-property-initial="baseline" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="visibility" css-property="visibility" css-property-animatable="1" css-property-enum-values="visible hidden collapse inherit initial" css-property-initial="visible" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitAlignContent" css-property="-webkit-align-content" css-property-enum-values="stretch flex-start flex-end center space-between space-around inherit initial" css-property-initial="stretch" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitAlignItems" css-property="-webkit-align-items" css-property-enum-values="stretch flex-start flex-end center baseline inherit initial" css-property-initial="stretch" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitAlignSelf" css-property="-webkit-align-self" css-property-enum-values="auto flex-start flex-end center baseline stretch inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitAnimation" css-property="-webkit-animation" css-property-enum-values="inherit initial" css-property-shorthand="1" css-property-subproperties="-webkit-animation-duration -webkit-animation-timing-function -webkit-animation-delay -webkit-animation-iteration-count -webkit-animation-direction -webkit-animation-fill-mode -webkit-animation-play-state -webkit-animation-name" css-property-value-syntax="css_animation" nullable="1" type="DOMString"/>
        <property name="webkitAnimationDelay" css-property="-webkit-animation-delay" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="comma_separated_css_times" nullable="1" type="DOMString"/>
        <property name="webkitAnimationDirection" css-property="-webkit-animation-direction" css-property-enum-values="normal reverse alternate alternate-reverse inherit initial" css-property-initial="normal" css-property-value-syntax="comma_separated_enums" nullable="1" type="DOMString"/>
        <property name="webkitAnimationDuration" css-property="-webkit-animation-duration" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="comma_separated_css_times" nullable="1" type="DOMString"/>
        <property name="webkitAnimationFillMode" css-property="-webkit-animation-fill-mode" css-property-enum-values="none forwards backwards both inherit initial" css-property-initial="none" css-property-value-syntax="comma_separated_enums" nullable="1" type="DOMString"/>
        <property name="webkitAnimationIterationCount" css-property="-webkit-animation-iteration-count" css-property-enum-values="infinite inherit initial" css-property-initial="1" css-property-value-syntax="comma_separated_non_negative_integer" nullable="1" type="DOMString"/>
        <property name="webkitAnimationName" css-property="-webkit-animation-name" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="comma_separated_keyframes_refs" nullable="1" type="DOMString"/>
        <property name="webkitAnimationPlayState" css-property="-webkit-animation-play-state" css-property-enum-values="running paused inherit initial" css-property-initial="running" css-property-value-syntax="comma_separated_enums" nullable="1" type="DOMString"/>
        <property name="webkitAnimationTimingFunction" css-property="-webkit-animation-timing-function" css-property-enum-values="step-start step-end ease ease-in ease-out ease-in-out linear inherit initial" css-property-initial="ease" css-property-value-syntax="comma_separated_css_timing_functions" nullable="1" type="DOMString"/>
        <property name="webkitAppearance" css-property="-webkit-appearance" css-property-enum-values="none button textfield inherit initial" css-property-initial="none" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitBackfaceVisibility" css-property="-webkit-backface-visibility" css-property-enum-values="visible hidden inherit initial" css-property-initial="visible" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitBackgroundClip" css-property="-webkit-background-clip" css-property-enum-values="border-box padding-box content-box inherit initial" css-property-initial="border-box" css-property-value-syntax="comma_separated_enums" nullable="1" type="DOMString"/>
        <property name="webkitBackgroundOrigin" css-property="-webkit-background-origin" css-property-enum-values="border-box padding-box content-box inherit initial" css-property-initial="padding-box" css-property-value-syntax="comma_separated_enums" nullable="1" type="DOMString"/>
        <property name="webkitBackgroundSize" css-property="-webkit-background-size" css-property-enum-values="auto cover contain inherit initial" css-property-initial="auto" css-property-value-syntax="comma_separated_1_or_2_space_separated_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="webkitBorderBottomLeftRadius" css-property="-webkit-border-bottom-left-radius" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="1_or_2_space_separated_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="webkitBorderBottomRightRadius" css-property="-webkit-border-bottom-right-radius" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="1_or_2_space_separated_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="webkitBorderImage" css-property="-webkit-border-image" css-property-enum-values="none fill auto stretch repeat round space inherit initial" css-property-shorthand="1" css-property-subproperties="border-image-source border-image-slice border-image-width border-image-outset border-image-repeat" css-property-value-syntax="css_border_image" nullable="1" type="DOMString"/>
        <property name="webkitBorderRadius" css-property="-webkit-border-radius" css-property-enum-values="inherit initial" css-property-shorthand="1" css-property-subproperties="-webkit-border-top-left-radius -webkit-border-top-right-radius -webkit-border-bottom-right-radius -webkit-border-bottom-left-radius" css-property-value-syntax="0_or_1_slash_separated_1_to_4_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="webkitBorderTopLeftRadius" css-property="-webkit-border-top-left-radius" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="1_or_2_space_separated_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="webkitBorderTopRightRadius" css-property="-webkit-border-top-right-radius" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="1_or_2_space_separated_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="webkitBoxAlign" css-property="-webkit-box-align" css-property-enum-values="start center end baseline stretch inherit initial" css-property-initial="stretch" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitBoxDirection" css-property="-webkit-box-direction" css-property-initial="normal" css-property-value-syntax="normal reverse inherit initial" nullable="1" type="DOMString"/>
        <property name="webkitBoxFlex" css-property="-webkit-box-flex" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="non_negative_integer" nullable="1" type="DOMString"/>
        <property name="webkitBoxOrdinalGroup" css-property="-webkit-box-ordinal-group" css-property-enum-values="inherit initial" css-property-initial="1" css-property-value-syntax="1_or_greater_integer" nullable="1" type="DOMString"/>
        <property name="webkitBoxOrient" css-property="-webkit-box-orient" css-property-initial="inline-axis" css-property-value-syntax="horizontal vertical inline-axis block-axis inherit initial" nullable="1" type="DOMString"/>
        <property name="webkitBoxPack" css-property="-webkit-box-pack" css-property-enum-values="start center end justify inherit initial" css-property-initial="start" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitBoxSizing" css-property="-webkit-box-sizing" css-property-enum-values="content-box border-box inherit initial" css-property-initial="content-box" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitColumnBreakAfter" css-property="-webkit-column-break-after" css-property-enum-values="auto always avoid inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitColumnBreakBefore" css-property="-webkit-column-break-before" css-property-enum-values="auto always avoid inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitColumnBreakInside" css-property="-webkit-column-break-inside" css-property-enum-values="auto always avoid inherit initial" css-property-initial="auto" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitColumnCount" css-property="-webkit-column-count" css-property-enum-values="auto inherit initial" css-property-initial="auto" css-property-value-syntax="css_length" type="any"/>
        <property name="webkitColumnGap" css-property="-webkit-column-gap" css-property-enum-values="normal inherit initial" css-property-initial="normal" css-property-value-syntax="css_length" type="any"/>
        <property name="webkitColumnRule" css-property="-webkit-column-rule" css-property-enum-values="transparent thin medium thick inherit initial" css-property-shorthand="1" css-property-subproperties="-webkit-column-rule-color -webkit-column-rule-style -webkit-column-rule-width" css-property-value-syntax="1_to_3_space_separated_of_css_length_css_color_and_enum" nullable="1" type="DOMString"/>
        <property name="webkitColumnRuleColor" css-property="-webkit-column-rule-color" css-property-enum-values="inherit initial" css-property-initial="currentColor" css-property-value-syntax="css_color" type="any"/>
        <property name="webkitColumnRuleStyle" css-property="-webkit-column-rule-style" css-property-enum-values="none hidden dotted dashed solid double groove ridge inset outset inherit initial" css-property-initial="none" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitColumnRuleWidth" css-property="-webkit-column-rule-width" css-property-enum-values="thin medium thick inherit initial" css-property-initial="medium" css-property-value-syntax="css_length" type="any"/>
        <property name="webkitColumns" css-property="-webkit-columns" css-property-enum-values="auto inherit initial" css-property-shorthand="1" css-property-subproperties="-webkit-column-width -webkit-column-count" css-property-value-syntax="1_or_2_space_separated_css_length" nullable="1" type="DOMString"/>
        <property name="webkitColumnSpan" css-property="-webkit-column-span" css-property-enum-values="none all inherit initial" css-property-initial="medium" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitColumnWidth" css-property="-webkit-column-width" css-property-enum-values="auto inherit initial" css-property-initial="auto" css-property-value-syntax="css_length" type="any"/>
        <property name="webkitFilter" css-property="-webkit-filter" css-property-enum-values="inherit initial" css-property-initial="none" css-property-value-syntax="space_separated_filter_functions" nullable="1" type="DOMString"/>
        <property name="webkitFlex" css-property="-webkit-flex" css-property-enum-values="auto content none inherit initial" css-property-shorthand="1" css-property-subproperties="-webkit-flex-grow -webkit-flex-shrink -webkit-flex-basis" css-property-value-syntax="css_flex" nullable="1" type="DOMString"/>
        <property name="webkitFlexBasis" css-property="-webkit-flex-basis" css-property-enum-values="auto content inherit initial" css-property-initial="auto" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="webkitFlexDirection" css-property="-webkit-flex-direction" css-property-enum-values="row row-reverse column column-reverse inherit initial" css-property-initial="row" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitFlexFlow" css-property="-webkit-flex-flow" css-property-enum-values="row row-reverse column column-reverse nowrap wrap wrap-reverse inherit initial" css-property-shorthand="1" css-property-subproperties="-webkit-flex-direction -webkit-flex-wrap" css-property-value-syntax="1_or_2_space_separated_enums" nullable="1" type="DOMString"/>
        <property name="webkitFlexGrow" css-property="-webkit-flex-grow" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="1_or_greater_integer" nullable="1" type="DOMString"/>
        <property name="webkitFlexShrink" css-property="-webkit-flex-shrink" css-property-enum-values="inherit initial" css-property-initial="1" css-property-value-syntax="1_or_greater_integer" nullable="1" type="DOMString"/>
        <property name="webkitFlexWrap" css-property="-webkit-flex-wrap" css-property-enum-values="nowrap wrap wrap-reverse inherit initial" css-property-initial="nowrap" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitJustifyContent" css-property="-webkit-justify-content" css-property-enum-values="flex-start flex-end center space-between space-around inherit initial" css-property-initial="flex-start" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitOrder" css-property="-webkit-order" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="signed_integer" nullable="1" type="DOMString"/>
        <property name="webkitPerspective" css-property="-webkit-perspective" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="css_length" nullable="1" type="DOMString"/>
        <property name="webkitPerspectiveOrigin" css-property="-webkit-perspective-origin" css-property-enum-values="left right center top bottom inherit initial" css-property-initial="50% 50%" css-property-value-syntax="1_or_2_space_separated_css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="webkitTapHighlightColor" css-property="-webkit-tap-highlight-color" css-property-enum-values="inherit initial" css-property-initial="rgba(0,0,0,0.180392)" css-property-value-syntax="css_color" nullable="1" type="DOMString"/>
        <property name="webkitTextFillColor" css-property="-webkit-text-fill-color" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="black" css-property-value-syntax="css_color" nullable="1" type="DOMString"/>
        <property name="webkitTextSizeAdjust" css-property="-webkit-text-size-adjust" css-property-enum-values="auto none inherit initial" css-property-initial="auto" css-property-value-syntax="css_percentage" type="any"/>
        <property name="webkitTextStroke" css-property="-webkit-text-stroke" css-property-enum-values="thin medium thick unset inherit initial" css-property-shorthand="1" css-property-subproperties="-webkit-text-stroke-width -webkit-text-stroke-color" css-property-value-syntax="1_or_2_space_separated_of_css_length_css_color_and_enum" nullable="1" type="DOMString"/>
        <property name="webkitTextStrokeColor" css-property="-webkit-text-stroke-color" css-property-animatable="1" css-property-enum-values="inherit initial" css-property-initial="black" css-property-value-syntax="css_color" nullable="1" type="DOMString"/>
        <property name="webkitTextStrokeWidth" css-property="-webkit-text-stroke-width" css-property-animatable="1" css-property-enum-values="inherit initial unset thin medium thick" css-property-initial="0" css-property-value-syntax="css_length" nullable="1" type="DOMString"/>
        <property name="webkitTransform" css-property="-webkit-transform" css-property-enum-values="none inherit initial" css-property-initial="none" css-property-value-syntax="css_transform_list" nullable="1" type="DOMString"/>
        <property name="webkitTransformOrigin" css-property="-webkit-transform-origin" css-property-enum-values="left center right top bottom inherit initial" css-property-initial="50% 50%" css-property-value-syntax="css_transform_origin" nullable="1" type="DOMString"/>
        <property name="webkitTransformStyle" css-property="-webkit-transform-style" css-property-enum-values="flat preserve-3d inherit initial" css-property-initial="flat" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitTransition" css-property="-webkit-transition" css-property-enum-values="inherit initial" css-property-shorthand="1" css-property-subproperties="-webkit-transition-property -webkit-transition-duration -webkit-transition-timing-function -webkit-transition-delay" css-property-value-syntax="css_transition" nullable="1" type="DOMString"/>
        <property name="webkitTransitionDelay" css-property="-webkit-transition-delay" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="comma_separated_css_times" nullable="1" type="DOMString"/>
        <property name="webkitTransitionDuration" css-property="-webkit-transition-duration" css-property-enum-values="inherit initial" css-property-initial="0" css-property-value-syntax="comma_separated_css_times" nullable="1" type="DOMString"/>
        <property name="webkitTransitionProperty" css-property="-webkit-transition-property" css-property-enum-values="none all inherit initial" css-property-initial="all" css-property-value-syntax="comma_separated_tokens" nullable="1" type="DOMString"/>
        <property name="webkitTransitionTimingFunction" css-property="-webkit-transition-timing-function" css-property-enum-values="step-start step-end ease ease-in ease-out ease-in-out linear inherit initial" css-property-initial="ease" css-property-value-syntax="comma_separated_css_timing_functions" nullable="1" type="DOMString"/>
        <property name="webkitUserModify" css-property="-webkit-user-modify" css-property-enum-values="read-only read-write read-write-plaintext-only inherit initial" css-property-initial="read-only" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitUserSelect" css-property="-webkit-user-select" css-property-enum-values="text none element all inherit initial" css-property-initial="text" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="webkitWritingMode" css-property="-webkit-writing-mode" css-property-enum-values="horizontal-tb vertical-lr vertical-rl inherit initial" css-property-initial="horizontal-tb" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="whiteSpace" css-property="white-space" css-property-enum-values="normal pre nowrap pre-wrap pre-line inherit initial" css-property-initial="normal" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="widows" css-property="widows" css-property-enum-values="inherit initial" css-property-initial="2" css-property-value-syntax="1_or_greater_integer" nullable="1" type="DOMString"/>
        <property name="width" css-property="width" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-initial="auto" css-property-value-syntax="css_percentage_or_length" nullable="1" type="DOMString"/>
        <property name="wordBreak" css-property="word-break" css-property-enum-values="normal break-all keep-all inherit initial" css-property-initial="normal" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="wordSpacing" css-property="word-spacing" css-property-animatable="1" css-property-enum-values="normal inherit initial" css-property-initial="normal" css-property-value-syntax="css_length" nullable="1" type="DOMString"/>
        <property name="wordWrap" css-property="word-wrap" css-property-enum-values="normal break-word inherit initial" css-property-initial="normal" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="writingMode" css-property="writing-mode" css-property-enum-values="lr-tb tb-rl rl-tb bt-rl tb-lr bt-lr lr-bt rl-bt lr rl tb horizontal-tb vertical-lr vertical-rl inherit initial" css-property-initial="horizontal-tb" css-property-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="zIndex" css-property="z-index" css-property-animatable="1" css-property-enum-values="auto inherit initial" css-property-initial="auto" css-property-value-syntax="signed_integer" nullable="1" type="DOMString"/>
        <property name="zoom" css-property="zoom" css-property-aliases="-ms-zoom" css-property-animatable="1" css-property-enum-values="normal inherit initial" css-property-initial="normal" css-property-value-syntax="css_percentage_or_non_negative_floating_point_number" nullable="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="CSSStyleRule" extends="CSSRule">
      <properties>
        <property name="readOnly" read-only="1" type="boolean"/>
        <property name="selectorText" type="DOMString"/>
        <property name="style" read-only="1" type="CSSStyleDeclaration"/>
      </properties>
    </interface>
    <interface name="CSSStyleSheet" extends="StyleSheet">
      <methods>
        <method name="addImport" type="long">
          <param name="bstrURL" type="DOMString"/>
          <param name="lIndex" default="-1" optional="1" type="long"/>
        </method>
        <method name="addPageRule" type="long">
          <param name="bstrSelector" type="DOMString"/>
          <param name="bstrStyle" type="DOMString"/>
          <param name="lIndex" default="-1" optional="1" type="long"/>
        </method>
        <method name="addRule" type="long">
          <param name="bstrSelector" type="DOMString"/>
          <param name="bstrStyle" optional="1" type="DOMString"/>
          <param name="lIndex" default="-1" optional="1" type="long"/>
        </method>
        <method name="deleteRule" type="void">
          <param name="index" default="-1" optional="1" type="unsigned long"/>
        </method>
        <method name="insertRule" type="unsigned long">
          <param name="rule" type="DOMString"/>
          <param name="index" default="0" optional="1" type="unsigned long"/>
        </method>
        <method name="removeImport" type="void">
          <param name="lIndex" type="long"/>
        </method>
        <method name="removeRule" type="void">
          <param name="lIndex" type="long"/>
        </method>
      </methods>
      <properties>
        <property name="cssRules" read-only="1" type="CSSRuleList"/>
        <property name="cssText" type="DOMString"/>
        <property name="id" read-only="1" type="DOMString"/>
        <property name="imports" read-only="1" type="StyleSheetList"/>
        <property name="isAlternate" read-only="1" type="boolean"/>
        <property name="isPrefAlternate" read-only="1" type="boolean"/>
        <property name="ownerRule" read-only="1" type="CSSRule"/>
        <property name="owningElement" read-only="1" type="Element"/>
        <property name="pages" read-only="1" type="StyleSheetPageList"/>
        <property name="readOnly" read-only="1" type="boolean"/>
        <property name="rules" read-only="1" type="CSSRuleList"/>
      </properties>
    </interface>
    <interface name="CSSSupportsRule" extends="CSSConditionRule"/>
    <interface name="CustomEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="CustomEventInit"/>
      </constructor>
      <methods>
        <method name="initCustomEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="detailArg" type="object"/>
        </method>
      </methods>
      <properties>
        <property name="detail" read-only="1" type="object"/>
      </properties>
    </interface>
    <interface name="DataCue" extends="TextTrackCue">
      <properties>
        <property name="data" type="ArrayBuffer"/>
      </properties>
    </interface>
    <interface name="DataTransfer" extends="Object">
      <methods>
        <method name="clearData" type="boolean">
          <param name="format" default="&quot;null&quot;" optional="1" type="DOMString"/>
        </method>
        <method name="getData" type="DOMString">
          <param name="format" type="DOMString"/>
        </method>
        <method name="setData" type="boolean">
          <param name="format" type="DOMString"/>
          <param name="data" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="dropEffect" type="DOMString"/>
        <property name="effectAllowed" type="DOMString"/>
        <property name="files" read-only="1" same-object="1" type="FileList"/>
        <property name="items" read-only="1" type="DataTransferItemList"/>
        <property name="types" read-only="1" same-object="1" type="DOMStringList"/>
      </properties>
    </interface>
    <interface name="DataTransferItem" extends="Object">
      <methods>
        <method name="getAsFile" nullable="1" type="File"/>
        <method name="getAsString" type="void">
          <param name="_callback" nullable="1" type="FunctionStringCallback"/>
        </method>
        <method name="webkitGetAsEntry" nullable="1" type="Entry"/>
      </methods>
      <properties>
        <property name="kind" read-only="1" type="DOMString"/>
        <property name="type" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="DataTransferItemList" extends="Object">
      <methods>
        <method name="add" nullable="1" type="DataTransferItem">
          <param name="data" type="File"/>
        </method>
        <method name="clear" type="void"/>
        <method name="item" getter="1" type="File">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="remove" type="void">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="DeferredPermissionRequest" extends="Object">
      <methods>
        <method name="allow" type="void"/>
        <method name="deny" type="void"/>
      </methods>
      <properties>
        <property name="id" read-only="1" type="unsigned long"/>
        <property name="type" read-only="1" type="MSWebViewPermissionType"/>
        <property name="uri" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="DelayNode" extends="AudioNode">
      <properties>
        <property name="delayTime" read-only="1" type="AudioParam"/>
      </properties>
    </interface>
    <interface name="DeviceAcceleration" extends="Object">
      <properties>
        <property name="x" nullable="1" read-only="1" type="double"/>
        <property name="y" nullable="1" read-only="1" type="double"/>
        <property name="z" nullable="1" read-only="1" type="double"/>
      </properties>
    </interface>
    <interface name="DeviceLightEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="DeviceLightEventInit"/>
      </constructor>
      <properties>
        <property name="value" read-only="1" type="double"/>
      </properties>
    </interface>
    <interface name="DeviceMotionEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="DeviceMotionEventInit"/>
      </constructor>
      <methods>
        <method name="initDeviceMotionEvent" type="void">
          <param name="type" type="DOMString"/>
          <param name="bubbles" type="boolean"/>
          <param name="cancelable" type="boolean"/>
          <param name="acceleration" nullable="1" type="DeviceAccelerationDict"/>
          <param name="accelerationIncludingGravity" nullable="1" type="DeviceAccelerationDict"/>
          <param name="rotationRate" nullable="1" type="DeviceRotationRateDict"/>
          <param name="interval" nullable="1" type="double"/>
        </method>
      </methods>
      <properties>
        <property name="acceleration" nullable="1" read-only="1" type="DeviceAcceleration"/>
        <property name="accelerationIncludingGravity" nullable="1" read-only="1" type="DeviceAcceleration"/>
        <property name="interval" nullable="1" read-only="1" type="double"/>
        <property name="rotationRate" nullable="1" read-only="1" type="DeviceRotationRate"/>
      </properties>
    </interface>
    <interface name="DeviceOrientationEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="DeviceOrientationEventInit"/>
      </constructor>
      <methods>
        <method name="initDeviceOrientationEvent" type="void">
          <param name="type" type="DOMString"/>
          <param name="bubbles" type="boolean"/>
          <param name="cancelable" type="boolean"/>
          <param name="alpha" nullable="1" type="double"/>
          <param name="beta" nullable="1" type="double"/>
          <param name="gamma" nullable="1" type="double"/>
          <param name="absolute" type="boolean"/>
        </method>
      </methods>
      <properties>
        <property name="absolute" read-only="1" type="boolean"/>
        <property name="alpha" nullable="1" read-only="1" type="double"/>
        <property name="beta" nullable="1" read-only="1" type="double"/>
        <property name="gamma" nullable="1" read-only="1" type="double"/>
      </properties>
    </interface>
    <interface name="DeviceRotationRate" extends="Object">
      <properties>
        <property name="alpha" nullable="1" read-only="1" type="double"/>
        <property name="beta" nullable="1" read-only="1" type="double"/>
        <property name="gamma" nullable="1" read-only="1" type="double"/>
      </properties>
    </interface>
    <interface name="Document" extends="Node">
      <anonymous-methods>
        <method getter="1" type="(Window or Element or HTMLCollection)">
          <param name="name" type="DOMString"/>
        </method>
      </anonymous-methods>
      <events>
        <event name="DOMContentLoaded" bubbles="1" dispatch="sync" follows="readystatechange" precedes="load" type="Event"/>
        <event name="readystatechange" dispatch="sync" precedes="load DOMContentLoaded" type="Event"/>
        <event name="stop" dispatch="sync" type="Event"/>
        <event name="visibilitychanged" dispatch="async" type="Event"/>
        <event name="MSManipulationStateChanged" dispatch="async" type="MSManipulationEvent"/>
        <event name="MSContentZoom" dispatch="sync" tags="IEOnly" type="UIEvent"/>
        <event name="selectionchange" dispatch="async" follows="selectstart" precedes="select" tags="IEOnly" type="Event"/>
        <event name="fullscreenchange" aliases="webkitfullscreenchange" bubbles="1" dispatch="async" tags="IEOnly" type="Event"/>
        <event name="fullscreenerror" aliases="webkitfullscreenerror" bubbles="1" dispatch="async" tags="IEOnly" type="Event"/>
        <event name="mssitepinned" dispatch="sync" type="Event"/>
        <event name="mssitemodejumplistitemremoved" dispatch="sync" type="MSSiteModeEvent"/>
        <event name="msthumbnailclick" dispatch="sync" type="MSSiteModeEvent"/>
      </events>
      <implements>GlobalEventHandlers</implements>
      <implements>NodeSelector</implements>
      <implements>DocumentEvent</implements>
      <methods>
        <method name="adoptNode" type="Node">
          <param name="source" type="Node"/>
        </method>
        <method name="captureEvents" type="void"/>
        <method name="caretRangeFromPoint" type="Range">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
        </method>
        <method name="clear" type="void"/>
        <method name="close" type="void"/>
        <method name="createAttribute" type="Attr">
          <param name="name" type="DOMString"/>
        </method>
        <method name="createAttributeNS" type="Attr">
          <param name="namespaceURI" nullable="1" type="DOMString"/>
          <param name="qualifiedName" type="DOMString"/>
        </method>
        <method name="createCDATASection" type="CDATASection">
          <param name="data" type="DOMString"/>
        </method>
        <method name="createComment" type="Comment">
          <param name="data" type="DOMString"/>
        </method>
        <method name="createDocumentFragment" type="DocumentFragment"/>
        <method name="createElement" type="Element">
          <param name="tagName" type="DOMString"/>
        </method>
        <method name="createElementNS" type="Element">
          <param name="namespaceURI" nullable="1" type="DOMString"/>
          <param name="qualifiedName" type="DOMString"/>
        </method>
        <method name="createExpression" type="XPathExpression">
          <param name="expression" type="DOMString"/>
          <param name="resolver" type="XPathNSResolver"/>
        </method>
        <method name="createNodeIterator" type="NodeIterator">
          <param name="root" type="Node"/>
          <param name="whatToShow" default="0xFFFFFFFF" optional="1" type="unsigned long"/>
          <param name="filter" default="null" optional="1" type="NodeFilter"/>
          <param name="entityReferenceExpansion" default="false" optional="1" type="boolean"/>
        </method>
        <method name="createNSResolver" type="XPathNSResolver">
          <param name="nodeResolver" type="Node"/>
        </method>
        <method name="createProcessingInstruction" type="ProcessingInstruction">
          <param name="target" type="DOMString"/>
          <param name="data" type="DOMString"/>
        </method>
        <method name="createRange" type="Range"/>
        <method name="createTextNode" type="Text">
          <param name="data" type="DOMString"/>
        </method>
        <method name="createTouch" type="Touch">
          <param name="view" type="Window"/>
          <param name="target" type="EventTarget"/>
          <param name="identifier" type="long"/>
          <param name="pageX" type="long"/>
          <param name="pageY" type="long"/>
          <param name="screenX" type="long"/>
          <param name="screenY" type="long"/>
        </method>
        <method name="createTouchList" type="TouchList">
          <param name="touches" type="Touch" variadic="1"/>
        </method>
        <method name="createTreeWalker" type="TreeWalker">
          <param name="root" type="Node"/>
          <param name="whatToShow" default="0xFFFFFFFF" optional="1" type="unsigned long"/>
          <param name="filter" default="null" optional="1" type="NodeFilter"/>
          <param name="entityReferenceExpansion" default="false" optional="1" type="boolean"/>
        </method>
        <method name="elementFromPoint" type="Element">
          <param name="x" type="long"/>
          <param name="y" type="long"/>
        </method>
        <method name="evaluate" type="XPathResult">
          <param name="expression" type="DOMString"/>
          <param name="contextNode" type="Node"/>
          <param name="resolver" type="XPathNSResolver"/>
          <param name="type" type="unsigned short"/>
          <param name="result" type="XPathResult"/>
        </method>
        <method name="execCommand" type="boolean">
          <param name="commandId" type="DOMString"/>
          <param name="showUI" default="false" optional="1" type="boolean"/>
          <param name="value" optional="1" type="any"/>
        </method>
        <method name="execCommandShowHelp" type="boolean">
          <param name="commandId" type="DOMString"/>
        </method>
        <method name="exitFullscreen" type="void"/>
        <method name="exitPointerLock" type="void"/>
        <method name="focus" type="void"/>
        <method name="getElementById" type="Element">
          <param name="elementId" type="DOMString"/>
        </method>
        <method name="getElementsByClassName" type="NodeList">
          <param name="classNames" type="DOMString"/>
        </method>
        <method name="getElementsByName" type="NodeList">
          <param name="elementName" type="DOMString"/>
        </method>
        <method name="getElementsByTagName" type="NodeList">
          <param name="tagname" type="DOMString"/>
        </method>
        <method name="getElementsByTagNameNS" type="NodeList">
          <param name="namespaceURI" nullable="1" type="DOMString"/>
          <param name="localName" type="DOMString"/>
        </method>
        <method name="getSelection" type="Selection"/>
        <method name="hasFocus" type="boolean"/>
        <method name="importNode" type="Node">
          <param name="importedNode" type="Node"/>
          <param name="deep" type="boolean"/>
        </method>
        <method name="msElementsFromPoint" type="NodeList">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
        </method>
        <method name="msElementsFromRect" type="NodeList">
          <param name="left" type="float"/>
          <param name="top" type="float"/>
          <param name="width" type="float"/>
          <param name="height" type="float"/>
        </method>
        <method name="open" type="(Document or Window)">
          <param name="url" default="&quot;text/html&quot;" optional="1" type="DOMString"/>
          <param name="name" optional="1" type="DOMString"/>
          <param name="features" optional="1" type="DOMString"/>
          <param name="replace" optional="1" type="boolean"/>
        </method>
        <method name="queryCommandEnabled" type="boolean">
          <param name="commandId" type="DOMString"/>
        </method>
        <method name="queryCommandIndeterm" type="boolean">
          <param name="commandId" type="DOMString"/>
        </method>
        <method name="queryCommandState" type="boolean">
          <param name="commandId" type="DOMString"/>
        </method>
        <method name="queryCommandSupported" type="boolean">
          <param name="commandId" type="DOMString"/>
        </method>
        <method name="queryCommandText" type="DOMString">
          <param name="commandId" type="DOMString"/>
        </method>
        <method name="queryCommandValue" type="DOMString">
          <param name="commandId" type="DOMString"/>
        </method>
        <method name="releaseEvents" type="void"/>
        <method name="updateSettings" type="void"/>
        <method name="webkitCancelFullScreen" type="void"/>
        <method name="webkitExitFullscreen" type="void"/>
        <method name="write" type="void">
          <param name="content" type="DOMString" variadic="1"/>
        </method>
        <method name="writeln" type="void">
          <param name="content" type="DOMString" variadic="1"/>
        </method>
      </methods>
      <properties>
        <property name="activeElement" read-only="1" type="Element"/>
        <property name="alinkColor" type="DOMString"/>
        <property name="all" read-only="1" type="HTMLAllCollection"/>
        <property name="anchors" read-only="1" type="HTMLCollection"/>
        <property name="applets" read-only="1" type="HTMLCollection"/>
        <property name="bgColor" type="DOMString"/>
        <property name="body" type="HTMLElement"/>
        <property name="characterSet" read-only="1" type="DOMString"/>
        <property name="charset" type="DOMString"/>
        <property name="compatMode" read-only="1" type="DOMString"/>
        <property name="cookie" type="DOMString"/>
        <property name="currentScript" read-only="1" type="(HTMLScriptElement? or SVGScriptElement?)"/>
        <property name="defaultView" read-only="1" type="Window"/>
        <property name="designMode" type="DOMString"/>
        <property name="dir" type="DOMString"/>
        <property name="doctype" read-only="1" type="DocumentType"/>
        <property name="documentElement" read-only="1" type="Element"/>
        <property name="domain" property-descriptor-not-configurable="1" type="DOMString"/>
        <property name="embeds" read-only="1" type="HTMLCollection"/>
        <property name="fgColor" type="DOMString"/>
        <property name="forms" read-only="1" type="HTMLCollection"/>
        <property name="fullscreenElement" nullable="1" read-only="1" type="Element"/>
        <property name="fullscreenEnabled" read-only="1" type="boolean"/>
        <property name="head" read-only="1" type="HTMLHeadElement"/>
        <property name="hidden" read-only="1" type="boolean"/>
        <property name="images" read-only="1" type="HTMLCollection"/>
        <property name="implementation" read-only="1" type="DOMImplementation"/>
        <property name="inputEncoding" nullable="1" read-only="1" type="DOMString"/>
        <property name="lastModified" read-only="1" type="DOMString"/>
        <property name="linkColor" type="DOMString"/>
        <property name="links" read-only="1" type="HTMLCollection"/>
        <property name="location" put-forwards="href" read-only="1" type="Location"/>
        <property name="msCapsLockWarningOff" type="boolean"/>
        <property name="msCSSOMElementFloatMetrics" type="boolean"/>
        <property name="onabort" event-handler="abort" type="EventHandler"/>
        <property name="onactivate" event-handler="activate" type="EventHandler"/>
        <property name="onbeforeactivate" event-handler="beforeactivate" type="EventHandler"/>
        <property name="onbeforedeactivate" event-handler="beforedeactivate" type="EventHandler"/>
        <property name="onblur" event-handler="blur" type="EventHandler"/>
        <property name="oncanplay" event-handler="canplay" type="EventHandler"/>
        <property name="oncanplaythrough" event-handler="canplaythrough" type="EventHandler"/>
        <property name="onchange" event-handler="change" type="EventHandler"/>
        <property name="onclick" event-handler="click" type="EventHandler"/>
        <property name="oncontextmenu" event-handler="contextmenu" type="EventHandler"/>
        <property name="ondblclick" event-handler="dblclick" type="EventHandler"/>
        <property name="ondeactivate" event-handler="deactivate" type="EventHandler"/>
        <property name="ondrag" event-handler="drag" type="EventHandler"/>
        <property name="ondragend" event-handler="dragend" type="EventHandler"/>
        <property name="ondragenter" event-handler="dragenter" type="EventHandler"/>
        <property name="ondragleave" event-handler="dragleave" type="EventHandler"/>
        <property name="ondragover" event-handler="dragover" type="EventHandler"/>
        <property name="ondragstart" event-handler="dragstart" type="EventHandler"/>
        <property name="ondrop" event-handler="drop" type="EventHandler"/>
        <property name="ondurationchange" event-handler="durationchange" type="EventHandler"/>
        <property name="onemptied" event-handler="emptied" type="EventHandler"/>
        <property name="onended" event-handler="ended" type="EventHandler"/>
        <property name="onerror" event-handler="error" type="EventHandler"/>
        <property name="onfocus" event-handler="focus" type="EventHandler"/>
        <property name="onfullscreenchange" event-handler="fullscreenchange" type="EventHandler"/>
        <property name="onfullscreenerror" event-handler="fullscreenerror" type="EventHandler"/>
        <property name="oninput" event-handler="input" type="EventHandler"/>
        <property name="oninvalid" event-handler="invalid" type="EventHandler"/>
        <property name="onkeydown" event-handler="keydown" type="EventHandler"/>
        <property name="onkeypress" event-handler="keypress" type="EventHandler"/>
        <property name="onkeyup" event-handler="keyup" type="EventHandler"/>
        <property name="onload" event-handler="load" type="EventHandler"/>
        <property name="onloadeddata" event-handler="loadeddata" type="EventHandler"/>
        <property name="onloadedmetadata" event-handler="loadedmetadata" type="EventHandler"/>
        <property name="onloadstart" event-handler="loadstart" type="EventHandler"/>
        <property name="onmousedown" event-handler="mousedown" type="EventHandler"/>
        <property name="onmousemove" event-handler="mousemove" type="EventHandler"/>
        <property name="onmouseout" event-handler="mouseout" type="EventHandler"/>
        <property name="onmouseover" event-handler="mouseover" type="EventHandler"/>
        <property name="onmouseup" event-handler="mouseup" type="EventHandler"/>
        <property name="onmousewheel" event-handler="mousewheel" type="EventHandler"/>
        <property name="onmscontentzoom" event-handler="MSContentZoom" type="EventHandler"/>
        <property name="onmsgesturechange" event-handler="MSGestureChange" type="EventHandler"/>
        <property name="onmsgesturedoubletap" event-handler="MSGestureDoubleTap" type="EventHandler"/>
        <property name="onmsgestureend" event-handler="MSGestureEnd" type="EventHandler"/>
        <property name="onmsgesturehold" event-handler="MSGestureHold" type="EventHandler"/>
        <property name="onmsgesturestart" event-handler="MSGestureStart" type="EventHandler"/>
        <property name="onmsgesturetap" event-handler="MSGestureTap" type="EventHandler"/>
        <property name="onmsinertiastart" event-handler="MSInertiaStart" type="EventHandler"/>
        <property name="onmsmanipulationstatechanged" event-handler="MSManipulationStateChanged" type="EventHandler"/>
        <property name="onmspointercancel" event-handler="MSPointerCancel" type="EventHandler"/>
        <property name="onmspointerdown" event-handler="MSPointerDown" type="EventHandler"/>
        <property name="onmspointerenter" content-attribute="onmspointerenter" content-attribute-value-syntax="javascript" event-handler="MSPointerEnter" type="EventHandler"/>
        <property name="onmspointerleave" content-attribute="onmspointerleave" content-attribute-value-syntax="javascript" event-handler="MSPointerLeave" type="EventHandler"/>
        <property name="onmspointermove" event-handler="MSPointerMove" type="EventHandler"/>
        <property name="onmspointerout" event-handler="MSPointerOut" type="EventHandler"/>
        <property name="onmspointerover" event-handler="MSPointerOver" type="EventHandler"/>
        <property name="onmspointerup" event-handler="MSPointerUp" type="EventHandler"/>
        <property name="onmssitemodejumplistitemremoved" event-handler="mssitemodejumplistitemremoved" type="EventHandler"/>
        <property name="onmsthumbnailclick" event-handler="msthumbnailclick" type="EventHandler"/>
        <property name="onpause" event-handler="pause" type="EventHandler"/>
        <property name="onplay" event-handler="play" type="EventHandler"/>
        <property name="onplaying" event-handler="playing" type="EventHandler"/>
        <property name="onpointerlockchange" event-handler="pointerlockchange" type="EventHandler"/>
        <property name="onpointerlockerror" event-handler="pointerlockerror" type="EventHandler"/>
        <property name="onprogress" event-handler="progress" type="EventHandler"/>
        <property name="onratechange" event-handler="ratechange" type="EventHandler"/>
        <property name="onreadystatechange" event-handler="readystatechange" lenient-this="1" type="EventHandler"/>
        <property name="onreset" event-handler="reset" type="EventHandler"/>
        <property name="onscroll" event-handler="scroll" type="EventHandler"/>
        <property name="onseeked" event-handler="seeked" type="EventHandler"/>
        <property name="onseeking" event-handler="seeking" type="EventHandler"/>
        <property name="onselect" event-handler="select" type="EventHandler"/>
        <property name="onselectionchange" event-handler="selectionchange" type="EventHandler"/>
        <property name="onselectstart" event-handler="selectstart" type="EventHandler"/>
        <property name="onstalled" event-handler="stalled" type="EventHandler"/>
        <property name="onstop" event-handler="stop" type="EventHandler"/>
        <property name="onsubmit" event-handler="submit" type="EventHandler"/>
        <property name="onsuspend" event-handler="suspend" type="EventHandler"/>
        <property name="ontimeupdate" event-handler="timeupdate" type="EventHandler"/>
        <property name="ontouchcancel" event-handler="touchcancel" type="EventHandler"/>
        <property name="ontouchend" event-handler="touchend" type="EventHandler"/>
        <property name="ontouchmove" event-handler="touchmove" type="EventHandler"/>
        <property name="ontouchstart" event-handler="touchstart" type="EventHandler"/>
        <property name="onvolumechange" event-handler="volumechange" type="EventHandler"/>
        <property name="onwaiting" event-handler="waiting" type="EventHandler"/>
        <property name="onwebkitfullscreenchange" event-handler="webkitfullscreenchange" type="EventHandler"/>
        <property name="onwebkitfullscreenerror" event-handler="webkitfullscreenerror" type="EventHandler"/>
        <property name="plugins" read-only="1" type="HTMLCollection"/>
        <property name="pointerLockElement" read-only="1" type="Element"/>
        <property name="readyState" read-only="1" type="DOMString"/>
        <property name="referrer" property-descriptor-not-configurable="1" read-only="1" type="DOMString"/>
        <property name="rootElement" read-only="1" type="SVGSVGElement"/>
        <property name="scripts" read-only="1" type="HTMLCollection"/>
        <property name="scrollingElement" nullable="1" read-only="1" type="Element"/>
        <property name="styleSheets" read-only="1" type="StyleSheetList"/>
        <property name="title" type="DOMString"/>
        <property name="URL" property-descriptor-not-configurable="1" read-only="1" type="DOMString"/>
        <property name="URLUnencoded" property-descriptor-not-configurable="1" read-only="1" type="DOMString"/>
        <property name="visibilityState" read-only="1" type="VisibilityState"/>
        <property name="vlinkColor" type="DOMString"/>
        <property name="webkitCurrentFullScreenElement" nullable="1" read-only="1" type="Element"/>
        <property name="webkitFullscreenElement" nullable="1" read-only="1" type="Element"/>
        <property name="webkitFullscreenEnabled" read-only="1" type="boolean"/>
        <property name="webkitIsFullScreen" read-only="1" type="boolean"/>
        <property name="xmlEncoding" nullable="1" read-only="1" type="DOMString"/>
        <property name="xmlStandalone" type="boolean"/>
        <property name="xmlVersion" nullable="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="DocumentFragment" extends="Node">
      <implements>NodeSelector</implements>
    </interface>
    <interface name="DocumentType" extends="Node">
      <implements>ChildNode</implements>
      <properties>
        <property name="entities" read-only="1" type="NamedNodeMap"/>
        <property name="internalSubset" nullable="1" read-only="1" type="DOMString"/>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="notations" read-only="1" type="NamedNodeMap"/>
        <property name="publicId" read-only="1" type="DOMString"/>
        <property name="systemId" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="DOMError" extends="Object">
      <methods>
        <method name="toString" stringifier="1" type="DOMString"/>
      </methods>
      <properties>
        <property name="name" read-only="1" stringifier="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="DOMException" extends="Object">
      <constants>
        <constant name="ABORT_ERR" type="unsigned short" value="20"/>
        <constant name="DATA_CLONE_ERR" type="unsigned short" value="25"/>
        <constant name="DOMSTRING_SIZE_ERR" type="unsigned short" value="2"/>
        <constant name="HIERARCHY_REQUEST_ERR" type="unsigned short" value="3"/>
        <constant name="INDEX_SIZE_ERR" type="unsigned short" value="1"/>
        <constant name="INUSE_ATTRIBUTE_ERR" type="unsigned short" value="10"/>
        <constant name="INVALID_ACCESS_ERR" type="unsigned short" value="15"/>
        <constant name="INVALID_CHARACTER_ERR" type="unsigned short" value="5"/>
        <constant name="INVALID_MODIFICATION_ERR" type="unsigned short" value="13"/>
        <constant name="INVALID_NODE_TYPE_ERR" type="unsigned short" value="24"/>
        <constant name="INVALID_STATE_ERR" type="unsigned short" value="11"/>
        <constant name="NAMESPACE_ERR" type="unsigned short" value="14"/>
        <constant name="NETWORK_ERR" type="unsigned short" value="19"/>
        <constant name="NO_DATA_ALLOWED_ERR" type="unsigned short" value="6"/>
        <constant name="NO_MODIFICATION_ALLOWED_ERR" type="unsigned short" value="7"/>
        <constant name="NOT_FOUND_ERR" type="unsigned short" value="8"/>
        <constant name="NOT_SUPPORTED_ERR" type="unsigned short" value="9"/>
        <constant name="PARSE_ERR" type="unsigned short" value="81"/>
        <constant name="QUOTA_EXCEEDED_ERR" type="unsigned short" value="22"/>
        <constant name="SECURITY_ERR" type="unsigned short" value="18"/>
        <constant name="SERIALIZE_ERR" type="unsigned short" value="82"/>
        <constant name="SYNTAX_ERR" type="unsigned short" value="12"/>
        <constant name="TIMEOUT_ERR" type="unsigned short" value="23"/>
        <constant name="TYPE_MISMATCH_ERR" type="unsigned short" value="17"/>
        <constant name="URL_MISMATCH_ERR" type="unsigned short" value="21"/>
        <constant name="VALIDATION_ERR" type="unsigned short" value="16"/>
        <constant name="WRONG_DOCUMENT_ERR" type="unsigned short" value="4"/>
      </constants>
      <methods>
        <method name="toString" stringifier="1" type="DOMString"/>
      </methods>
      <properties>
        <property name="code" read-only="1" type="unsigned short"/>
        <property name="message" read-only="1" stringifier="1" type="DOMString"/>
        <property name="name" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="DOMImplementation" extends="Object">
      <methods>
        <method name="createDocument" type="Document">
          <param name="namespaceURI" nullable="1" type="DOMString"/>
          <param name="qualifiedName" nullable="1" type="DOMString"/>
          <param name="doctype" type="DocumentType"/>
        </method>
        <method name="createDocumentType" type="DocumentType">
          <param name="qualifiedName" type="DOMString"/>
          <param name="publicId" type="DOMString"/>
          <param name="systemId" type="DOMString"/>
        </method>
        <method name="createHTMLDocument" type="Document">
          <param name="title" type="DOMString"/>
        </method>
        <method name="hasFeature" type="boolean"/>
      </methods>
    </interface>
    <interface name="DOMParser" extends="Object">
      <constructor/>
      <methods>
        <method name="parseFromString" type="Document">
          <param name="source" type="DOMString"/>
          <param name="mimeType" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="DOMSettableTokenList" extends="DOMTokenList">
      <properties>
        <property name="value" type="DOMString"/>
      </properties>
    </interface>
    <interface name="DOMStringList" extends="Object">
      <methods>
        <method name="contains" type="boolean">
          <param name="str" type="DOMString"/>
        </method>
        <method name="item" getter="1" nullable="1" type="DOMString">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="DOMStringMap" extends="Object">
      <anonymous-methods>
        <method getter="1" type="DOMString">
          <param name="name" type="DOMString"/>
        </method>
        <method creator="1" setter="1" type="void">
          <param name="name" type="DOMString"/>
          <param name="value" type="DOMString"/>
        </method>
        <method deleter="1" type="void">
          <param name="name" type="DOMString"/>
        </method>
      </anonymous-methods>
    </interface>
    <interface name="DOMTokenList" extends="Object">
      <methods>
        <method name="add" type="void">
          <param name="token" type="DOMString" variadic="1"/>
        </method>
        <method name="contains" type="boolean">
          <param name="token" type="DOMString"/>
        </method>
        <method name="item" getter="1" type="DOMString">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="remove" type="void">
          <param name="token" type="DOMString" variadic="1"/>
        </method>
        <method name="toggle" type="boolean">
          <param name="token" type="DOMString"/>
          <param name="force" optional="1" type="boolean"/>
        </method>
        <method name="toString" stringifier="1" type="DOMString"/>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="DragEvent" extends="MouseEvent">
      <methods>
        <method name="initDragEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="viewArg" type="Window"/>
          <param name="detailArg" type="long"/>
          <param name="screenXArg" type="long"/>
          <param name="screenYArg" type="long"/>
          <param name="clientXArg" type="long"/>
          <param name="clientYArg" type="long"/>
          <param name="ctrlKeyArg" type="boolean"/>
          <param name="altKeyArg" type="boolean"/>
          <param name="shiftKeyArg" type="boolean"/>
          <param name="metaKeyArg" type="boolean"/>
          <param name="buttonArg" type="unsigned short"/>
          <param name="relatedTargetArg" type="EventTarget"/>
          <param name="dataTransferArg" type="DataTransfer"/>
        </method>
        <method name="msConvertURL" type="void">
          <param name="file" type="File"/>
          <param name="targetType" type="DOMString"/>
          <param name="targetURL" optional="1" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="dataTransfer" read-only="1" type="DataTransfer"/>
      </properties>
    </interface>
    <interface name="DynamicsCompressorNode" extends="AudioNode">
      <properties>
        <property name="attack" read-only="1" type="AudioParam"/>
        <property name="knee" read-only="1" type="AudioParam"/>
        <property name="ratio" read-only="1" type="AudioParam"/>
        <property name="reduction" read-only="1" type="float"/>
        <property name="release" read-only="1" type="AudioParam"/>
        <property name="threshold" read-only="1" type="AudioParam"/>
      </properties>
    </interface>
    <interface name="Element" extends="Node">
      <anonymous-content-attributes>
        <parsedattribute name="title"/>
        <parsedattribute name="xml:id"/>
        <parsedattribute name="xml:base" value-syntax="url"/>
        <parsedattribute name="xml:lang"/>
        <parsedattribute name="aria-activedescendant" value-syntax="id_ref"/>
        <parsedattribute enum-values="false true" name="aria-atomic" value-syntax="enum"/>
        <parsedattribute enum-values="none inline list both" name="aria-autocomplete" value-syntax="enum"/>
        <parsedattribute enum-values="false true" name="aria-busy" value-syntax="enum"/>
        <parsedattribute enum-values="true false mixed" name="aria-checked" value-syntax="enum"/>
        <parsedattribute name="aria-controls" value-syntax="space_separated_id_refs"/>
        <parsedattribute name="aria-describedby" value-syntax="space_separated_id_refs"/>
        <parsedattribute enum-values="false true" name="aria-disabled" value-syntax="enum"/>
        <parsedattribute enum-values="none copy move link execute popup" name="aria-dropeffect" value-syntax="space_separated_enums"/>
        <parsedattribute enum-values="undefined true false" name="aria-expanded" value-syntax="enum"/>
        <parsedattribute name="aria-flowto" value-syntax="space_separated_id_refs"/>
        <parsedattribute enum-values="undefined true false" name="aria-grabbed" value-syntax="enum"/>
        <parsedattribute enum-values="false true" name="aria-haspopup" value-syntax="enum"/>
        <parsedattribute enum-values="false true" name="aria-hidden" value-syntax="enum"/>
        <parsedattribute enum-values="false grammar spelling true" name="aria-invalid" value-syntax="enum"/>
        <parsedattribute name="aria-label"/>
        <parsedattribute name="aria-labelledby" value-syntax="space_separated_id_refs"/>
        <parsedattribute name="aria-level" value-syntax="non_negative_integer"/>
        <parsedattribute enum-values="off polite assertive" name="aria-live" value-syntax="enum"/>
        <parsedattribute enum-values="false true" name="aria-multiline" value-syntax="enum"/>
        <parsedattribute enum-values="false true" name="aria-multiselectable" value-syntax="enum"/>
        <parsedattribute enum-values="horizontal vertical" name="aria-orientation" value-syntax="enum"/>
        <parsedattribute name="aria-owns" value-syntax="space_separated_id_refs"/>
        <parsedattribute name="aria-posinset" value-syntax="non_negative_integer"/>
        <parsedattribute enum-values="true false mixed" name="aria-pressed" value-syntax="enum"/>
        <parsedattribute enum-values="false true" name="aria-readonly" value-syntax="enum"/>
        <parsedattribute enum-values="additions removals text all" name="aria-relevant" value-syntax="space_separated_enums"/>
        <parsedattribute enum-values="false true" name="aria-required" value-syntax="enum"/>
        <parsedattribute enum-values="undefined true false" name="aria-selected" value-syntax="enum"/>
        <parsedattribute name="aria-setsize" value-syntax="non_negative_integer"/>
        <parsedattribute enum-values="none ascending descending other" name="aria-sort" value-syntax="enum"/>
        <parsedattribute name="aria-valuemax" value-syntax="floating_point_number"/>
        <parsedattribute name="aria-valuemin" value-syntax="floating_point_number"/>
        <parsedattribute name="aria-valuenow" value-syntax="floating_point_number"/>
        <parsedattribute name="x-ms-aria-flowfrom" value-syntax="space_separated_id_refs"/>
        <parsedattribute enum-values="alert alertdialog application article banner button checkbox columnheader combobox complementary contentinfo definition dialog directory document form grid gridcell group heading img link list listbox listitem log main marquee math menu menubar menuitem menuitemcheckbox menuitemradio navigation note option presentation progressbar radio radiogroup region row rowgroup rowheader scrollbar search separator slider spinbutton status tab tablist tabpanel textbox timer toolbar tooltip tree treegrid treeitem" name="role" value-syntax="enum"/>
      </anonymous-content-attributes>
      <events>
        <event name="click" bubbles="1" cancelable="1" dispatch="sync" follows="mouseup pointerup MSPointerUp" precedes="dblclick" type="MouseEvent"/>
        <event name="dblclick" bubbles="1" cancelable="1" dispatch="sync" follows="click" type="MouseEvent"/>
        <event name="mousemove" bubbles="1" cancelable="1" dispatch="sync" type="MouseEvent"/>
        <event name="mouseover" bubbles="1" cancelable="1" dispatch="sync" precedes="mouseout" type="MouseEvent"/>
        <event name="mouseout" bubbles="1" cancelable="1" dispatch="sync" follows="mouseover" type="MouseEvent"/>
        <event name="mousedown" bubbles="1" cancelable="1" dispatch="sync" precedes="mouseup" type="MouseEvent"/>
        <event name="mouseup" bubbles="1" cancelable="1" dispatch="sync" follows="mousedown" precedes="click" type="MouseEvent"/>
        <event name="mouseenter" dispatch="sync" precedes="mouseleave" type="MouseEvent"/>
        <event name="mouseleave" dispatch="sync" follows="mouseenter" type="MouseEvent"/>
        <event name="MSHoldVisual" bubbles="1" cancelable="1" dispatch="sync" tags="IEOnly" type="MouseEvent"/>
        <event name="wheel" bubbles="1" cancelable="1" dispatch="sync" type="WheelEvent"/>
        <event name="mousewheel" bubbles="1" cancelable="1" dispatch="sync" type="WheelEvent"/>
        <event name="MSPointerDown" bubbles="1" cancelable="1" dispatch="sync" precedes="MSPointerMove" tags="IEOnly" type="MSPointerEvent"/>
        <event name="MSPointerMove" bubbles="1" cancelable="1" dispatch="sync" follows="MSPointerDown" precedes="MSPointerUp MSPointerCancel" tags="IEOnly" type="MSPointerEvent"/>
        <event name="MSPointerUp" bubbles="1" cancelable="1" dispatch="sync" follows="MSPointerMove" precedes="click" tags="IEOnly" type="MSPointerEvent"/>
        <event name="MSPointerOver" bubbles="1" cancelable="1" dispatch="sync" precedes="MSPointerOut" tags="IEOnly" type="MSPointerEvent"/>
        <event name="MSPointerOut" bubbles="1" cancelable="1" dispatch="sync" follows="MSPointerOver" tags="IEOnly" type="MSPointerEvent"/>
        <event name="MSPointerCancel" bubbles="1" dispatch="sync" follows="MSPointerMove" tags="IEOnly" type="MSPointerEvent"/>
        <event name="MSPointerHover" bubbles="1" cancelable="1" dispatch="sync" tags="IEOnly" type="MSPointerEvent"/>
        <event name="MSGotPointerCapture" bubbles="1" dispatch="sync" precedes="MSLostPointerCapture" tags="IEOnly" type="MSPointerEvent"/>
        <event name="MSLostPointerCapture" bubbles="1" dispatch="sync" follows="MSGotPointerCapture" tags="IEOnly" type="MSPointerEvent"/>
        <event name="MSPointerEnter" dispatch="sync" precedes="MSPointerLeave" tags="IEOnly" type="MSPointerEvent"/>
        <event name="MSPointerLeave" dispatch="sync" follows="MSPointerEnter" tags="IEOnly" type="MSPointerEvent"/>
        <event name="MSGestureStart" bubbles="1" cancelable="1" dispatch="sync" precedes="MSGestureChange" type="MSGestureEvent"/>
        <event name="MSGestureChange" bubbles="1" cancelable="1" dispatch="sync" follows="MSGestureStart" precedes="MSInertiaStart MSGestureEnd" type="MSGestureEvent"/>
        <event name="MSGestureEnd" bubbles="1" cancelable="1" dispatch="sync" follows="MSGestureChange" type="MSGestureEvent"/>
        <event name="MSGestureHold" bubbles="1" cancelable="1" dispatch="sync" type="MSGestureEvent"/>
        <event name="MSGestureTap" bubbles="1" cancelable="1" dispatch="sync" type="MSGestureEvent"/>
        <event name="MSGestureDoubleTap" bubbles="1" cancelable="1" dispatch="sync" type="MSGestureEvent"/>
        <event name="MSInertiaStart" bubbles="1" cancelable="1" dispatch="sync" follows="MSGestureChange" type="MSGestureEvent"/>
        <event name="pointerenter" aliases="MSPointerEnter" dispatch="sync" precedes="pointerleave" type="PointerEvent"/>
        <event name="pointerleave" aliases="MSPointerLeave" dispatch="sync" follows="pointerenter" type="PointerEvent"/>
        <event name="pointerdown" aliases="MSPointerDown" bubbles="1" cancelable="1" dispatch="sync" precedes="pointermove" type="PointerEvent"/>
        <event name="pointermove" aliases="MSPointerMove" bubbles="1" cancelable="1" dispatch="sync" follows="pointerdown" precedes="pointerup pointercancel" type="PointerEvent"/>
        <event name="pointerup" aliases="MSPointerUp" bubbles="1" cancelable="1" dispatch="sync" follows="pointermove" precedes="click" type="PointerEvent"/>
        <event name="pointerover" aliases="MSPointerOver" bubbles="1" cancelable="1" dispatch="sync" precedes="pointerout" type="PointerEvent"/>
        <event name="pointerout" aliases="MSPointerOut" bubbles="1" cancelable="1" dispatch="sync" follows="pointerover" type="PointerEvent"/>
        <event name="pointercancel" aliases="MSPointerCancel" bubbles="1" dispatch="sync" follows="pointermove" type="PointerEvent"/>
        <event name="gotpointercapture" aliases="MSGotPointerCapture" bubbles="1" dispatch="sync" precedes="lostpointercapture" type="PointerEvent"/>
        <event name="lostpointercapture" aliases="MSLostPointerCapture" bubbles="1" dispatch="sync" follows="gotpointercapture" type="PointerEvent"/>
        <event name="contextmenu" bubbles="1" cancelable="1" dispatch="sync" type="PointerEvent"/>
        <event name="touchstart" bubbles="1" cancelable="1" dispatch="sync" precedes="touchmove" tags="WinPhoneOnly" type="TouchEvent"/>
        <event name="touchend" bubbles="1" cancelable="1" dispatch="sync" follows="touchmove" tags="WinPhoneOnly" type="TouchEvent"/>
        <event name="touchmove" bubbles="1" cancelable="1" dispatch="sync" follows="touchstart" precedes="touchend touchcancel" tags="WinPhoneOnly" type="TouchEvent"/>
        <event name="touchcancel" bubbles="1" dispatch="sync" follows="touchmove" tags="WinPhoneOnly" type="TouchEvent"/>
        <event name="selectstart" bubbles="1" cancelable="1" dispatch="sync" precedes="select selectionchange" tags="IEOnly" type="Event"/>
        <event name="select" bubbles="1" dispatch="sync" follows="selectstart selectionchange" type="UIEvent"/>
        <event name="mscontrolselect" bubbles="1" cancelable="1" dispatch="sync" tags="IEOnly" type="UIEvent"/>
        <event name="mscontrolresizestart" bubbles="1" cancelable="1" dispatch="sync" precedes="mscontrolresizeend" tags="IEOnly" type="UIEvent"/>
        <event name="mscontrolresizeend" bubbles="1" dispatch="sync" follows="mscontrolresizestart" tags="IEOnly" type="UIEvent"/>
        <event name="msbeforeeditfocus" bubbles="1" cancelable="1" dispatch="sync" tags="IEOnly" type="UIEvent"/>
        <event name="keyup" bubbles="1" cancelable="1" dispatch="sync" follows="keydown keypress" type="KeyboardEvent"/>
        <event name="keydown" bubbles="1" cancelable="1" dispatch="sync" precedes="keyup keypress" type="KeyboardEvent"/>
        <event name="keypress" bubbles="1" cancelable="1" dispatch="sync" follows="keydown" precedes="keyup" type="KeyboardEvent"/>
        <event name="textInput" bubbles="1" cancelable="1" dispatch="sync" type="TextEvent"/>
        <event name="compositionstart" bubbles="1" cancelable="1" dispatch="sync" precedes="compositionupdate compositionend" type="CompositionEvent"/>
        <event name="compositionupdate" bubbles="1" dispatch="sync" follows="compositionstart" precedes="compositionend" type="CompositionEvent"/>
        <event name="compositionend" bubbles="1" dispatch="sync" follows="compositionstart compositionupdate" type="CompositionEvent"/>
        <event name="drag" bubbles="1" cancelable="1" dispatch="sync" follows="dragstart" precedes="dragend" type="DragEvent"/>
        <event name="dragstart" bubbles="1" cancelable="1" dispatch="sync" precedes="drag" type="DragEvent"/>
        <event name="dragenter" bubbles="1" cancelable="1" dispatch="sync" follows="drag" precedes="dragover drop" type="DragEvent"/>
        <event name="dragover" bubbles="1" cancelable="1" dispatch="sync" follows="dragenter" precedes="dragleave drop" type="DragEvent"/>
        <event name="dragleave" bubbles="1" dispatch="sync" follows="dragover" precedes="drag" type="DragEvent"/>
        <event name="dragend" bubbles="1" cancelable="1" dispatch="sync" follows="drag" type="DragEvent"/>
        <event name="drop" bubbles="1" dispatch="sync" follows="dragenter dragover" type="DragEvent"/>
        <event name="copy" bubbles="1" cancelable="1" dispatch="sync" follows="beforecopy" type="ClipboardEvent"/>
        <event name="cut" bubbles="1" cancelable="1" dispatch="sync" follows="beforecut" type="ClipboardEvent"/>
        <event name="paste" bubbles="1" cancelable="1" dispatch="sync" follows="beforepaste" type="ClipboardEvent"/>
        <event name="beforecopy" bubbles="1" cancelable="1" dispatch="sync" precedes="copy" tags="IEOnly" type="ClipboardEvent"/>
        <event name="beforecut" bubbles="1" cancelable="1" dispatch="sync" precedes="cut" tags="IEOnly" type="ClipboardEvent"/>
        <event name="beforepaste" bubbles="1" cancelable="1" dispatch="sync" precedes="paste" tags="IEOnly" type="ClipboardEvent"/>
        <event name="focus" dispatch="sync" precedes="blur" type="FocusEvent"/>
        <event name="blur" dispatch="sync" follows="focus" type="FocusEvent"/>
        <event name="focusin" aliases="DOMFocusIn" bubbles="1" dispatch="sync" precedes="focusout" type="FocusEvent"/>
        <event name="focusout" aliases="DOMFocusOut" bubbles="1" dispatch="sync" follows="focusin" type="FocusEvent"/>
        <event name="activate" bubbles="1" dispatch="sync" follows="beforeactivate" precedes="beforedeactivate" tags="IEOnly" type="UIEvent"/>
        <event name="deactivate" bubbles="1" dispatch="sync" follows="beforedeactivate" tags="IEOnly" type="UIEvent"/>
        <event name="beforeactivate" bubbles="1" cancelable="1" dispatch="sync" precedes="activate" tags="IEOnly" type="UIEvent"/>
        <event name="beforedeactivate" bubbles="1" cancelable="1" dispatch="sync" follows="activate" precedes="deactivate" tags="IEOnly" type="UIEvent"/>
        <event name="mselementresize" dispatch="sync" tags="IEOnly" type="Event"/>
        <event name="scroll" dispatch="async" type="UIEvent"/>
        <event name="MSManipulationStateChanged" dispatch="async" tags="IEOnly" type="MSManipulationEvent"/>
        <event name="MSContentZoom" dispatch="async" tags="IEOnly" type="UIEvent"/>
        <event name="MSRegionUpdate" bubbles="1" dispatch="async" tags="IEOnly" type="Event"/>
        <event name="transitionstart" aliases="MSTransitionStart webkitTransitionStart" bubbles="1" cancelable="1" dispatch="async" precedes="transitionend" type="TransitionEvent"/>
        <event name="transitionend" aliases="MSTransitionEnd webkitTransitionEnd" bubbles="1" cancelable="1" dispatch="async" follows="transitionstart" type="TransitionEvent"/>
        <event name="animationstart" aliases="MSAnimationStart webkitAnimationStart" bubbles="1" cancelable="1" dispatch="async" precedes="animationend animationiteration" type="AnimationEvent"/>
        <event name="animationend" aliases="MSAnimationEnd webkitAnimationEnd" bubbles="1" cancelable="1" dispatch="async" follows="animationstart animationiteration" type="AnimationEvent"/>
        <event name="animationiteration" aliases="MSAnimationIteration webkitAnimationIteration" bubbles="1" cancelable="1" dispatch="async" follows="animationstart" precedes="animationend" type="AnimationEvent"/>
        <event name="DOMAttrModified" bubbles="1" dispatch="sync" type="MutationEvent"/>
        <event name="DOMNodeInserted" bubbles="1" dispatch="sync" type="MutationEvent"/>
        <event name="DOMNodeRemoved" bubbles="1" dispatch="sync" type="MutationEvent"/>
        <event name="DOMSubtreeModified" bubbles="1" dispatch="async-and-combine" type="MutationEvent"/>
        <event name="overflowchanged" dispatch="async" type="OverflowEvent"/>
      </events>
      <implements>GlobalEventHandlers</implements>
      <implements>ElementTraversal</implements>
      <implements>NodeSelector</implements>
      <implements>ChildNode</implements>
      <methods>
        <method name="getAttribute" nullable="1" type="DOMString">
          <param name="qualifiedName" type="DOMString"/>
        </method>
        <method name="getAttributeNode" type="Attr">
          <param name="name" type="DOMString"/>
        </method>
        <method name="getAttributeNodeNS" type="Attr">
          <param name="namespaceURI" treat-null-as="EmptyString" type="DOMString"/>
          <param name="localName" type="DOMString"/>
        </method>
        <method name="getAttributeNS" type="DOMString">
          <param name="namespaceURI" treat-null-as="EmptyString" type="DOMString"/>
          <param name="localName" type="DOMString"/>
        </method>
        <method name="getBoundingClientRect" type="ClientRect"/>
        <method name="getClientRects" type="ClientRectList"/>
        <method name="getElementsByTagName" type="NodeList">
          <param name="name" type="DOMString"/>
        </method>
        <method name="getElementsByTagNameNS" type="NodeList">
          <param name="namespaceURI" nullable="1" type="DOMString"/>
          <param name="localName" type="DOMString"/>
        </method>
        <method name="hasAttribute" type="boolean">
          <param name="name" type="DOMString"/>
        </method>
        <method name="hasAttributeNS" type="boolean">
          <param name="namespaceURI" treat-null-as="EmptyString" type="DOMString"/>
          <param name="localName" type="DOMString"/>
        </method>
        <method name="msGetRegionContent" type="MSRangeCollection"/>
        <method name="msGetUntransformedBounds" type="ClientRect"/>
        <method name="msMatchesSelector" type="boolean">
          <param name="selectors" type="DOMString"/>
        </method>
        <method name="msReleasePointerCapture" type="void">
          <param name="pointerId" type="long"/>
        </method>
        <method name="msSetPointerCapture" type="void">
          <param name="pointerId" type="long"/>
        </method>
        <method name="msZoomTo" type="void">
          <param name="args" type="MsZoomToOptions"/>
        </method>
        <method name="releasePointerCapture" type="void">
          <param name="pointerId" type="long"/>
        </method>
        <method name="removeAttribute" type="void">
          <param name="qualifiedName" type="DOMString"/>
        </method>
        <method name="removeAttributeNode" type="Attr">
          <param name="oldAttr" type="Attr"/>
        </method>
        <method name="removeAttributeNS" type="void">
          <param name="namespaceURI" treat-null-as="EmptyString" type="DOMString"/>
          <param name="localName" type="DOMString"/>
        </method>
        <method name="requestFullscreen" type="void"/>
        <method name="requestPointerLock" type="void"/>
        <method name="setAttribute" type="void">
          <param name="qualifiedName" type="DOMString"/>
          <param name="value" type="DOMString"/>
        </method>
        <method name="setAttributeNode" type="Attr">
          <param name="newAttr" type="Attr"/>
        </method>
        <method name="setAttributeNodeNS" type="Attr">
          <param name="newAttr" type="Attr"/>
        </method>
        <method name="setAttributeNS" type="void">
          <param name="namespaceURI" treat-null-as="EmptyString" type="DOMString"/>
          <param name="qualifiedName" type="DOMString"/>
          <param name="value" treat-null-as="EmptyString" type="DOMString"/>
        </method>
        <method name="setPointerCapture" type="void">
          <param name="pointerId" type="long"/>
        </method>
        <method name="webkitMatchesSelector" type="boolean">
          <param name="selectors" type="DOMString"/>
        </method>
        <method name="webkitRequestFullscreen" type="void"/>
        <method name="webkitRequestFullScreen" type="void"/>
      </methods>
      <properties>
        <property name="classList" content-attribute="class" content-attribute-reflects="1" content-attribute-value-syntax="space_separated_tokens" read-only="1" type="DOMTokenList"/>
        <property name="className" content-attribute="class" content-attribute-reflects="1" content-attribute-value-syntax="space_separated_tokens" type="DOMString"/>
        <property name="clientHeight" read-only="1" type="long"/>
        <property name="clientLeft" read-only="1" type="long"/>
        <property name="clientTop" read-only="1" type="long"/>
        <property name="clientWidth" read-only="1" type="long"/>
        <property name="id" content-attribute="id" content-attribute-reflects="1" type="DOMString"/>
        <property name="innerHTML" treat-null-as="EmptyString" type="DOMString"/>
        <property name="msContentZoomFactor" type="float"/>
        <property name="msRegionOverflow" read-only="1" type="DOMString"/>
        <property name="onariarequest" event-handler="ariarequest" type="EventHandler"/>
        <property name="oncommand" event-handler="command" type="EventHandler"/>
        <property name="ongotpointercapture" content-attribute="ongotpointercapture" content-attribute-value-syntax="javascript" event-handler="gotpointercapture" type="EventHandler"/>
        <property name="onlostpointercapture" content-attribute="onlostpointercapture" content-attribute-value-syntax="javascript" event-handler="lostpointercapture" type="EventHandler"/>
        <property name="onmsgesturechange" content-attribute="onmsgesturechange" content-attribute-value-syntax="javascript" event-handler="MSGestureChange" type="EventHandler"/>
        <property name="onmsgesturedoubletap" content-attribute="onmsgesturedoubletap" content-attribute-value-syntax="javascript" event-handler="MSGestureDoubleTap" type="EventHandler"/>
        <property name="onmsgestureend" content-attribute="onmsgestureend" content-attribute-value-syntax="javascript" event-handler="MSGestureEnd" type="EventHandler"/>
        <property name="onmsgesturehold" content-attribute="onmsgesturehold" content-attribute-value-syntax="javascript" event-handler="MSGestureHold" type="EventHandler"/>
        <property name="onmsgesturestart" content-attribute="onmsgesturestart" content-attribute-value-syntax="javascript" event-handler="MSGestureStart" type="EventHandler"/>
        <property name="onmsgesturetap" content-attribute="onmsgesturetap" content-attribute-value-syntax="javascript" event-handler="MSGestureTap" type="EventHandler"/>
        <property name="onmsgotpointercapture" content-attribute="onmsgotpointercapture" content-attribute-value-syntax="javascript" event-handler="MSGotPointerCapture" type="EventHandler"/>
        <property name="onmsinertiastart" content-attribute="onmsinertiastart" content-attribute-value-syntax="javascript" event-handler="MSInertiaStart" type="EventHandler"/>
        <property name="onmslostpointercapture" content-attribute="onmslostpointercapture" content-attribute-value-syntax="javascript" event-handler="MSLostPointerCapture" type="EventHandler"/>
        <property name="onmspointercancel" content-attribute="onmspointercancel" content-attribute-value-syntax="javascript" event-handler="MSPointerCancel" type="EventHandler"/>
        <property name="onmspointerdown" content-attribute="onmspointerdown" content-attribute-value-syntax="javascript" event-handler="MSPointerDown" type="EventHandler"/>
        <property name="onmspointerenter" content-attribute="onmspointerenter" content-attribute-value-syntax="javascript" event-handler="MSPointerEnter" type="EventHandler"/>
        <property name="onmspointerleave" content-attribute="onmspointerleave" content-attribute-value-syntax="javascript" event-handler="MSPointerLeave" type="EventHandler"/>
        <property name="onmspointermove" content-attribute="onmspointermove" content-attribute-value-syntax="javascript" event-handler="MSPointerMove" type="EventHandler"/>
        <property name="onmspointerout" content-attribute="onmspointerout" content-attribute-value-syntax="javascript" event-handler="MSPointerOut" type="EventHandler"/>
        <property name="onmspointerover" content-attribute="onmspointerover" content-attribute-value-syntax="javascript" event-handler="MSPointerOver" type="EventHandler"/>
        <property name="onmspointerup" content-attribute="onmspointerup" content-attribute-value-syntax="javascript" event-handler="MSPointerUp" type="EventHandler"/>
        <property name="ontouchcancel" content-attribute="ontouchcancel" content-attribute-value-syntax="javascript" event-handler="touchcancel" type="EventHandler"/>
        <property name="ontouchend" content-attribute="ontouchend" content-attribute-value-syntax="javascript" event-handler="touchend" type="EventHandler"/>
        <property name="ontouchmove" content-attribute="ontouchmove" content-attribute-value-syntax="javascript" event-handler="touchmove" type="EventHandler"/>
        <property name="ontouchstart" content-attribute="ontouchstart" content-attribute-value-syntax="javascript" event-handler="touchstart" type="EventHandler"/>
        <property name="onwebkitfullscreenchange" event-handler="webkitfullscreenchange" type="EventHandler"/>
        <property name="onwebkitfullscreenerror" event-handler="webkitfullscreenerror" type="EventHandler"/>
        <property name="outerHTML" treat-null-as="EmptyString" type="DOMString"/>
        <property name="prefix" nullable="1" read-only="1" type="DOMString"/>
        <property name="scrollHeight" read-only="1" type="long"/>
        <property name="scrollLeft" type="long"/>
        <property name="scrollTop" type="long"/>
        <property name="scrollWidth" read-only="1" type="long"/>
        <property name="tagName" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="ErrorEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="ErrorEventInit"/>
      </constructor>
      <methods>
        <method name="initErrorEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="messageArg" type="DOMString"/>
          <param name="filenameArg" type="DOMString"/>
          <param name="linenoArg" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="colno" read-only="1" type="unsigned long"/>
        <property name="error" nullable="1" read-only="1" type="any"/>
        <property name="filename" read-only="1" type="DOMString"/>
        <property name="lineno" read-only="1" type="unsigned long"/>
        <property name="message" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="Event" extends="Object">
      <constants>
        <constant name="AT_TARGET" type="unsigned short" value="2"/>
        <constant name="BUBBLING_PHASE" type="unsigned short" value="3"/>
        <constant name="CAPTURING_PHASE" type="unsigned short" value="1"/>
      </constants>
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="EventInit"/>
      </constructor>
      <methods>
        <method name="initEvent" type="void">
          <param name="eventTypeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
        </method>
        <method name="preventDefault" type="void"/>
        <method name="stopImmediatePropagation" type="void"/>
        <method name="stopPropagation" type="void"/>
      </methods>
      <properties>
        <property name="bubbles" read-only="1" type="boolean"/>
        <property name="cancelable" read-only="1" type="boolean"/>
        <property name="cancelBubble" type="boolean"/>
        <property name="currentTarget" read-only="1" type="EventTarget"/>
        <property name="defaultPrevented" read-only="1" type="boolean"/>
        <property name="eventPhase" read-only="1" type="unsigned short"/>
        <property name="isTrusted" read-only="1" type="boolean"/>
        <property name="returnValue" type="boolean"/>
        <property name="srcElement" nullable="1" read-only="1" type="Element"/>
        <property name="target" read-only="1" type="EventTarget"/>
        <property name="timeStamp" read-only="1" type="unsigned long long"/>
        <property name="type" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="EventTarget" extends="Object">
      <methods>
        <method name="addEventListener" type="void">
          <param name="type" type="DOMString"/>
          <param name="listener" type="EventListener"/>
          <param name="useCapture" type="boolean"/>
        </method>
        <method name="dispatchEvent" type="boolean">
          <param name="evt" type="Event"/>
        </method>
        <method name="removeEventListener" type="void">
          <param name="type" type="DOMString"/>
          <param name="listener" type="EventListener"/>
          <param name="useCapture" type="boolean"/>
        </method>
      </methods>
    </interface>
    <interface name="EXT_frag_depth" extends="Object"/>
    <interface name="EXT_texture_filter_anisotropic" extends="Object">
      <constants>
        <constant name="MAX_TEXTURE_MAX_ANISOTROPY_EXT" type="unsigned long" type-original="GLenum" value="0x84FF"/>
        <constant name="TEXTURE_MAX_ANISOTROPY_EXT" type="unsigned long" type-original="GLenum" value="0x84FE"/>
      </constants>
    </interface>
    <interface name="ExtensionScriptApis" extends="Object">
      <methods>
        <method name="extensionIdToShortId" type="long">
          <param name="extensionId" type="DOMString"/>
        </method>
        <method name="fireExtensionApiTelemetry" type="void">
          <param name="functionName" type="DOMString"/>
          <param name="isSucceeded" type="boolean"/>
          <param name="isSupported" type="boolean"/>
        </method>
        <method name="genericFunction" type="void">
          <param name="routerAddress" type="object"/>
          <param name="parameters" optional="1" type="DOMString"/>
          <param name="callbackId" optional="1" type="long"/>
        </method>
        <method name="genericSynchronousFunction" type="DOMString">
          <param name="functionId" type="long"/>
          <param name="parameters" optional="1" type="DOMString"/>
        </method>
        <method name="getExtensionId" type="DOMString"/>
        <method name="registerGenericFunctionCallbackHandler" type="void">
          <param name="callbackHandler" type="function"/>
        </method>
        <method name="registerGenericPersistentCallbackHandler" type="void">
          <param name="callbackHandler" type="function"/>
        </method>
      </methods>
    </interface>
    <interface name="External" extends="Object"/>
    <interface name="File" extends="Blob">
      <properties>
        <property name="lastModifiedDate" read-only="1" type="any"/>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="webkitRelativePath" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="FileList" extends="Object">
      <methods>
        <method name="item" getter="1" type="File">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="FileReader" extends="EventTarget">
      <constructor/>
      <events>
        <event name="load" dispatch="sync" follows="progress" precedes="loadend" skips-window="1" type="ProgressEvent"/>
        <event name="loadstart" dispatch="sync" precedes="progress" skips-window="1" type="ProgressEvent"/>
        <event name="loadend" dispatch="sync" follows="load" skips-window="1" type="ProgressEvent"/>
        <event name="progress" dispatch="sync" follows="loadstart" precedes="load" skips-window="1" type="ProgressEvent"/>
        <event name="abort" dispatch="sync" skips-window="1" type="ProgressEvent"/>
        <event name="error" dispatch="sync" skips-window="1" type="ProgressEvent"/>
      </events>
      <implements>MSBaseReader</implements>
      <methods>
        <method name="readAsArrayBuffer" type="void">
          <param name="blob" type="Blob"/>
        </method>
        <method name="readAsBinaryString" type="void">
          <param name="blob" type="Blob"/>
        </method>
        <method name="readAsDataURL" type="void">
          <param name="blob" type="Blob"/>
        </method>
        <method name="readAsText" type="void">
          <param name="blob" type="Blob"/>
          <param name="encoding" optional="1" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="error" read-only="1" type="DOMError"/>
      </properties>
    </interface>
    <interface name="FocusEvent" extends="UIEvent">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="FocusEventInit"/>
      </constructor>
      <methods>
        <method name="initFocusEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="viewArg" type="Window"/>
          <param name="detailArg" type="long"/>
          <param name="relatedTargetArg" type="EventTarget"/>
        </method>
      </methods>
      <properties>
        <property name="relatedTarget" read-only="1" type="EventTarget"/>
      </properties>
    </interface>
    <interface name="FocusNavigationEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="FocusNavigationEventInit"/>
      </constructor>
      <methods>
        <method name="requestFocus" type="void"/>
      </methods>
      <properties>
        <property name="navigationReason" read-only="1" type="NavigationReason"/>
        <property name="originHeight" read-only="1" type="float"/>
        <property name="originLeft" read-only="1" type="float"/>
        <property name="originTop" read-only="1" type="float"/>
        <property name="originWidth" read-only="1" type="float"/>
      </properties>
    </interface>
    <interface name="FormData" extends="Object">
      <constructor/>
      <methods>
        <method name="append" type="void">
          <param name="name" type="any"/>
          <param name="value" type="any"/>
          <param name="blobName" optional="1" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="GainNode" extends="AudioNode">
      <properties>
        <property name="gain" read-only="1" type="AudioParam"/>
      </properties>
    </interface>
    <interface name="Gamepad" extends="Object">
      <properties>
        <property name="axes" read-only="1" type="sequence&lt;double&gt;"/>
        <property name="buttons" read-only="1" type="sequence&lt;GamepadButton&gt;"/>
        <property name="connected" read-only="1" type="boolean"/>
        <property name="id" read-only="1" type="DOMString"/>
        <property name="index" read-only="1" type="long"/>
        <property name="mapping" read-only="1" type="DOMString"/>
        <property name="timestamp" read-only="1" type="DOMHighResTimeStamp"/>
      </properties>
    </interface>
    <interface name="GamepadButton" extends="Object">
      <properties>
        <property name="pressed" read-only="1" type="boolean"/>
        <property name="value" read-only="1" type="double"/>
      </properties>
    </interface>
    <interface name="GamepadEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="GamepadEventInit"/>
      </constructor>
      <properties>
        <property name="gamepad" read-only="1" type="Gamepad"/>
      </properties>
    </interface>
    <interface name="Geolocation" extends="Object">
      <methods>
        <method name="clearWatch" type="void">
          <param name="watchId" type="long"/>
        </method>
        <method name="getCurrentPosition" type="void">
          <param name="successCallback" type="PositionCallback"/>
          <param name="errorCallback" default="0" optional="1" type="PositionErrorCallback"/>
          <param name="options" default="0" optional="1" type="PositionOptions"/>
        </method>
        <method name="watchPosition" type="long">
          <param name="successCallback" type="PositionCallback"/>
          <param name="errorCallback" default="0" optional="1" type="PositionErrorCallback"/>
          <param name="options" default="0" optional="1" type="PositionOptions"/>
        </method>
      </methods>
    </interface>
    <interface name="HashChangeEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="HashChangeEventInit"/>
      </constructor>
      <properties>
        <property name="newURL" nullable="1" read-only="1" type="DOMString"/>
        <property name="oldURL" nullable="1" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="Headers" extends="Object">
      <constructor>
        <param name="init" optional="1" type="(Headers or sequence&lt;sequence&lt;DOMString&gt;&gt;)" type-original="HeadersInit"/>
      </constructor>
      <methods>
        <method name="append" type="void">
          <param name="name" type="DOMString" type-original="ByteString"/>
          <param name="value" type="DOMString" type-original="ByteString"/>
        </method>
        <method name="delete" type="void">
          <param name="name" type="DOMString" type-original="ByteString"/>
        </method>
        <method name="forEach" type="void">
          <param name="callback" type="ForEachCallback"/>
        </method>
        <method name="get" nullable="1" type="DOMString" type-original="ByteString">
          <param name="name" type="DOMString" type-original="ByteString"/>
        </method>
        <method name="has" type="boolean">
          <param name="name" type="DOMString" type-original="ByteString"/>
        </method>
        <method name="set" type="void">
          <param name="name" type="DOMString" type-original="ByteString"/>
          <param name="value" type="DOMString" type-original="ByteString"/>
        </method>
      </methods>
    </interface>
    <interface name="History" extends="Object">
      <methods>
        <method name="back" type="void">
          <param name="distance" optional="1" type="any"/>
        </method>
        <method name="forward" type="void">
          <param name="distance" optional="1" type="any"/>
        </method>
        <method name="go" type="void">
          <param name="delta" optional="1" type="any"/>
        </method>
        <method name="pushState" type="void">
          <param name="statedata" type="any"/>
          <param name="title" optional="1" type="DOMString"/>
          <param name="url" optional="1" type="DOMString"/>
        </method>
        <method name="replaceState" type="void">
          <param name="statedata" type="any"/>
          <param name="title" optional="1" type="DOMString"/>
          <param name="url" optional="1" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="long"/>
        <property name="state" read-only="1" type="any"/>
      </properties>
    </interface>
    <interface name="HTMLAllCollection" extends="Object">
      <anonymous-methods>
        <method getter="1" nullable="1" type="Element">
          <param name="index" type="unsigned long"/>
        </method>
      </anonymous-methods>
      <methods>
        <method name="item" legacy-caller="1" nullable="1" type="(HTMLCollection or Element)">
          <param name="nameOrIndex" optional="1" type="DOMString"/>
        </method>
        <method name="namedItem" getter="1" nullable="1" type="(HTMLCollection or Element)">
          <param name="name" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="HTMLAnchorElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="a" namespace="HTML"/>
      <methods>
        <method name="toString" stringifier="1" type="DOMString"/>
      </methods>
      <properties>
        <property name="charset" content-attribute="charset" content-attribute-reflects="1" content-attribute-value-syntax="character_encoding" type="DOMString"/>
        <property name="coords" content-attribute="coords" content-attribute-reflects="1" content-attribute-value-syntax="comma_separated_signed_integers" type="DOMString"/>
        <property name="download" content-attribute="download" content-attribute-reflects="1" type="DOMString"/>
        <property name="hash" type="DOMString"/>
        <property name="host" type="DOMString"/>
        <property name="hostname" type="DOMString"/>
        <property name="href" content-attribute="href" content-attribute-reflects="1" content-attribute-value-syntax="url" stringifier="1" type="DOMString"/>
        <property name="hreflang" content-attribute="hreflang" content-attribute-reflects="1" content-attribute-value-syntax="bcp47_lang" type="DOMString"/>
        <property name="Methods" type="DOMString"/>
        <property name="mimeType" read-only="1" type="DOMString"/>
        <property name="name" content-attribute="name" content-attribute-reflects="1" type="DOMString"/>
        <property name="nameProp" read-only="1" type="DOMString"/>
        <property name="pathname" type="DOMString"/>
        <property name="port" type="DOMString"/>
        <property name="protocol" type="DOMString"/>
        <property name="protocolLong" read-only="1" type="DOMString"/>
        <property name="rel" content-attribute="rel" content-attribute-enum-values="alternate appendix bookmark chapter contents copyright dns-prefetch entry-content feedurl glossary help index next prefetch preload prev section start subsection" content-attribute-reflects="1" content-attribute-value-syntax="space_separated_enums" type="DOMString"/>
        <property name="rev" content-attribute="rev" content-attribute-enum-values="alternate appendix bookmark chapter contents copyright glossary help index next prev section start stylesheet subsection" content-attribute-reflects="1" content-attribute-value-syntax="space_separated_enums" type="DOMString"/>
        <property name="search" type="DOMString"/>
        <property name="shape" content-attribute="shape" content-attribute-enum-values="circ circle poly polygon rect rectangle" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="target" content-attribute="target" content-attribute-enum-values="_blank _self _parent _top" content-attribute-reflects="1" content-attribute-value-syntax="name_ref" type="DOMString"/>
        <property name="text" treat-null-as="EmptyString" type="DOMString"/>
        <property name="type" content-attribute="type" content-attribute-reflects="1" content-attribute-value-syntax="mime_type" type="DOMString"/>
        <property name="urn" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLAppletElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="applet" namespace="HTML"/>
      <properties>
        <property name="align" content-attribute="align" content-attribute-enum-values="absbottom absmiddle baseline bottom left middle right texttop top" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="alt" content-attribute="alt" content-attribute-reflects="1" type="DOMString"/>
        <property name="altHtml" type="DOMString"/>
        <property name="archive" content-attribute="archive" content-attribute-reflects="1" type="DOMString"/>
        <property name="BaseHref" read-only="1" type="DOMString"/>
        <property name="border" content-attribute="border" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="code" content-attribute="code" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="codeBase" content-attribute="codebase" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="codeType" type="DOMString"/>
        <property name="contentDocument" read-only="1" type="Document"/>
        <property name="data" type="DOMString"/>
        <property name="declare" type="boolean"/>
        <property name="form" read-only="1" type="HTMLFormElement"/>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="hspace" content-attribute="hspace" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="long"/>
        <property name="name" content-attribute="name" content-attribute-enum-values="_blank _self _parent _top" content-attribute-reflects="1" content-attribute-value-syntax="name_ref" type="DOMString"/>
        <property name="object" nullable="1" type="DOMString"/>
        <property name="standby" type="DOMString"/>
        <property name="type" type="DOMString"/>
        <property name="useMap" type="DOMString"/>
        <property name="vspace" content-attribute="vspace" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="long"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="long"/>
      </properties>
    </interface>
    <interface name="HTMLAreaElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="area" html-self-closing="1" namespace="HTML"/>
      <methods>
        <method name="toString" stringifier="1" type="DOMString"/>
      </methods>
      <properties>
        <property name="alt" content-attribute="alt" content-attribute-reflects="1" type="DOMString"/>
        <property name="coords" content-attribute="coords" content-attribute-reflects="1" content-attribute-value-syntax="comma_separated_signed_integers" type="DOMString"/>
        <property name="download" content-attribute="download" content-attribute-reflects="1" type="DOMString"/>
        <property name="hash" type="DOMString"/>
        <property name="host" type="DOMString"/>
        <property name="hostname" type="DOMString"/>
        <property name="href" content-attribute="href" content-attribute-reflects="1" content-attribute-value-syntax="url" stringifier="1" type="DOMString"/>
        <property name="noHref" content-attribute="nohref" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="pathname" type="DOMString"/>
        <property name="port" type="DOMString"/>
        <property name="protocol" type="DOMString"/>
        <property name="rel" content-attribute="rel" content-attribute-enum-values="alternate appendix bookmark chapter contents copyright dns-prefetch entry-content feedurl glossary help index next prefetch preload prev section start subsection" content-attribute-reflects="1" content-attribute-value-syntax="space_separated_enums" type="DOMString"/>
        <property name="search" type="DOMString"/>
        <property name="shape" content-attribute="shape" content-attribute-enum-values="circ circle poly polygon rect rectangle" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="target" content-attribute="target" content-attribute-enum-values="_blank _self _parent _top" content-attribute-reflects="1" content-attribute-value-syntax="name_ref" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLAreasCollection" extends="HTMLCollection"/>
    <interface name="HTMLAudioElement" extends="HTMLMediaElement">
      <element name="audio" namespace="HTML"/>
      <named-constructor name="Audio">
        <param name="src" optional="1" type="DOMString"/>
      </named-constructor>
    </interface>
    <interface name="HTMLBaseElement" extends="HTMLElement">
      <element name="base" html-self-closing="1" namespace="HTML"/>
      <properties>
        <property name="href" content-attribute="href" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="target" content-attribute="target" content-attribute-enum-values="_blank _self _parent _top" content-attribute-reflects="1" content-attribute-value-syntax="name_ref" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLBaseFontElement" extends="HTMLElement">
      <element name="basefont" html-self-closing="1" namespace="HTML"/>
      <implements>DOML2DeprecatedColorProperty</implements>
      <properties>
        <property name="face" content-attribute="face" content-attribute-reflects="1" content-attribute-value-syntax="font_family" type="DOMString"/>
        <property name="size" content-attribute="size" content-attribute-reflects="1" content-attribute-value-syntax="1_or_greater_integer" type="long"/>
      </properties>
    </interface>
    <interface name="HTMLBodyElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="body" namespace="HTML"/>
      <events>
        <event name="offline" bubbles="1" dispatch="async" type="Event"/>
        <event name="online" bubbles="1" dispatch="async" type="Event"/>
      </events>
      <properties>
        <property name="aLink" content-attribute="alink" content-attribute-reflects="1" content-attribute-value-syntax="simple_color" type="any"/>
        <property name="background" content-attribute="background" content-attribute-reflects="1" content-attribute-value-syntax="simple_color" type="DOMString"/>
        <property name="bgColor" content-attribute="bgcolor" content-attribute-reflects="1" content-attribute-value-syntax="simple_color" type="any"/>
        <property name="bgProperties" type="DOMString"/>
        <property name="link" content-attribute="link" content-attribute-reflects="1" content-attribute-value-syntax="simple_color" type="any"/>
        <property name="noWrap" content-attribute="nowrap" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="onafterprint" content-attribute="onafterprint" content-attribute-value-syntax="javascript" event-handler="afterprint" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onbeforeprint" content-attribute="onbeforeprint" content-attribute-value-syntax="javascript" event-handler="beforeprint" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onbeforeunload" content-attribute="onbeforeunload" content-attribute-value-syntax="javascript" event-handler="beforeunload" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onblur" event-handler="blur" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onerror" event-handler="error" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onfocus" event-handler="focus" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onhashchange" content-attribute="onhashchange" content-attribute-value-syntax="javascript" event-handler="hashchange" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onload" event-handler="load" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onmessage" content-attribute="onmessage" content-attribute-value-syntax="javascript" event-handler="message" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onoffline" content-attribute="onoffline" content-attribute-value-syntax="javascript" event-handler="offline" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="ononline" content-attribute="ononline" content-attribute-value-syntax="javascript" event-handler="online" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onorientationchange" content-attribute="onorientationchange" content-attribute-value-syntax="javascript" event-handler="orientationchange" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onpagehide" content-attribute="onpagehide" content-attribute-value-syntax="javascript" event-handler="pagehide" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onpageshow" content-attribute="onpageshow" content-attribute-value-syntax="javascript" event-handler="pageshow" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onpopstate" content-attribute="onpopstate" content-attribute-value-syntax="javascript" event-handler="popstate" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onresize" event-handler="resize" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onscroll" event-handler="scroll" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onstorage" content-attribute="onstorage" content-attribute-value-syntax="javascript" event-handler="storage" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onunload" content-attribute="onunload" content-attribute-value-syntax="javascript" event-handler="unload" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="text" content-attribute="text" content-attribute-reflects="1" content-attribute-value-syntax="simple_color" type="any"/>
        <property name="vLink" content-attribute="vlink" content-attribute-reflects="1" content-attribute-value-syntax="simple_color" type="any"/>
      </properties>
    </interface>
    <interface name="HTMLBRElement" extends="HTMLElement">
      <element name="br" html-self-closing="1" namespace="HTML"/>
      <properties>
        <property name="clear" content-attribute="clear" content-attribute-enum-values="all both left right" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLButtonElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="button" namespace="HTML"/>
      <methods>
        <method name="checkValidity" type="boolean"/>
        <method name="setCustomValidity" type="void">
          <param name="error" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="autofocus" content-attribute="autofocus" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="disabled" content-attribute="disabled" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="form" read-only="1" type="HTMLFormElement"/>
        <property name="formAction" content-attribute="formaction" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="formEnctype" content-attribute="formenctype" content-attribute-enum-values="application/x-www-form-urlencoded multipart/form-data text/plain" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="formMethod" content-attribute="formmethod" content-attribute-enum-values="GET POST" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="formNoValidate" content-attribute="formnovalidate" content-attribute-boolean="1" content-attribute-reflects="1" type="DOMString"/>
        <property name="formTarget" content-attribute="formtarget" content-attribute-enum-values="_blank _self _parent _top" content-attribute-reflects="1" content-attribute-value-syntax="name_ref" type="DOMString"/>
        <property name="name" content-attribute="name" content-attribute-reflects="1" type="DOMString"/>
        <property name="status" type="any"/>
        <property name="type" content-attribute="type" content-attribute-enum-values="button submit reset" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="validationMessage" read-only="1" type="DOMString"/>
        <property name="validity" read-only="1" type="ValidityState"/>
        <property name="value" content-attribute="value" content-attribute-reflects="1" type="DOMString"/>
        <property name="willValidate" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="HTMLCanvasElement" extends="HTMLElement">
      <element name="canvas" namespace="HTML"/>
      <events>
        <event name="webglcontextlost" dispatch="async" precedes="webglcontextrestored" type="WebGLContextEvent"/>
        <event name="webglcontextrestored" dispatch="async" follows="webglcontextlost" type="WebGLContextEvent"/>
        <event name="webglcontextcreationerror" dispatch="async" type="WebGLContextEvent"/>
      </events>
      <methods>
        <method name="getContext" type="(CanvasRenderingContext2D or WebGLRenderingContext)">
          <param name="contextId" type="DOMString"/>
          <param name="args" type="any" variadic="1"/>
        </method>
        <method name="msToBlob" type="Blob"/>
        <method name="toDataURL" type="DOMString">
          <param name="type" default="&quot;image/png&quot;" optional="1" type="DOMString"/>
          <param name="args" type="any" variadic="1"/>
        </method>
      </methods>
      <properties>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="unsigned long"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="HTMLCollection" extends="Object">
      <methods>
        <method name="item" getter="1" nullable="1" type="Element">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="namedItem" getter="1" nullable="1" type="Element">
          <param name="name" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="HTMLDataElement" extends="HTMLElement">
      <element name="data" namespace="HTML"/>
      <properties>
        <property name="value" content-attribute="value" content-attribute-reflects="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLDataListElement" extends="HTMLElement">
      <element name="datalist" namespace="HTML"/>
      <properties>
        <property name="options" read-only="1" type="HTMLCollection"/>
      </properties>
    </interface>
    <interface name="HTMLDirectoryElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="dir" namespace="HTML"/>
      <properties>
        <property name="compact" content-attribute="compact" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="HTMLDivElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="div" namespace="HTML"/>
      <properties>
        <property name="align" content-attribute="align" content-attribute-enum-values="center justify left right" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="noWrap" content-attribute="nowrap" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="HTMLDListElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="dl" namespace="HTML"/>
      <properties>
        <property name="compact" content-attribute="compact" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="HTMLDocument" extends="Document"/>
    <interface name="HTMLElement" extends="Element">
      <anonymous-content-attributes>
        <parsedattribute name="x-ms-acceleratorkey"/>
        <parsedattribute enum-values="all none phone" name="x-ms-format-detection" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="noframes" namespace="HTML"/>
      <element name="noscript" namespace="HTML"/>
      <element name="wbr" html-self-closing="1" namespace="HTML"/>
      <element name="section" namespace="HTML"/>
      <element name="nav" namespace="HTML"/>
      <element name="article" namespace="HTML"/>
      <element name="aside" namespace="HTML"/>
      <element name="hgroup" namespace="HTML"/>
      <element name="header" namespace="HTML"/>
      <element name="footer" namespace="HTML"/>
      <element name="figure" namespace="HTML"/>
      <element name="figcaption" namespace="HTML"/>
      <element name="mark" namespace="HTML"/>
      <element name="dd" namespace="HTML"/>
      <element name="dt" namespace="HTML"/>
      <element name="abbr" namespace="HTML"/>
      <element name="acronym" namespace="HTML"/>
      <element name="b" namespace="HTML"/>
      <element name="bdo" namespace="HTML"/>
      <element name="big" namespace="HTML"/>
      <element name="cite" namespace="HTML"/>
      <element name="code" namespace="HTML"/>
      <element name="dfn" namespace="HTML"/>
      <element name="em" namespace="HTML"/>
      <element name="i" namespace="HTML"/>
      <element name="kbd" namespace="HTML"/>
      <element name="nobr" namespace="HTML"/>
      <element name="rt" namespace="HTML"/>
      <element name="ruby" namespace="HTML"/>
      <element name="s" namespace="HTML"/>
      <element name="samp" namespace="HTML"/>
      <element name="small" namespace="HTML"/>
      <element name="strike" namespace="HTML"/>
      <element name="strong" namespace="HTML"/>
      <element name="sub" namespace="HTML"/>
      <element name="sup" namespace="HTML"/>
      <element name="tt" namespace="HTML"/>
      <element name="u" namespace="HTML"/>
      <element name="var" namespace="HTML"/>
      <element name="address" namespace="HTML"/>
      <element name="center" namespace="HTML"/>
      <element name="keygen" html-self-closing="1" namespace="HTML"/>
      <element name="plaintext" namespace="HTML"/>
      <methods>
        <method name="blur" type="void"/>
        <method name="click" type="void"/>
        <method name="dragDrop" type="boolean"/>
        <method name="focus" type="void"/>
        <method name="getElementsByClassName" type="NodeList">
          <param name="classNames" type="DOMString"/>
        </method>
        <method name="insertAdjacentElement" type="Element">
          <param name="position" type="DOMString"/>
          <param name="insertedElement" type="Element"/>
        </method>
        <method name="insertAdjacentHTML" type="void">
          <param name="where" type="DOMString"/>
          <param name="html" type="DOMString"/>
        </method>
        <method name="insertAdjacentText" type="void">
          <param name="where" type="DOMString"/>
          <param name="text" type="DOMString"/>
        </method>
        <method name="msGetInputContext" type="MSInputMethodContext"/>
        <method name="scrollIntoView" type="void">
          <param name="top" default="VARIANT_TRUE" optional="1" type="boolean"/>
        </method>
      </methods>
      <properties>
        <property name="accessKey" content-attribute="accesskey" content-attribute-reflects="1" content-attribute-value-syntax="space_separated_tokens" type="DOMString"/>
        <property name="children" read-only="1" type="HTMLCollection"/>
        <property name="contentEditable" content-attribute="contenteditable" content-attribute-enum-values="true false" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="dataset" content-attribute="data-" content-attribute-reflects="1" read-only="1" type="DOMStringMap"/>
        <property name="dir" content-attribute="dir" content-attribute-enum-values="ltr rtl auto" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="draggable" content-attribute="draggable" content-attribute-enum-values="true false" content-attribute-value-syntax="enum" type="boolean"/>
        <property name="hidden" type="boolean"/>
        <property name="hideFocus" content-attribute="hidefocus" content-attribute-enum-values="false true" content-attribute-value-syntax="enum" type="boolean"/>
        <property name="innerText" type="DOMString"/>
        <property name="isContentEditable" read-only="1" type="boolean"/>
        <property name="lang" content-attribute="lang" content-attribute-aliases="language" content-attribute-reflects="1" content-attribute-value-syntax="bcp47_lang" type="DOMString"/>
        <property name="offsetHeight" read-only="1" type="long"/>
        <property name="offsetLeft" read-only="1" type="long"/>
        <property name="offsetParent" read-only="1" type="Element"/>
        <property name="offsetTop" read-only="1" type="long"/>
        <property name="offsetWidth" read-only="1" type="long"/>
        <property name="onabort" content-attribute="onabort" content-attribute-value-syntax="javascript" event-handler="abort" type="EventHandler"/>
        <property name="onactivate" content-attribute="onactivate" content-attribute-value-syntax="javascript" event-handler="activate" type="EventHandler"/>
        <property name="onbeforeactivate" content-attribute="onbeforeactivate" content-attribute-value-syntax="javascript" event-handler="beforeactivate" type="EventHandler"/>
        <property name="onbeforecopy" content-attribute="onbeforecopy" content-attribute-value-syntax="javascript" event-handler="beforecopy" type="EventHandler"/>
        <property name="onbeforecut" content-attribute="onbeforecut" content-attribute-value-syntax="javascript" event-handler="beforecut" type="EventHandler"/>
        <property name="onbeforedeactivate" content-attribute="onbeforedeactivate" content-attribute-value-syntax="javascript" event-handler="beforedeactivate" type="EventHandler"/>
        <property name="onbeforepaste" content-attribute="onbeforepaste" content-attribute-value-syntax="javascript" event-handler="beforepaste" type="EventHandler"/>
        <property name="onblur" content-attribute="onblur" content-attribute-value-syntax="javascript" event-handler="blur" type="EventHandler"/>
        <property name="oncanplay" content-attribute="oncanplay" content-attribute-value-syntax="javascript" event-handler="canplay" type="EventHandler"/>
        <property name="oncanplaythrough" content-attribute="oncanplaythrough" content-attribute-value-syntax="javascript" event-handler="canplaythrough" type="EventHandler"/>
        <property name="onchange" content-attribute="onchange" content-attribute-value-syntax="javascript" event-handler="change" type="EventHandler"/>
        <property name="onclick" content-attribute="onclick" content-attribute-value-syntax="javascript" event-handler="click" type="EventHandler"/>
        <property name="oncontextmenu" content-attribute="oncontextmenu" content-attribute-value-syntax="javascript" event-handler="contextmenu" type="EventHandler"/>
        <property name="oncopy" content-attribute="oncopy" content-attribute-value-syntax="javascript" event-handler="copy" type="EventHandler"/>
        <property name="oncuechange" event-handler="cuechange" type="EventHandler"/>
        <property name="oncut" content-attribute="oncut" content-attribute-value-syntax="javascript" event-handler="cut" type="EventHandler"/>
        <property name="ondblclick" content-attribute="ondblclick" content-attribute-value-syntax="javascript" event-handler="dblclick" type="EventHandler"/>
        <property name="ondeactivate" content-attribute="ondeactivate" content-attribute-value-syntax="javascript" event-handler="deactivate" type="EventHandler"/>
        <property name="ondrag" content-attribute="ondrag" content-attribute-value-syntax="javascript" event-handler="drag" type="EventHandler"/>
        <property name="ondragend" content-attribute="ondragend" content-attribute-value-syntax="javascript" event-handler="dragend" type="EventHandler"/>
        <property name="ondragenter" content-attribute="ondragenter" content-attribute-value-syntax="javascript" event-handler="dragenter" type="EventHandler"/>
        <property name="ondragleave" content-attribute="ondragleave" content-attribute-value-syntax="javascript" event-handler="dragleave" type="EventHandler"/>
        <property name="ondragover" content-attribute="ondragover" content-attribute-value-syntax="javascript" event-handler="dragover" type="EventHandler"/>
        <property name="ondragstart" content-attribute="ondragstart" content-attribute-value-syntax="javascript" event-handler="dragstart" type="EventHandler"/>
        <property name="ondrop" content-attribute="ondrop" content-attribute-value-syntax="javascript" event-handler="drop" type="EventHandler"/>
        <property name="ondurationchange" content-attribute="ondurationchange" content-attribute-value-syntax="javascript" event-handler="durationchange" type="EventHandler"/>
        <property name="onemptied" content-attribute="onemptied" content-attribute-value-syntax="javascript" event-handler="emptied" type="EventHandler"/>
        <property name="onended" content-attribute="onended" content-attribute-value-syntax="javascript" event-handler="ended" type="EventHandler"/>
        <property name="onerror" content-attribute="onerror" content-attribute-value-syntax="javascript" event-handler="error" type="EventHandler"/>
        <property name="onfocus" content-attribute="onfocus" content-attribute-value-syntax="javascript" event-handler="focus" type="EventHandler"/>
        <property name="oninput" content-attribute="oninput" content-attribute-value-syntax="javascript" event-handler="input" type="EventHandler"/>
        <property name="oninvalid" event-handler="invalid" type="EventHandler"/>
        <property name="onkeydown" content-attribute="onkeydown" content-attribute-value-syntax="javascript" event-handler="keydown" type="EventHandler"/>
        <property name="onkeypress" content-attribute="onkeypress" content-attribute-value-syntax="javascript" event-handler="keypress" type="EventHandler"/>
        <property name="onkeyup" content-attribute="onkeyup" content-attribute-value-syntax="javascript" event-handler="keyup" type="EventHandler"/>
        <property name="onload" content-attribute="onload" content-attribute-value-syntax="javascript" event-handler="load" type="EventHandler"/>
        <property name="onloadeddata" content-attribute="onloadeddata" content-attribute-value-syntax="javascript" event-handler="loadeddata" type="EventHandler"/>
        <property name="onloadedmetadata" content-attribute="onloadedmetadata" content-attribute-value-syntax="javascript" event-handler="loadedmetadata" type="EventHandler"/>
        <property name="onloadstart" content-attribute="onloadstart" content-attribute-value-syntax="javascript" event-handler="loadstart" type="EventHandler"/>
        <property name="onmousedown" content-attribute="onmousedown" content-attribute-value-syntax="javascript" event-handler="mousedown" type="EventHandler"/>
        <property name="onmouseenter" content-attribute="onmouseenter" content-attribute-value-syntax="javascript" event-handler="mouseenter" type="EventHandler"/>
        <property name="onmouseleave" content-attribute="onmouseleave" content-attribute-value-syntax="javascript" event-handler="mouseleave" type="EventHandler"/>
        <property name="onmousemove" content-attribute="onmousemove" content-attribute-value-syntax="javascript" event-handler="mousemove" type="EventHandler"/>
        <property name="onmouseout" content-attribute="onmouseout" content-attribute-value-syntax="javascript" event-handler="mouseout" type="EventHandler"/>
        <property name="onmouseover" content-attribute="onmouseover" content-attribute-value-syntax="javascript" event-handler="mouseover" type="EventHandler"/>
        <property name="onmouseup" content-attribute="onmouseup" content-attribute-value-syntax="javascript" event-handler="mouseup" type="EventHandler"/>
        <property name="onmousewheel" content-attribute="onmousewheel" content-attribute-value-syntax="javascript" event-handler="mousewheel" type="EventHandler"/>
        <property name="onmscontentzoom" content-attribute="onmscontentzoom" content-attribute-value-syntax="javascript" event-handler="MSContentZoom" type="EventHandler"/>
        <property name="onmsmanipulationstatechanged" content-attribute="onmsmanipulationstatechanged" content-attribute-value-syntax="javascript" event-handler="MSManipulationStateChanged" type="EventHandler"/>
        <property name="onpaste" content-attribute="onpaste" content-attribute-value-syntax="javascript" event-handler="paste" type="EventHandler"/>
        <property name="onpause" content-attribute="onpause" content-attribute-value-syntax="javascript" event-handler="pause" type="EventHandler"/>
        <property name="onplay" content-attribute="onplay" content-attribute-value-syntax="javascript" event-handler="play" type="EventHandler"/>
        <property name="onplaying" content-attribute="onplaying" content-attribute-value-syntax="javascript" event-handler="playing" type="EventHandler"/>
        <property name="onprogress" content-attribute="onprogress" content-attribute-value-syntax="javascript" event-handler="progress" type="EventHandler"/>
        <property name="onratechange" content-attribute="onratechange" content-attribute-value-syntax="javascript" event-handler="ratechange" type="EventHandler"/>
        <property name="onreset" content-attribute="onreset" content-attribute-value-syntax="javascript" event-handler="reset" type="EventHandler"/>
        <property name="onscroll" content-attribute="onscroll" content-attribute-value-syntax="javascript" event-handler="scroll" type="EventHandler"/>
        <property name="onseeked" content-attribute="onseeked" content-attribute-value-syntax="javascript" event-handler="seeked" type="EventHandler"/>
        <property name="onseeking" content-attribute="onseeking" content-attribute-value-syntax="javascript" event-handler="seeking" type="EventHandler"/>
        <property name="onselect" content-attribute="onselect" content-attribute-value-syntax="javascript" event-handler="select" type="EventHandler"/>
        <property name="onselectstart" content-attribute="onselectstart" content-attribute-value-syntax="javascript" event-handler="selectstart" type="EventHandler"/>
        <property name="onstalled" content-attribute="onstalled" content-attribute-value-syntax="javascript" event-handler="stalled" type="EventHandler"/>
        <property name="onsubmit" content-attribute="onsubmit" content-attribute-value-syntax="javascript" event-handler="submit" type="EventHandler"/>
        <property name="onsuspend" content-attribute="onsuspend" content-attribute-value-syntax="javascript" event-handler="suspend" type="EventHandler"/>
        <property name="ontimeupdate" content-attribute="ontimeupdate" content-attribute-value-syntax="javascript" event-handler="timeupdate" type="EventHandler"/>
        <property name="onvolumechange" content-attribute="onvolumechange" content-attribute-value-syntax="javascript" event-handler="volumechange" type="EventHandler"/>
        <property name="onwaiting" content-attribute="onwaiting" content-attribute-value-syntax="javascript" event-handler="waiting" type="EventHandler"/>
        <property name="outerText" type="DOMString"/>
        <property name="spellcheck" content-attribute="spellcheck" content-attribute-enum-values="true false" content-attribute-value-syntax="enum" type="boolean"/>
        <property name="style" content-attribute="style" content-attribute-value-syntax="css" read-only="1" type="CSSStyleDeclaration"/>
        <property name="tabIndex" content-attribute="tabindex" content-attribute-reflects="1" content-attribute-value-syntax="signed_integer" type="short"/>
        <property name="title" content-attribute="title" content-attribute-reflects="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLEmbedElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="embed" html-self-closing="1" namespace="HTML"/>
      <implements>GetSVGDocument</implements>
      <properties>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="hidden" content-attribute="hidden" content-attribute-enum-values="false true" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="boolean"/>
        <property name="msPlayToDisabled" content-attribute="x-ms-playtodisabled" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="msPlayToPreferredSourceUri" content-attribute="x-ms-playtopreferredsourceuri" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="msPlayToPrimary" content-attribute="x-ms-playtoprimary" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="msPlayToSource" read-only="1" type="any"/>
        <property name="name" content-attribute="name" content-attribute-enum-values="_blank _self _parent _top" content-attribute-reflects="1" content-attribute-value-syntax="name_ref" type="DOMString"/>
        <property name="palette" content-attribute="palette" content-attribute-reflects="1" read-only="1" type="DOMString"/>
        <property name="pluginspage" content-attribute="pluginspage" content-attribute-reflects="1" content-attribute-value-syntax="url" read-only="1" type="DOMString"/>
        <property name="readyState" read-only="1" type="DOMString"/>
        <property name="src" content-attribute="src" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="units" content-attribute="units" content-attribute-enum-values="px em" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLFieldSetElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="fieldset" namespace="HTML"/>
      <methods>
        <method name="checkValidity" type="boolean"/>
        <method name="setCustomValidity" type="void">
          <param name="error" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="align" content-attribute="align" content-attribute-enum-values="absbottom absmiddle baseline bottom left middle right texttop top" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="disabled" content-attribute="disabled" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="form" read-only="1" type="HTMLFormElement"/>
        <property name="name" content-attribute="name" content-attribute-reflects="1" type="DOMString"/>
        <property name="validationMessage" read-only="1" type="DOMString"/>
        <property name="validity" read-only="1" type="ValidityState"/>
        <property name="willValidate" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="HTMLFontElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="font" namespace="HTML"/>
      <implements>DOML2DeprecatedColorProperty</implements>
      <implements>DOML2DeprecatedSizeProperty</implements>
      <properties>
        <property name="face" content-attribute="face" content-attribute-reflects="1" content-attribute-value-syntax="font_family" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLFormControlsCollection" extends="HTMLCollection">
      <methods>
        <method name="namedItem" getter="1" nullable="1" type="Element">
          <param name="name" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="HTMLFormElement" extends="HTMLElement" override-builtins="1">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="form" namespace="HTML"/>
      <events>
        <event name="reset" bubbles="1" cancelable="1" dispatch="sync" type="Event"/>
        <event name="submit" bubbles="1" cancelable="1" dispatch="sync" type="Event"/>
      </events>
      <methods>
        <method name="checkValidity" type="boolean"/>
        <method name="item" getter="1" type="any">
          <param name="name" optional="1" type="any"/>
          <param name="index" optional="1" type="any"/>
        </method>
        <method name="namedItem" getter="1" type="any">
          <param name="name" type="DOMString"/>
        </method>
        <method name="reset" type="void"/>
        <method name="submit" type="void"/>
      </methods>
      <properties>
        <property name="acceptCharset" content-attribute="accept-charset" content-attribute-reflects="1" content-attribute-value-syntax="space_separated_tokens" type="DOMString"/>
        <property name="action" content-attribute="action" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="autocomplete" content-attribute="autocomplete" content-attribute-enum-values="on off" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="elements" read-only="1" type="HTMLFormControlsCollection"/>
        <property name="encoding" content-attribute="enctype" content-attribute-enum-values="application/x-www-form-urlencoded multipart/form-data text/plain" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="enctype" content-attribute="enctype" content-attribute-enum-values="application/x-www-form-urlencoded multipart/form-data text/plain" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="length" read-only="1" type="long"/>
        <property name="method" content-attribute="method" content-attribute-enum-values="GET POST" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="name" content-attribute="name" content-attribute-reflects="1" type="DOMString"/>
        <property name="noValidate" content-attribute="novalidate" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="target" content-attribute="target" content-attribute-enum-values="_blank _self _parent _top" content-attribute-reflects="1" content-attribute-value-syntax="name_ref" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLFrameElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="frame" html-self-closing="1" namespace="HTML"/>
      <events>
        <event name="load" dispatch="async" skips-window="1" type="Event"/>
      </events>
      <implements>GetSVGDocument</implements>
      <properties>
        <property name="border" content-attribute="border" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="borderColor" content-attribute="bordercolor" content-attribute-reflects="1" content-attribute-value-syntax="simple_color" type="any"/>
        <property name="contentDocument" read-only="1" type="Document"/>
        <property name="contentWindow" read-only="1" type="Window"/>
        <property name="frameBorder" content-attribute="frameborder" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="frameSpacing" content-attribute="framespacing" content-attribute-reflects="1" content-attribute-value-syntax="signed_integer" type="any"/>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="(DOMString or unsigned long)"/>
        <property name="longDesc" content-attribute="longdesc" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="marginHeight" content-attribute="marginheight" content-attribute-reflects="1" content-attribute-value-syntax="signed_integer" type="DOMString"/>
        <property name="marginWidth" content-attribute="marginwidth" content-attribute-reflects="1" content-attribute-value-syntax="signed_integer" type="DOMString"/>
        <property name="name" content-attribute="name" content-attribute-enum-values="_blank _self _parent _top" content-attribute-reflects="1" content-attribute-value-syntax="name_ref" type="DOMString"/>
        <property name="noResize" content-attribute="noresize" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="onload" event-handler="load" type="EventHandler"/>
        <property name="scrolling" content-attribute="scrolling" content-attribute-enum-values="auto no yes" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="src" content-attribute="src" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="(DOMString or unsigned long)"/>
      </properties>
    </interface>
    <interface name="HTMLFrameSetElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="frameset" namespace="HTML"/>
      <properties>
        <property name="border" content-attribute="border" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="borderColor" content-attribute="bordercolor" content-attribute-reflects="1" content-attribute-value-syntax="simple_color" type="any"/>
        <property name="cols" content-attribute="cols" content-attribute-reflects="1" content-attribute-value-syntax="1_or_greater_integer" type="DOMString"/>
        <property name="frameBorder" content-attribute="frameborder" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="frameSpacing" content-attribute="framespacing" content-attribute-reflects="1" content-attribute-value-syntax="signed_integer" type="any"/>
        <property name="name" content-attribute="name" content-attribute-enum-values="_blank _self _parent _top" content-attribute-reflects="1" content-attribute-value-syntax="name_ref" type="DOMString"/>
        <property name="onafterprint" content-attribute="onafterprint" content-attribute-value-syntax="javascript" event-handler="afterprint" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onbeforeprint" content-attribute="onbeforeprint" content-attribute-value-syntax="javascript" event-handler="beforeprint" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onbeforeunload" content-attribute="onbeforeunload" content-attribute-value-syntax="javascript" event-handler="beforeunload" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onblur" event-handler="blur" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onerror" event-handler="error" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onfocus" event-handler="focus" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onhashchange" content-attribute="onhashchange" content-attribute-value-syntax="javascript" event-handler="hashchange" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onload" event-handler="load" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onmessage" content-attribute="onmessage" content-attribute-value-syntax="javascript" event-handler="message" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onoffline" content-attribute="onoffline" content-attribute-value-syntax="javascript" event-handler="offline" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="ononline" content-attribute="ononline" content-attribute-value-syntax="javascript" event-handler="online" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onorientationchange" content-attribute="onorientationchange" content-attribute-value-syntax="javascript" event-handler="orientationchange" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onpagehide" content-attribute="onpagehide" content-attribute-value-syntax="javascript" event-handler="pagehide" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onpageshow" content-attribute="onpageshow" content-attribute-value-syntax="javascript" event-handler="pageshow" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onpopstate" content-attribute="onpopstate" content-attribute-value-syntax="javascript" event-handler="popstate" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onresize" event-handler="resize" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onscroll" event-handler="scroll" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onstorage" content-attribute="onstorage" content-attribute-value-syntax="javascript" event-handler="storage" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="onunload" content-attribute="onunload" content-attribute-value-syntax="javascript" event-handler="unload" event-handler-map-to-window="1" type="EventHandler"/>
        <property name="rows" content-attribute="rows" content-attribute-reflects="1" content-attribute-value-syntax="1_or_greater_integer" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLHeadElement" extends="HTMLElement">
      <element name="head" namespace="HTML"/>
      <properties>
        <property name="profile" content-attribute="profile" content-attribute-reflects="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLHeadingElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="h1" namespace="HTML"/>
      <element name="h2" namespace="HTML"/>
      <element name="h3" namespace="HTML"/>
      <element name="h4" namespace="HTML"/>
      <element name="h5" namespace="HTML"/>
      <element name="h6" namespace="HTML"/>
      <properties>
        <property name="align" content-attribute="align" content-attribute-enum-values="center justify left right" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLHRElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="hr" html-self-closing="1" namespace="HTML"/>
      <implements>DOML2DeprecatedColorProperty</implements>
      <implements>DOML2DeprecatedSizeProperty</implements>
      <properties>
        <property name="align" content-attribute="align" content-attribute-enum-values="center justify left right" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="noShade" content-attribute="noshade" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="long"/>
      </properties>
    </interface>
    <interface name="HTMLHtmlElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute name="manifest" value-syntax="url"/>
      </anonymous-content-attributes>
      <element name="html" namespace="HTML"/>
      <properties>
        <property name="version" content-attribute="version" content-attribute-reflects="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLIFrameElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="iframe" namespace="HTML"/>
      <events>
        <event name="load" dispatch="async" skips-window="1" type="Event"/>
      </events>
      <implements>GetSVGDocument</implements>
      <properties>
        <property name="align" content-attribute="align" content-attribute-enum-values="absbottom absmiddle baseline bottom left middle right texttop top" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="allowFullscreen" content-attribute="allowfullscreen" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="allowPaymentRequest" content-attribute="allowPaymentRequest" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="border" content-attribute="border" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="contentDocument" read-only="1" type="Document"/>
        <property name="contentWindow" read-only="1" type="Window"/>
        <property name="frameBorder" content-attribute="frameborder" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="frameSpacing" content-attribute="framespacing" content-attribute-reflects="1" content-attribute-value-syntax="signed_integer" type="any"/>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="hspace" content-attribute="hspace" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="long"/>
        <property name="longDesc" content-attribute="longdesc" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="marginHeight" content-attribute="marginheight" content-attribute-reflects="1" content-attribute-value-syntax="signed_integer" type="DOMString"/>
        <property name="marginWidth" content-attribute="marginwidth" content-attribute-reflects="1" content-attribute-value-syntax="signed_integer" type="DOMString"/>
        <property name="name" content-attribute="name" content-attribute-enum-values="_blank _self _parent _top" content-attribute-reflects="1" content-attribute-value-syntax="name_ref" type="DOMString"/>
        <property name="noResize" content-attribute="noresize" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="onload" event-handler="load" type="EventHandler"/>
        <property name="sandbox" content-attribute="sandbox" content-attribute-enum-values="allow-scripts allow-forms allow-same-origin allow-top-navigation allow-popups allow-pointer-lock" content-attribute-reflects="1" content-attribute-value-syntax="space_separated_enums" put-forwards="value" read-only="1" type="DOMSettableTokenList"/>
        <property name="scrolling" content-attribute="scrolling" content-attribute-enum-values="auto no yes" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="src" content-attribute="src" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="vspace" content-attribute="vspace" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="long"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLImageElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="img" html-self-closing="1" namespace="HTML"/>
      <events>
        <event name="error" dispatch="sync" type="Event"/>
      </events>
      <methods>
        <method name="msGetAsCastingSource" type="any"/>
      </methods>
      <named-constructor name="Image">
        <param name="width" optional="1" type="unsigned long"/>
        <param name="height" optional="1" type="unsigned long"/>
      </named-constructor>
      <properties>
        <property name="align" content-attribute="align" content-attribute-enum-values="absbottom absmiddle baseline bottom left middle right texttop top" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="alt" content-attribute="alt" content-attribute-reflects="1" type="DOMString"/>
        <property name="border" content-attribute="border" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="complete" read-only="1" type="boolean"/>
        <property name="crossOrigin" content-attribute="crossorigin" content-attribute-enum-values="anonymous use-credentials" content-attribute-reflects="1" content-attribute-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="currentSrc" read-only="1" type="DOMString"/>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="unsigned long"/>
        <property name="hspace" content-attribute="hspace" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="long"/>
        <property name="isMap" content-attribute="ismap" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="longDesc" content-attribute="longdesc" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="lowsrc" content-attribute="lowsrc" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="msPlayToDisabled" content-attribute="x-ms-playtodisabled" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="msPlayToPreferredSourceUri" content-attribute="x-ms-playtopreferredsourceuri" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="msPlayToPrimary" content-attribute="x-ms-playtoprimary" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="msPlayToSource" read-only="1" type="any"/>
        <property name="name" content-attribute="name" content-attribute-reflects="1" type="DOMString"/>
        <property name="naturalHeight" read-only="1" type="unsigned long"/>
        <property name="naturalWidth" read-only="1" type="unsigned long"/>
        <property name="sizes" content-attribute="sizes" content-attribute-reflects="1" content-attribute-value-syntax="image_sizes" type="DOMString"/>
        <property name="src" content-attribute="src" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="srcset" content-attribute="srcset" content-attribute-reflects="1" content-attribute-value-syntax="image_candidates" type="DOMString"/>
        <property name="useMap" content-attribute="usemap" content-attribute-reflects="1" content-attribute-value-syntax="hash_name_ref" type="DOMString"/>
        <property name="vspace" content-attribute="vspace" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="long"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="unsigned long"/>
        <property name="x" read-only="1" type="long"/>
        <property name="y" read-only="1" type="long"/>
      </properties>
    </interface>
    <interface name="HTMLInputElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="input" html-self-closing="1" namespace="HTML"/>
      <events>
        <event name="change" bubbles="1" dispatch="sync" type="Event"/>
        <event name="input" bubbles="1" dispatch="async" type="Event"/>
        <event name="error" dispatch="sync" type="Event"/>
        <event name="invalid" cancelable="1" dispatch="sync" type="Event"/>
      </events>
      <methods>
        <method name="checkValidity" type="boolean"/>
        <method name="select" type="void"/>
        <method name="setCustomValidity" type="void">
          <param name="error" type="DOMString"/>
        </method>
        <method name="setSelectionRange" type="void">
          <param name="start" optional="1" type="unsigned long"/>
          <param name="end" optional="1" type="unsigned long"/>
          <param name="direction" optional="1" type="DOMString"/>
        </method>
        <method name="stepDown" type="void">
          <param name="n" default="1" optional="1" type="long"/>
        </method>
        <method name="stepUp" type="void">
          <param name="n" default="1" optional="1" type="long"/>
        </method>
      </methods>
      <properties>
        <property name="accept" content-attribute="accept" content-attribute-enum-values="audio/* video/* image/*" content-attribute-reflects="1" content-attribute-value-syntax="comma_separated_mime_types" type="DOMString"/>
        <property name="align" content-attribute="align" content-attribute-enum-values="absbottom absmiddle baseline bottom left middle right texttop top" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="alt" content-attribute="alt" content-attribute-reflects="1" type="DOMString"/>
        <property name="autocomplete" content-attribute="autocomplete" content-attribute-reflects="1" content-attribute-value-syntax="space_separated_tokens" type="DOMString"/>
        <property name="autofocus" content-attribute="autofocus" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="border" content-attribute="border" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="checked" type="boolean"/>
        <property name="complete" read-only="1" type="boolean"/>
        <property name="defaultChecked" content-attribute="checked" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="defaultValue" content-attribute="value" content-attribute-reflects="1" type="DOMString"/>
        <property name="disabled" content-attribute="disabled" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="files" read-only="1" type="FileList"/>
        <property name="form" read-only="1" type="HTMLFormElement"/>
        <property name="formAction" content-attribute="formaction" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="formEnctype" content-attribute="formenctype" content-attribute-enum-values="application/x-www-form-urlencoded multipart/form-data text/plain" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="formMethod" content-attribute="formmethod" content-attribute-enum-values="GET POST" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="formNoValidate" content-attribute="formnovalidate" content-attribute-boolean="1" content-attribute-reflects="1" type="DOMString"/>
        <property name="formTarget" content-attribute="formtarget" content-attribute-enum-values="_blank _self _parent _top" content-attribute-reflects="1" content-attribute-value-syntax="name_ref" type="DOMString"/>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="hspace" content-attribute="hspace" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="long"/>
        <property name="indeterminate" type="boolean"/>
        <property name="list" content-attribute="list" content-attribute-reflects="1" content-attribute-value-syntax="id_ref" read-only="1" type="HTMLElement"/>
        <property name="max" content-attribute="max" content-attribute-reflects="1" type="DOMString"/>
        <property name="maxLength" content-attribute="maxlength" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="long"/>
        <property name="min" content-attribute="min" content-attribute-reflects="1" type="DOMString"/>
        <property name="multiple" content-attribute="multiple" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="name" content-attribute="name" content-attribute-reflects="1" type="DOMString"/>
        <property name="pattern" content-attribute="pattern" content-attribute-reflects="1" content-attribute-value-syntax="regular_expression" type="DOMString"/>
        <property name="placeholder" content-attribute="placeholder" content-attribute-reflects="1" type="DOMString"/>
        <property name="readOnly" content-attribute="readonly" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="required" content-attribute="required" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="selectionDirection" type="DOMString"/>
        <property name="selectionEnd" type="unsigned long"/>
        <property name="selectionStart" type="unsigned long"/>
        <property name="size" content-attribute="size" content-attribute-reflects="1" content-attribute-value-syntax="1_or_greater_integer" type="unsigned long"/>
        <property name="src" content-attribute="src" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="status" type="boolean"/>
        <property name="step" content-attribute="step" content-attribute-enum-values="any" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" type="DOMString"/>
        <property name="type" content-attribute="type" content-attribute-enum-values="text hidden search tel url email password month week number range checkbox radio file submit image reset button" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="useMap" content-attribute="usemap" content-attribute-reflects="1" content-attribute-value-syntax="hash_name_ref" type="DOMString"/>
        <property name="validationMessage" read-only="1" type="DOMString"/>
        <property name="validity" read-only="1" type="ValidityState"/>
        <property name="value" type="DOMString"/>
        <!-- TODO: add this one back in once we have time.Time support -->
        <!-- <property name="valueAsDate" type="Date"/> -->
        <property name="valueAsNumber" type="double"/>
        <property name="vspace" content-attribute="vspace" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="long"/>
        <property name="webkitdirectory" content-attribute="webkitdirectory" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="willValidate" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="HTMLLabelElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="label" namespace="HTML"/>
      <properties>
        <property name="form" read-only="1" type="HTMLFormElement"/>
        <property name="htmlFor" content-attribute="for" content-attribute-reflects="1" content-attribute-value-syntax="id_ref" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLLegendElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="legend" namespace="HTML"/>
      <properties>
        <property name="align" content-attribute="align" content-attribute-enum-values="bottom center left right top" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="form" read-only="1" type="HTMLFormElement"/>
      </properties>
    </interface>
    <interface name="HTMLLIElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="li" namespace="HTML"/>
      <properties>
        <property name="type" content-attribute="type" content-attribute-enum-values="1 a A i I disc circle square" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="value" content-attribute="value" content-attribute-reflects="1" content-attribute-value-syntax="signed_integer" type="long"/>
      </properties>
    </interface>
    <interface name="HTMLLinkElement" extends="HTMLElement">
      <element name="link" html-self-closing="1" namespace="HTML"/>
      <events>
        <event name="error" dispatch="async" type="Event"/>
        <event name="load" dispatch="async" follows="readystatechange" skips-window="1" type="Event"/>
        <event name="readystatechange" dispatch="async" precedes="load" tags="IEOnly" type="Event"/>
      </events>
      <implements>LinkStyle</implements>
      <properties>
        <property name="charset" content-attribute="charset" content-attribute-reflects="1" content-attribute-value-syntax="character_encoding" type="DOMString"/>
        <property name="disabled" content-attribute="disabled" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="href" content-attribute="href" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="hreflang" content-attribute="hreflang" content-attribute-reflects="1" content-attribute-value-syntax="bcp47_lang" type="DOMString"/>
        <property name="media" content-attribute="media" content-attribute-reflects="1" content-attribute-value-syntax="media_query" type="DOMString"/>
        <property name="rel" content-attribute="rel" content-attribute-enum-values="alternate appendix bookmark chapter contents copyright dns-prefetch entry-content feedurl glossary help index next offline prefetch preload prev search section start stylesheet subsection shortcut_icon" content-attribute-reflects="1" content-attribute-value-syntax="space_separated_enums" type="DOMString"/>
        <property name="rev" content-attribute="rev" content-attribute-enum-values="alternate appendix bookmark chapter contents copyright glossary help index next prev section start stylesheet subsection" content-attribute-reflects="1" content-attribute-value-syntax="space_separated_enums" type="DOMString"/>
        <property name="target" content-attribute="target" content-attribute-enum-values="_blank _self _parent _top" content-attribute-reflects="1" content-attribute-value-syntax="name_ref" type="DOMString"/>
        <property name="type" content-attribute="type" content-attribute-reflects="1" content-attribute-value-syntax="mime_type" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLMapElement" extends="HTMLElement">
      <element name="map" namespace="HTML"/>
      <properties>
        <property name="areas" read-only="1" type="HTMLAreasCollection"/>
        <property name="name" content-attribute="name" content-attribute-reflects="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLMarqueeElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="marquee" namespace="HTML"/>
      <events>
        <event name="bounce" dispatch="sync" follows="start" precedes="finish" tags="IEOnly" type="Event"/>
        <event name="start" dispatch="sync" precedes="bounce finish" tags="IEOnly" type="Event"/>
        <event name="finish" dispatch="sync" follows="start bounce" tags="IEOnly" type="Event"/>
      </events>
      <methods>
        <method name="start" type="void"/>
        <method name="stop" type="void"/>
      </methods>
      <properties>
        <property name="behavior" content-attribute="behavior" content-attribute-enum-values="scroll slide alternate" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="bgColor" content-attribute="bgcolor" content-attribute-reflects="1" content-attribute-value-syntax="simple_color" type="any"/>
        <property name="direction" content-attribute="direction" content-attribute-enum-values="left right up down" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="hspace" content-attribute="hspace" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="long"/>
        <property name="loop" content-attribute="loop" content-attribute-boolean="1" content-attribute-reflects="1" type="long"/>
        <property name="onbounce" content-attribute="onbounce" content-attribute-value-syntax="javascript" event-handler="bounce" type="EventHandler"/>
        <property name="onfinish" content-attribute="onfinish" content-attribute-value-syntax="javascript" event-handler="finish" type="EventHandler"/>
        <property name="onstart" content-attribute="onstart" content-attribute-value-syntax="javascript" event-handler="start" type="EventHandler"/>
        <property name="scrollAmount" content-attribute="scrollamount" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="unsigned long"/>
        <property name="scrollDelay" content-attribute="scrolldelay" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="unsigned long"/>
        <property name="trueSpeed" content-attribute="truespeed" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="vspace" content-attribute="vspace" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="long"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLMediaElement" extends="HTMLElement">
      <constants>
        <constant name="HAVE_CURRENT_DATA" type="unsigned short" value="2"/>
        <constant name="HAVE_ENOUGH_DATA" type="unsigned short" value="4"/>
        <constant name="HAVE_FUTURE_DATA" type="unsigned short" value="3"/>
        <constant name="HAVE_METADATA" type="unsigned short" value="1"/>
        <constant name="HAVE_NOTHING" type="unsigned short" value="0"/>
        <constant name="NETWORK_EMPTY" type="unsigned short" value="0"/>
        <constant name="NETWORK_IDLE" type="unsigned short" value="1"/>
        <constant name="NETWORK_LOADING" type="unsigned short" value="2"/>
        <constant name="NETWORK_NO_SOURCE" type="unsigned short" value="3"/>
      </constants>
      <events>
        <event name="loadstart" dispatch="sync" precedes="progress" type="Event"/>
        <event name="progress" dispatch="sync" follows="loadstart" precedes="loadedmetadata" type="Event"/>
        <event name="suspend" dispatch="sync" type="Event"/>
        <event name="abort" dispatch="sync" type="Event"/>
        <event name="error" dispatch="sync" type="Event"/>
        <event name="emptied" dispatch="sync" type="Event"/>
        <event name="stalled" dispatch="sync" follows="playing" type="Event"/>
        <event name="play" dispatch="sync" follows="pause" type="Event"/>
        <event name="pause" dispatch="sync" precedes="play" type="Event"/>
        <event name="loadedmetadata" dispatch="sync" follows="loadstart" precedes="loadeddata waiting seeking" type="Event"/>
        <event name="loadeddata" dispatch="sync" follows="loadedmetadata" precedes="canplay" type="Event"/>
        <event name="waiting" dispatch="sync" type="Event"/>
        <event name="playing" dispatch="sync" follows="canplay" precedes="stalled" type="Event"/>
        <event name="canplay" dispatch="sync" follows="loadeddata" precedes="canplaythrough" type="Event"/>
        <event name="canplaythrough" dispatch="sync" follows="canplay" precedes="ended" type="Event"/>
        <event name="seeking" dispatch="sync" follows="loadedmetadata" precedes="seeked" type="Event"/>
        <event name="seeked" dispatch="sync" follows="seeking" type="Event"/>
        <event name="timeupdate" dispatch="sync" type="Event"/>
        <event name="ended" dispatch="sync" follows="canplaythrough" type="Event"/>
        <event name="ratechange" dispatch="sync" type="Event"/>
        <event name="durationchange" dispatch="sync" type="Event"/>
        <event name="volumechange" dispatch="sync" type="Event"/>
        <event name="msneedkey" dispatch="sync" tags="IEOnly" type="MSMediaKeyNeededEvent"/>
        <event name="encrypted" dispatch="sync" follows="loadedmetadata" type="MediaEncryptedEvent"/>
        <event name="waitingforkey" dispatch="sync" follows="playing" type="Event"/>
      </events>
      <methods>
        <method name="addTextTrack" type="TextTrack">
          <param name="kind" type="DOMString"/>
          <param name="label" optional="1" type="DOMString"/>
          <param name="language" optional="1" type="DOMString"/>
        </method>
        <method name="canPlayType" type="DOMString">
          <param name="type" type="DOMString"/>
        </method>
        <method name="load" type="void"/>
        <method name="msClearEffects" type="void"/>
        <method name="msGetAsCastingSource" type="any"/>
        <method name="msInsertAudioEffect" type="void">
          <param name="activatableClassId" type="DOMString"/>
          <param name="effectRequired" type="boolean"/>
          <param name="config" optional="1" type="any"/>
        </method>
        <method name="msSetMediaKeys" type="void">
          <param name="mediaKeys" type="MSMediaKeys"/>
        </method>
        <method name="msSetMediaProtectionManager" type="void">
          <param name="mediaProtectionManager" optional="1" type="any"/>
        </method>
        <method name="pause" type="void"/>
        <method name="play" type="void"/>
        <method name="setMediaKeys" type="Promise&lt;void&gt;">
          <param name="mediaKeys" nullable="1" type="MediaKeys"/>
        </method>
      </methods>
      <properties>
        <property name="audioTracks" read-only="1" type="AudioTrackList"/>
        <property name="autoplay" content-attribute="autoplay" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="buffered" read-only="1" type="TimeRanges"/>
        <property name="controls" content-attribute="controls" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="crossOrigin" content-attribute="crossorigin" content-attribute-enum-values="anonymous use-credentials" content-attribute-reflects="1" content-attribute-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="currentSrc" read-only="1" type="DOMString"/>
        <property name="currentTime" type="double"/>
        <property name="defaultMuted" content-attribute="muted" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="defaultPlaybackRate" type="double"/>
        <property name="duration" read-only="1" type="double"/>
        <property name="ended" read-only="1" type="boolean"/>
        <property name="error" read-only="1" type="MediaError"/>
        <property name="loop" content-attribute="loop" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="mediaKeys" nullable="1" read-only="1" type="MediaKeys"/>
        <property name="msAudioCategory" type="DOMString"/>
        <property name="msAudioDeviceType" type="DOMString"/>
        <property name="msGraphicsTrustStatus" read-only="1" type="MSGraphicsTrust"/>
        <property name="msKeys" read-only="1" type="MSMediaKeys"/>
        <property name="msPlayToDisabled" content-attribute="x-ms-playtodisabled" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="msPlayToPreferredSourceUri" content-attribute="x-ms-playtopreferredsourceuri" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="msPlayToPrimary" content-attribute="x-ms-playtoprimary" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="msPlayToSource" read-only="1" type="any"/>
        <property name="msRealTime" type="boolean"/>
        <property name="muted" type="boolean"/>
        <property name="networkState" read-only="1" type="unsigned short"/>
        <property name="onencrypted" event-handler="encrypted" type="EventHandler"/>
        <property name="onmsneedkey" event-handler="msneedkey" type="EventHandler"/>
        <property name="paused" read-only="1" type="boolean"/>
        <property name="playbackRate" type="double"/>
        <property name="played" read-only="1" type="TimeRanges"/>
        <property name="preload" content-attribute="preload" content-attribute-enum-values="none metadata auto" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="readyState" read-only="1" type="any"/>
        <property name="seekable" read-only="1" type="TimeRanges"/>
        <property name="seeking" read-only="1" type="boolean"/>
        <property name="src" content-attribute="src" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="srcObject" nullable="1" type="MediaStream"/>
        <property name="textTracks" read-only="1" type="TextTrackList"/>
        <property name="videoTracks" read-only="1" type="VideoTrackList"/>
        <property name="volume" type="double"/>
      </properties>
    </interface>
    <interface name="HTMLMenuElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="menu" namespace="HTML"/>
      <properties>
        <property name="compact" content-attribute="compact" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="type" content-attribute="type" content-attribute-enum-values="1 a A i I disc circle square" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLMetaElement" extends="HTMLElement">
      <element name="meta" html-self-closing="1" namespace="HTML"/>
      <properties>
        <property name="charset" content-attribute="charset" content-attribute-reflects="1" content-attribute-value-syntax="character_encoding" type="DOMString"/>
        <property name="content" content-attribute="content" content-attribute-reflects="1" type="DOMString"/>
        <property name="httpEquiv" content-attribute="http-equiv" content-attribute-reflects="1" type="DOMString"/>
        <property name="name" content-attribute="name" content-attribute-reflects="1" type="DOMString"/>
        <property name="scheme" content-attribute="scheme" content-attribute-reflects="1" type="DOMString"/>
        <property name="url" content-attribute="url" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLMeterElement" extends="HTMLElement">
      <element name="meter" namespace="HTML"/>
      <properties>
        <property name="high" content-attribute="high" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" type="double"/>
        <property name="low" content-attribute="low" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" type="double"/>
        <property name="max" content-attribute="max" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" type="double"/>
        <property name="min" content-attribute="min" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" type="double"/>
        <property name="optimum" content-attribute="optimum" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" type="double"/>
        <property name="value" content-attribute="value" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" type="double"/>
      </properties>
    </interface>
    <interface name="HTMLModElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="ins" namespace="HTML"/>
      <element name="del" namespace="HTML"/>
      <properties>
        <property name="cite" content-attribute="cite" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="dateTime" content-attribute="datetime" content-attribute-reflects="1" content-attribute-value-syntax="date_time" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLObjectElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="object" namespace="HTML"/>
      <events>
        <event name="load" dispatch="async" skips-window="1" type="Event"/>
        <event name="abort" dispatch="sync" type="UIEvent"/>
      </events>
      <implements>GetSVGDocument</implements>
      <methods>
        <method name="checkValidity" type="boolean"/>
        <method name="setCustomValidity" type="void">
          <param name="error" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="align" content-attribute="align" content-attribute-enum-values="absbottom absmiddle baseline bottom left middle right texttop top" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="alt" content-attribute="alt" content-attribute-reflects="1" type="DOMString"/>
        <property name="altHtml" type="DOMString"/>
        <property name="archive" content-attribute="archive" content-attribute-reflects="1" type="DOMString"/>
        <property name="BaseHref" read-only="1" type="DOMString"/>
        <property name="border" content-attribute="border" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="code" content-attribute="code" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="codeBase" content-attribute="codebase" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="codeType" content-attribute="codetype" content-attribute-reflects="1" content-attribute-value-syntax="mime_type" type="DOMString"/>
        <property name="contentDocument" read-only="1" type="Document"/>
        <property name="data" content-attribute="data" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="declare" content-attribute="declare" content-attribute-reflects="1" type="boolean"/>
        <property name="form" read-only="1" type="HTMLFormElement"/>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="hspace" content-attribute="hspace" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="long"/>
        <property name="msPlayToDisabled" content-attribute="x-ms-playtodisabled" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="msPlayToPreferredSourceUri" content-attribute="x-ms-playtopreferredsourceuri" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="msPlayToPrimary" content-attribute="x-ms-playtoprimary" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="msPlayToSource" read-only="1" type="any"/>
        <property name="name" content-attribute="name" content-attribute-enum-values="_blank _self _parent _top" content-attribute-reflects="1" content-attribute-value-syntax="name_ref" type="DOMString"/>
        <property name="readyState" read-only="1" type="unsigned short"/>
        <property name="standby" content-attribute="standby" content-attribute-reflects="1" type="DOMString"/>
        <property name="type" content-attribute="type" content-attribute-reflects="1" content-attribute-value-syntax="mime_type" type="DOMString"/>
        <property name="useMap" content-attribute="usemap" content-attribute-reflects="1" content-attribute-value-syntax="hash_name_ref" type="DOMString"/>
        <property name="validationMessage" read-only="1" type="DOMString"/>
        <property name="validity" read-only="1" type="ValidityState"/>
        <property name="vspace" content-attribute="vspace" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="long"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="willValidate" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="HTMLOListElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="ol" namespace="HTML"/>
      <properties>
        <property name="compact" content-attribute="compact" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="start" content-attribute="start" content-attribute-reflects="1" content-attribute-value-syntax="signed_integer" type="long"/>
        <property name="type" content-attribute="type" content-attribute-enum-values="1 a A i I disc circle square" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLOptGroupElement" extends="HTMLElement">
      <element name="optgroup" namespace="HTML"/>
      <properties>
        <property name="defaultSelected" content-attribute="selected" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="disabled" content-attribute="disabled" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="form" read-only="1" type="HTMLFormElement"/>
        <property name="index" read-only="1" type="long"/>
        <property name="label" content-attribute="label" content-attribute-reflects="1" type="DOMString"/>
        <property name="selected" type="boolean"/>
        <property name="text" read-only="1" type="DOMString"/>
        <property name="value" content-attribute="value" content-attribute-reflects="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLOptionElement" extends="HTMLElement">
      <element name="option" namespace="HTML"/>
      <named-constructor name="Option">
        <param name="text" optional="1" type="DOMString"/>
        <param name="value" optional="1" type="DOMString"/>
        <param name="defaultSelected" optional="1" type="boolean"/>
        <param name="selected" optional="1" type="boolean"/>
      </named-constructor>
      <properties>
        <property name="defaultSelected" content-attribute="selected" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="disabled" content-attribute="disabled" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="form" read-only="1" type="HTMLFormElement"/>
        <property name="index" read-only="1" type="long"/>
        <property name="label" content-attribute="label" content-attribute-reflects="1" type="DOMString"/>
        <property name="selected" type="boolean"/>
        <property name="text" type="DOMString"/>
        <property name="value" content-attribute="value" content-attribute-reflects="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLOptionsCollection" extends="HTMLCollection">
      <anonymous-methods>
        <method creator="1" setter="1" type="void">
          <param name="index" type="unsigned long"/>
          <param name="option" nullable="1" type="HTMLOptionElement"/>
        </method>
      </anonymous-methods>
      <methods>
        <method name="add" type="void">
          <param name="element" type="(HTMLOptionElement or HTMLOptGroupElement)"/>
          <param name="before" default="null" nullable="1" optional="1" type="(HTMLElement or long)"/>
        </method>
        <method name="remove" type="void">
          <param name="index" type="long"/>
        </method>
      </methods>
      <properties>
        <property name="length" type="unsigned long"/>
        <property name="selectedIndex" type="long"/>
      </properties>
    </interface>
    <interface name="HTMLOutputElement" extends="HTMLElement">
      <element name="output" namespace="HTML"/>
      <methods>
        <method name="checkValidity" type="boolean"/>
        <method name="reportValidity" type="boolean"/>
        <method name="setCustomValidity" type="void">
          <param name="error" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="defaultValue" type="DOMString"/>
        <property name="form" read-only="1" type="HTMLFormElement"/>
        <property name="htmlFor" content-attribute="for" content-attribute-reflects="1" content-attribute-value-syntax="space_separated_id_refs" put-forwards="value" read-only="1" same-object="1" type="DOMSettableTokenList"/>
        <property name="name" content-attribute="name" content-attribute-reflects="1" type="DOMString"/>
        <property name="type" read-only="1" type="DOMString"/>
        <property name="validationMessage" read-only="1" type="DOMString"/>
        <property name="validity" read-only="1" type="ValidityState"/>
        <property name="value" type="DOMString"/>
        <property name="willValidate" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="HTMLParagraphElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="p" namespace="HTML"/>
      <properties>
        <property name="align" content-attribute="align" content-attribute-enum-values="center justify left right" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="clear" content-attribute="clear" content-attribute-enum-values="all left right none" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLParamElement" extends="HTMLElement">
      <element name="param" html-self-closing="1" namespace="HTML"/>
      <properties>
        <property name="name" content-attribute="name" content-attribute-reflects="1" type="DOMString"/>
        <property name="type" content-attribute="type" content-attribute-reflects="1" content-attribute-value-syntax="mime_type" type="DOMString"/>
        <property name="value" content-attribute="value" content-attribute-reflects="1" type="DOMString"/>
        <property name="valueType" content-attribute="valuetype" content-attribute-enum-values="data ref object" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLPictureElement" extends="HTMLElement">
      <element name="picture" namespace="HTML"/>
    </interface>
    <interface name="HTMLPreElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="pre" namespace="HTML"/>
      <element name="listing" namespace="HTML"/>
      <element name="xmp" namespace="HTML"/>
      <properties>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="long"/>
      </properties>
    </interface>
    <interface name="HTMLProgressElement" extends="HTMLElement">
      <element name="progress" namespace="HTML"/>
      <properties>
        <property name="form" read-only="1" type="HTMLFormElement"/>
        <property name="max" content-attribute="max" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" type="float"/>
        <property name="position" read-only="1" type="float"/>
        <property name="value" content-attribute="value" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" type="float"/>
      </properties>
    </interface>
    <interface name="HTMLQuoteElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="q" namespace="HTML"/>
      <element name="blockquote" namespace="HTML"/>
      <properties>
        <property name="cite" content-attribute="cite" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLScriptElement" extends="HTMLElement">
      <element name="script" namespace="HTML"/>
      <events>
        <event name="error" dispatch="sync" type="Event"/>
        <event name="load" dispatch="async" skips-window="1" type="Event"/>
      </events>
      <properties>
        <property name="async" content-attribute="async" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="charset" content-attribute="charset" content-attribute-reflects="1" content-attribute-value-syntax="character_encoding" type="DOMString"/>
        <property name="crossOrigin" content-attribute="crossorigin" content-attribute-enum-values="anonymous use-credentials" content-attribute-reflects="1" content-attribute-value-syntax="enum" nullable="1" type="DOMString"/>
        <property name="defer" content-attribute="defer" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="event" content-attribute="event" content-attribute-enum-values="onload onload()" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="htmlFor" content-attribute="for" content-attribute-enum-values="window" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="src" content-attribute="src" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="text" type="DOMString"/>
        <property name="type" content-attribute="type" content-attribute-reflects="1" content-attribute-value-syntax="mime_type" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLSelectElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="select" namespace="HTML"/>
      <events>
        <event name="change" bubbles="1" dispatch="sync" type="Event"/>
        <event name="invalid" cancelable="1" dispatch="sync" type="Event"/>
      </events>
      <methods>
        <method name="add" type="void">
          <param name="element" type="HTMLElement"/>
          <param name="before" optional="1" type="(HTMLElement or long)"/>
        </method>
        <method name="checkValidity" type="boolean"/>
        <method name="item" getter="1" type="any">
          <param name="name" optional="1" type="any"/>
          <param name="index" optional="1" type="any"/>
        </method>
        <method name="namedItem" getter="1" type="any">
          <param name="name" type="DOMString"/>
        </method>
        <method name="remove" type="void">
          <param name="index" optional="1" type="long"/>
        </method>
        <method name="setCustomValidity" type="void">
          <param name="error" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="autofocus" content-attribute="autofocus" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="disabled" content-attribute="disabled" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="form" read-only="1" type="HTMLFormElement"/>
        <property name="length" type="unsigned long"/>
        <property name="multiple" content-attribute="multiple" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="name" content-attribute="name" content-attribute-reflects="1" type="DOMString"/>
        <property name="options" read-only="1" type="HTMLOptionsCollection"/>
        <property name="required" content-attribute="required" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="selectedIndex" type="long"/>
        <property name="selectedOptions" read-only="1" type="HTMLCollection"/>
        <property name="size" content-attribute="size" content-attribute-reflects="1" content-attribute-value-syntax="1_or_greater_integer" type="unsigned long"/>
        <property name="type" read-only="1" type="DOMString"/>
        <property name="validationMessage" read-only="1" type="DOMString"/>
        <property name="validity" read-only="1" type="ValidityState"/>
        <property name="value" type="DOMString"/>
        <property name="willValidate" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="HTMLSourceElement" extends="HTMLElement">
      <element name="source" html-self-closing="1" namespace="HTML"/>
      <properties>
        <property name="media" content-attribute="media" content-attribute-reflects="1" content-attribute-value-syntax="media_query" type="DOMString"/>
        <property name="msKeySystem" type="DOMString"/>
        <property name="sizes" content-attribute="sizes" content-attribute-reflects="1" content-attribute-value-syntax="image_sizes" type="DOMString"/>
        <property name="src" content-attribute="src" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="srcset" content-attribute="srcset" content-attribute-reflects="1" content-attribute-value-syntax="image_candidates" type="DOMString"/>
        <property name="type" content-attribute="type" content-attribute-reflects="1" content-attribute-value-syntax="mime_type" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLSpanElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="span" namespace="HTML"/>
    </interface>
    <interface name="HTMLStyleElement" extends="HTMLElement">
      <element name="style" namespace="HTML"/>
      <events>
        <event name="error" dispatch="async" type="Event"/>
        <event name="load" dispatch="async" follows="readystatechange" skips-window="1" type="Event"/>
        <event name="readystatechange" dispatch="async" precedes="load" tags="IEOnly" type="Event"/>
      </events>
      <implements>LinkStyle</implements>
      <properties>
        <property name="disabled" type="boolean"/>
        <property name="media" content-attribute="media" content-attribute-reflects="1" content-attribute-value-syntax="media_query" type="DOMString"/>
        <property name="type" content-attribute="type" content-attribute-reflects="1" content-attribute-value-syntax="mime_type" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLTableCaptionElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="caption" namespace="HTML"/>
      <properties>
        <property name="align" content-attribute="align" content-attribute-enum-values="bottom center left right top" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="vAlign" content-attribute="valign" content-attribute-enum-values="top bottom" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLTableCellElement" extends="HTMLElement">
      <implements>HTMLTableAlignment</implements>
      <properties>
        <property name="abbr" content-attribute="abbr" content-attribute-reflects="1" type="DOMString"/>
        <property name="align" content-attribute="align" content-attribute-enum-values="center justify left right" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="axis" content-attribute="axis" content-attribute-reflects="1" type="DOMString"/>
        <property name="bgColor" content-attribute="bgcolor" content-attribute-reflects="1" content-attribute-value-syntax="simple_color" type="any"/>
        <property name="cellIndex" read-only="1" type="long"/>
        <property name="colSpan" content-attribute="colspan" content-attribute-reflects="1" content-attribute-value-syntax="1_or_greater_integer" type="unsigned long"/>
        <property name="headers" content-attribute="headers" content-attribute-reflects="1" content-attribute-value-syntax="space_separated_id_refs" type="DOMString"/>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="any"/>
        <property name="noWrap" content-attribute="nowrap" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="rowSpan" content-attribute="rowspan" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="unsigned long"/>
        <property name="scope" content-attribute="scope" content-attribute-enum-values="row col rowgroup colgroup" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLTableColElement" extends="HTMLElement">
      <element name="col" html-self-closing="1" namespace="HTML"/>
      <element name="colgroup" namespace="HTML"/>
      <implements>HTMLTableAlignment</implements>
      <properties>
        <property name="align" content-attribute="align" content-attribute-enum-values="center justify left right" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="span" content-attribute="span" content-attribute-reflects="1" content-attribute-value-syntax="1_or_greater_integer" type="unsigned long"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="any"/>
      </properties>
    </interface>
    <interface name="HTMLTableDataCellElement" extends="HTMLTableCellElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="td" namespace="HTML"/>
    </interface>
    <interface name="HTMLTableElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="table" namespace="HTML"/>
      <methods>
        <method name="createCaption" type="HTMLElement"/>
        <method name="createTBody" type="HTMLElement"/>
        <method name="createTFoot" type="HTMLElement"/>
        <method name="createTHead" type="HTMLElement"/>
        <method name="deleteCaption" type="void"/>
        <method name="deleteRow" type="void">
          <param name="index" default="-1" optional="1" type="long"/>
        </method>
        <method name="deleteTFoot" type="void"/>
        <method name="deleteTHead" type="void"/>
        <method name="insertRow" type="HTMLElement">
          <param name="index" default="-1" optional="1" type="long"/>
        </method>
      </methods>
      <properties>
        <property name="align" content-attribute="align" content-attribute-enum-values="center left right" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="bgColor" content-attribute="bgcolor" content-attribute-reflects="1" content-attribute-value-syntax="simple_color" type="any"/>
        <property name="border" content-attribute="border" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
        <property name="borderColor" content-attribute="bordercolor" content-attribute-reflects="1" content-attribute-value-syntax="simple_color" type="any"/>
        <property name="caption" type="HTMLTableCaptionElement"/>
        <property name="cellPadding" content-attribute="cellpadding" content-attribute-reflects="1" content-attribute-value-syntax="integer_or_percentage" type="DOMString"/>
        <property name="cellSpacing" content-attribute="cellspacing" content-attribute-reflects="1" content-attribute-value-syntax="integer_or_percentage" type="DOMString"/>
        <property name="cols" content-attribute="cols" content-attribute-reflects="1" content-attribute-value-syntax="1_or_greater_integer" type="long"/>
        <property name="frame" content-attribute="frame" content-attribute-enum-values="void above below border box hsides lhs rhs vsides" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="any"/>
        <property name="rows" read-only="1" type="HTMLCollection"/>
        <property name="rules" content-attribute="rules" content-attribute-enum-values="all cols groups none rows" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="summary" content-attribute="summary" content-attribute-reflects="1" type="DOMString"/>
        <property name="tBodies" read-only="1" type="HTMLCollection"/>
        <property name="tFoot" type="HTMLTableSectionElement"/>
        <property name="tHead" type="HTMLTableSectionElement"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLTableHeaderCellElement" extends="HTMLTableCellElement">
      <element name="th" namespace="HTML"/>
      <properties>
        <property name="scope" content-attribute="scope" content-attribute-enum-values="row col rowgroup colgroup" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLTableRowElement" extends="HTMLElement">
      <element name="tr" namespace="HTML"/>
      <implements>HTMLTableAlignment</implements>
      <methods>
        <method name="deleteCell" type="void">
          <param name="index" default="-1" optional="1" type="long"/>
        </method>
        <method name="insertCell" type="HTMLElement">
          <param name="index" default="-1" optional="1" type="long"/>
        </method>
      </methods>
      <properties>
        <property name="align" content-attribute="align" content-attribute-enum-values="center justify left right" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="bgColor" content-attribute="bgcolor" content-attribute-reflects="1" content-attribute-value-syntax="simple_color" type="any"/>
        <property name="cells" read-only="1" type="HTMLCollection"/>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="any"/>
        <property name="rowIndex" read-only="1" type="long"/>
        <property name="sectionRowIndex" read-only="1" type="long"/>
      </properties>
    </interface>
    <interface name="HTMLTableSectionElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="thead" namespace="HTML"/>
      <element name="tbody" namespace="HTML"/>
      <element name="tfoot" namespace="HTML"/>
      <implements>HTMLTableAlignment</implements>
      <methods>
        <method name="deleteRow" type="void">
          <param name="index" default="-1" optional="1" type="long"/>
        </method>
        <method name="insertRow" type="HTMLElement">
          <param name="index" default="-1" optional="1" type="long"/>
        </method>
      </methods>
      <properties>
        <property name="align" content-attribute="align" content-attribute-enum-values="center justify left right" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="rows" read-only="1" type="HTMLCollection"/>
      </properties>
    </interface>
    <interface name="HTMLTemplateElement" extends="HTMLElement">
      <element name="template" namespace="HTML"/>
      <properties>
        <property name="content" read-only="1" type="DocumentFragment"/>
      </properties>
    </interface>
    <interface name="HTMLTextAreaElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="textarea" namespace="HTML"/>
      <events>
        <event name="change" bubbles="1" dispatch="sync" type="Event"/>
        <event name="input" bubbles="1" dispatch="async" type="Event"/>
        <event name="invalid" cancelable="1" dispatch="sync" type="Event"/>
      </events>
      <methods>
        <method name="checkValidity" type="boolean"/>
        <method name="select" type="void"/>
        <method name="setCustomValidity" type="void">
          <param name="error" type="DOMString"/>
        </method>
        <method name="setSelectionRange" type="void">
          <param name="start" type="unsigned long"/>
          <param name="end" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="autofocus" content-attribute="autofocus" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="cols" content-attribute="cols" content-attribute-reflects="1" content-attribute-value-syntax="1_or_greater_integer" type="unsigned long"/>
        <property name="defaultValue" content-attribute="value" content-attribute-reflects="1" type="DOMString"/>
        <property name="disabled" content-attribute="disabled" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="form" read-only="1" type="HTMLFormElement"/>
        <property name="maxLength" content-attribute="maxlength" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="long"/>
        <property name="name" content-attribute="name" content-attribute-reflects="1" type="DOMString"/>
        <property name="placeholder" content-attribute="placeholder" content-attribute-reflects="1" type="DOMString"/>
        <property name="readOnly" content-attribute="readonly" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="required" content-attribute="required" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="rows" content-attribute="rows" content-attribute-reflects="1" content-attribute-value-syntax="1_or_greater_integer" type="unsigned long"/>
        <property name="selectionEnd" type="unsigned long"/>
        <property name="selectionStart" type="unsigned long"/>
        <property name="status" type="any"/>
        <property name="type" read-only="1" type="DOMString"/>
        <property name="validationMessage" read-only="1" type="DOMString"/>
        <property name="validity" read-only="1" type="ValidityState"/>
        <property name="value" type="DOMString"/>
        <property name="willValidate" read-only="1" type="boolean"/>
        <property name="wrap" content-attribute="wrap" content-attribute-enum-values="soft hard off" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLTimeElement" extends="HTMLElement">
      <element name="time" namespace="HTML"/>
      <properties>
        <property name="dateTime" content-attribute="datetime" content-attribute-reflects="1" content-attribute-value-syntax="date_time" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLTitleElement" extends="HTMLElement">
      <element name="title" namespace="HTML"/>
      <properties>
        <property name="text" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLTrackElement" extends="HTMLElement">
      <constants>
        <constant name="ERROR" type="unsigned short" value="3"/>
        <constant name="LOADED" type="unsigned short" value="2"/>
        <constant name="LOADING" type="unsigned short" value="1"/>
        <constant name="NONE" type="unsigned short" value="0"/>
      </constants>
      <element name="track" html-self-closing="1" namespace="HTML"/>
      <events>
        <event name="cuechange" dispatch="sync" type="Event"/>
      </events>
      <properties>
        <property name="default" content-attribute="default" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="kind" content-attribute="kind" content-attribute-enum-values="subtitles captions descriptions chapters metadata" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
        <property name="label" content-attribute="label" content-attribute-reflects="1" type="DOMString"/>
        <property name="readyState" read-only="1" type="unsigned short"/>
        <property name="src" content-attribute="src" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="srclang" content-attribute="srclang" content-attribute-reflects="1" content-attribute-value-syntax="bcp47_lang" type="DOMString"/>
        <property name="track" read-only="1" type="TextTrack"/>
      </properties>
    </interface>
    <interface name="HTMLUListElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="ul" namespace="HTML"/>
      <properties>
        <property name="compact" content-attribute="compact" content-attribute-boolean="1" content-attribute-reflects="1" type="boolean"/>
        <property name="type" content-attribute="type" content-attribute-enum-values="1 a A i I disc circle square" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLUnknownElement" extends="HTMLElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="off on" name="unselectable" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="isindex" namespace="HTML"/>
      <element name="nextid" namespace="HTML"/>
    </interface>
    <interface name="HTMLVideoElement" extends="HTMLMediaElement">
      <element name="video" namespace="HTML"/>
      <events>
        <event name="MSVideoFrameStepCompleted" dispatch="sync" tags="MSAppOnly" type="Event"/>
        <event name="MSVideoFormatChanged" dispatch="sync" tags="MSAppOnly" type="Event"/>
        <event name="MSVideoOptimalLayoutChanged" dispatch="sync" tags="MSAppOnly" type="Event"/>
        <event name="resize" dispatch="async" type="Event"/>
      </events>
      <methods>
        <method name="getVideoPlaybackQuality" type="VideoPlaybackQuality"/>
        <method name="msFrameStep" type="void">
          <param name="forward" type="boolean"/>
        </method>
        <method name="msInsertVideoEffect" type="void">
          <param name="activatableClassId" type="DOMString"/>
          <param name="effectRequired" type="boolean"/>
          <param name="config" optional="1" type="any"/>
        </method>
        <method name="msSetVideoRectangle" type="void">
          <param name="left" type="float"/>
          <param name="top" type="float"/>
          <param name="right" type="float"/>
          <param name="bottom" type="float"/>
        </method>
        <method name="webkitEnterFullscreen" type="void"/>
        <method name="webkitEnterFullScreen" type="void"/>
        <method name="webkitExitFullscreen" type="void"/>
        <method name="webkitExitFullScreen" type="void"/>
      </methods>
      <properties>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="unsigned long"/>
        <property name="msHorizontalMirror" type="boolean"/>
        <property name="msIsLayoutOptimalForPlayback" read-only="1" type="boolean"/>
        <property name="msIsStereo3D" read-only="1" type="boolean"/>
        <property name="msStereo3DPackingMode" type="DOMString"/>
        <property name="msStereo3DRenderMode" type="DOMString"/>
        <property name="msZoom" type="boolean"/>
        <property name="onMSVideoFormatChanged" event-handler="MSVideoFormatChanged" type="EventHandler"/>
        <property name="onMSVideoFrameStepCompleted" event-handler="MSVideoFrameStepCompleted" type="EventHandler"/>
        <property name="onMSVideoOptimalLayoutChanged" event-handler="MSVideoOptimalLayoutChanged" type="EventHandler"/>
        <property name="poster" content-attribute="poster" content-attribute-reflects="1" content-attribute-value-syntax="url" type="DOMString"/>
        <property name="videoHeight" read-only="1" type="unsigned long"/>
        <property name="videoWidth" read-only="1" type="unsigned long"/>
        <property name="webkitDisplayingFullscreen" read-only="1" type="bool"/>
        <property name="webkitSupportsFullscreen" read-only="1" type="bool"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="IDBCursor" extends="Object">
      <constants>
        <constant name="NEXT" type="DOMString" value="next"/>
        <constant name="NEXT_NO_DUPLICATE" type="DOMString" value="nextunique"/>
        <constant name="PREV" type="DOMString" value="prev"/>
        <constant name="PREV_NO_DUPLICATE" type="DOMString" value="prevunique"/>
      </constants>
      <methods>
        <method name="advance" type="void">
          <param name="count" enforce-range="1" type="unsigned long"/>
        </method>
        <method name="continue" type="void">
          <param name="key" default="0" optional="1" type="any"/>
        </method>
        <method name="delete" type="IDBRequest"/>
        <method name="update" type="IDBRequest">
          <param name="value" type="any"/>
        </method>
      </methods>
      <properties>
        <property name="direction" read-only="1" type="IDBCursorDirection"/>
        <property name="key" read-only="1" type="any"/>
        <property name="primaryKey" read-only="1" type="any"/>
        <property name="source" read-only="1" type="(IDBObjectStore or IDBIndex)"/>
      </properties>
    </interface>
    <interface name="IDBCursorWithValue" extends="IDBCursor">
      <properties>
        <property name="value" read-only="1" type="any"/>
      </properties>
    </interface>
    <interface name="IDBDatabase" extends="EventTarget">
      <events>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
        <event name="abort" dispatch="sync" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="close" type="void"/>
        <method name="createObjectStore" type="IDBObjectStore">
          <param name="name" type="DOMString"/>
          <param name="optionalParameters" default="0" optional="1" type="IDBObjectStoreParameters"/>
        </method>
        <method name="deleteObjectStore" type="void">
          <param name="name" type="DOMString"/>
        </method>
        <method name="transaction" type="IDBTransaction">
          <param name="storeNames" type="(DOMString or sequence&lt;DOMString&gt;)"/>
          <param name="mode" default="&quot;readonly&quot;" optional="1" type="IDBTransactionMode"/>
        </method>
      </methods>
      <properties>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="objectStoreNames" read-only="1" type="DOMStringList"/>
        <property name="onabort" event-handler="abort" type="EventHandler"/>
        <property name="onerror" event-handler="error" type="EventHandler"/>
        <property name="version" read-only="1" type="unsigned long long"/>
      </properties>
    </interface>
    <interface name="IDBFactory" extends="Object">
      <methods>
        <method name="cmp" type="short">
          <param name="first" type="any"/>
          <param name="second" type="any"/>
        </method>
        <method name="deleteDatabase" type="IDBOpenDBRequest">
          <param name="name" type="DOMString"/>
        </method>
        <method name="open" type="IDBOpenDBRequest">
          <param name="name" type="DOMString"/>
          <param name="version" enforce-range="1" optional="1" type="unsigned long long"/>
        </method>
      </methods>
    </interface>
    <interface name="IDBIndex" extends="Object">
      <methods>
        <method name="count" type="IDBRequest">
          <param name="key" optional="1" type="any"/>
        </method>
        <method name="get" type="IDBRequest">
          <param name="key" type="any"/>
        </method>
        <method name="getKey" type="IDBRequest">
          <param name="key" type="any"/>
        </method>
        <method name="openCursor" type="IDBRequest">
          <param name="range" default="0" optional="1" type="any"/>
          <param name="direction" default="&quot;next&quot;" optional="1" type="IDBCursorDirection"/>
        </method>
        <method name="openKeyCursor" type="IDBRequest">
          <param name="range" default="0" optional="1" type="any"/>
          <param name="direction" default="&quot;next&quot;" optional="1" type="IDBCursorDirection"/>
        </method>
      </methods>
      <properties>
        <property name="keyPath" read-only="1" type="DOMString"/>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="objectStore" read-only="1" type="IDBObjectStore"/>
        <property name="unique" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="IDBKeyRange" extends="Object">
      <methods>
        <method name="bound" static="1" type="IDBKeyRange">
          <param name="lower" type="any"/>
          <param name="upper" type="any"/>
          <param name="lowerOpen" default="false" optional="1" type="boolean"/>
          <param name="upperOpen" default="false" optional="1" type="boolean"/>
        </method>
        <method name="lowerBound" static="1" type="IDBKeyRange">
          <param name="lower" type="any"/>
          <param name="open" default="false" optional="1" type="boolean"/>
        </method>
        <method name="only" static="1" type="IDBKeyRange">
          <param name="value" type="any"/>
        </method>
        <method name="upperBound" static="1" type="IDBKeyRange">
          <param name="upper" type="any"/>
          <param name="open" default="false" optional="1" type="boolean"/>
        </method>
      </methods>
      <properties>
        <property name="lower" read-only="1" type="any"/>
        <property name="lowerOpen" read-only="1" type="boolean"/>
        <property name="upper" read-only="1" type="any"/>
        <property name="upperOpen" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="IDBObjectStore" extends="Object">
      <methods>
        <method name="add" type="IDBRequest">
          <param name="value" type="any"/>
          <param name="key" default="0" optional="1" type="any"/>
        </method>
        <method name="clear" type="IDBRequest"/>
        <method name="count" type="IDBRequest">
          <param name="key" optional="1" type="any"/>
        </method>
        <method name="createIndex" type="IDBIndex">
          <param name="name" type="DOMString"/>
          <param name="keyPath" type="DOMString" type-original="IDBKeyPath"/>
          <param name="optionalParameters" default="0" optional="1" type="IDBIndexParameters"/>
        </method>
        <method name="delete" type="IDBRequest">
          <param name="key" type="any"/>
        </method>
        <method name="deleteIndex" type="void">
          <param name="indexName" type="DOMString"/>
        </method>
        <method name="get" type="IDBRequest">
          <param name="key" type="any"/>
        </method>
        <method name="index" type="IDBIndex">
          <param name="name" type="DOMString"/>
        </method>
        <method name="openCursor" type="IDBRequest">
          <param name="range" default="0" optional="1" type="any"/>
          <param name="direction" default="&quot;next&quot;" optional="1" type="IDBCursorDirection"/>
        </method>
        <method name="put" type="IDBRequest">
          <param name="value" type="any"/>
          <param name="key" default="0" optional="1" type="any"/>
        </method>
      </methods>
      <properties>
        <property name="indexNames" read-only="1" type="DOMStringList"/>
        <property name="keyPath" nullable="1" read-only="1" type="DOMString" type-original="IDBKeyPath"/>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="transaction" read-only="1" type="IDBTransaction"/>
      </properties>
    </interface>
    <interface name="IDBOpenDBRequest" extends="IDBRequest">
      <events>
        <event name="blocked" dispatch="sync" skips-window="1" type="Event"/>
        <event name="upgradeneeded" dispatch="sync" skips-window="1" type="IDBVersionChangeEvent"/>
      </events>
      <properties>
        <property name="onblocked" event-handler="blocked" type="EventHandler"/>
        <property name="onupgradeneeded" event-handler="upgradeneeded" type="EventHandler"/>
      </properties>
    </interface>
    <interface name="IDBRequest" extends="EventTarget">
      <events>
        <event name="error" bubbles="1" dispatch="sync" skips-window="1" type="Event"/>
        <event name="success" bubbles="1" dispatch="sync" skips-window="1" type="Event"/>
      </events>
      <properties>
        <property name="error" read-only="1" type="DOMError"/>
        <property name="onerror" event-handler="error" type="EventHandler"/>
        <property name="onsuccess" event-handler="success" type="EventHandler"/>
        <property name="readyState" read-only="1" type="IDBRequestReadyState"/>
        <property name="result" read-only="1" type="any"/>
        <property name="source" nullable="1" read-only="1" type="(IDBObjectStore or IDBIndex or IDBCursor)"/>
        <property name="transaction" read-only="1" type="IDBTransaction"/>
      </properties>
    </interface>
    <interface name="IDBTransaction" extends="EventTarget">
      <constants>
        <constant name="READ_ONLY" type="DOMString" value="readonly"/>
        <constant name="READ_WRITE" type="DOMString" value="readwrite"/>
        <constant name="VERSION_CHANGE" type="DOMString" value="versionchange"/>
      </constants>
      <events>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
        <event name="abort" dispatch="sync" skips-window="1" type="Event"/>
        <event name="complete" dispatch="sync" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="abort" type="void"/>
        <method name="objectStore" type="IDBObjectStore">
          <param name="name" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="db" read-only="1" type="IDBDatabase"/>
        <property name="error" read-only="1" type="DOMError"/>
        <property name="mode" read-only="1" type="IDBTransactionMode"/>
        <property name="onabort" event-handler="abort" type="EventHandler"/>
        <property name="oncomplete" event-handler="complete" type="EventHandler"/>
        <property name="onerror" event-handler="error" type="EventHandler"/>
      </properties>
    </interface>
    <interface name="IDBVersionChangeEvent" extends="Event">
      <properties>
        <property name="newVersion" nullable="1" read-only="1" type="unsigned long long"/>
        <property name="oldVersion" read-only="1" type="unsigned long long"/>
      </properties>
    </interface>
    <interface name="IIRFilterNode" extends="AudioNode">
      <methods>
        <method name="getFrequencyResponse" type="void">
          <param name="frequencyHz" type="Float32Array"/>
          <param name="magResponse" type="Float32Array"/>
          <param name="phaseResponse" type="Float32Array"/>
        </method>
      </methods>
    </interface>
    <interface name="ImageData" extends="Object">
      <constructor>
        <param name="width" type="unsigned long"/>
        <param name="height" type="unsigned long"/>
      </constructor>
      <properties>
        <property name="data" read-only="1" type="Uint8ClampedArray"/>
        <property name="height" read-only="1" type="unsigned long"/>
        <property name="width" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="IntersectionObserver" exposed="Window" extends="Object">
      <constructor>
        <param name="callback" type="IntersectionObserverCallback"/>
        <param name="options" optional="1" type="IntersectionObserverInit"/>
      </constructor>
      <methods>
        <method name="disconnect" type="void"/>
        <method name="observe" type="void">
          <param name="target" type="Element"/>
        </method>
        <method name="takeRecords" type="sequence&lt;IntersectionObserverEntry&gt;"/>
        <method name="unobserve" type="void">
          <param name="target" type="Element"/>
        </method>
      </methods>
      <properties>
        <property name="root" nullable="1" read-only="1" type="Element"/>
        <property name="rootMargin" read-only="1" type="DOMString"/>
        <property name="thresholds" read-only="1" type="sequence&lt;double&gt;"/>
      </properties>
    </interface>
    <interface name="IntersectionObserverEntry" extends="Object">
      <constructor>
        <param name="intersectionObserverEntryInit" type="IntersectionObserverEntryInit"/>
      </constructor>
      <properties>
        <property name="boundingClientRect" read-only="1" type="ClientRect"/>
        <property name="intersectionRatio" read-only="1" type="double"/>
        <property name="intersectionRect" read-only="1" type="ClientRect"/>
        <property name="rootBounds" read-only="1" type="ClientRect"/>
        <property name="target" read-only="1" type="Element"/>
        <property name="time" read-only="1" type="DOMHighResTimeStamp"/>
      </properties>
    </interface>
    <interface name="KeyboardEvent" extends="UIEvent">
      <constants>
        <constant name="DOM_KEY_LOCATION_JOYSTICK" type="unsigned long" value="0x05"/>
        <constant name="DOM_KEY_LOCATION_LEFT" type="unsigned long" value="0x01"/>
        <constant name="DOM_KEY_LOCATION_MOBILE" type="unsigned long" value="0x04"/>
        <constant name="DOM_KEY_LOCATION_NUMPAD" type="unsigned long" value="0x03"/>
        <constant name="DOM_KEY_LOCATION_RIGHT" type="unsigned long" value="0x02"/>
        <constant name="DOM_KEY_LOCATION_STANDARD" type="unsigned long" value="0x00"/>
      </constants>
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="KeyboardEventInit"/>
      </constructor>
      <methods>
        <method name="getModifierState" type="boolean">
          <param name="keyArg" type="DOMString"/>
        </method>
        <method name="initKeyboardEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="viewArg" type="Window"/>
          <param name="keyArg" type="DOMString"/>
          <param name="locationArg" type="unsigned long"/>
          <param name="modifiersListArg" type="DOMString"/>
          <param name="repeat" type="boolean"/>
          <param name="locale" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="altKey" read-only="1" type="boolean"/>
        <property name="char" nullable="1" read-only="1" type="DOMString"/>
        <property name="charCode" read-only="1" type="short"/>
        <property name="ctrlKey" read-only="1" type="boolean"/>
        <property name="key" read-only="1" type="DOMString"/>
        <property name="keyCode" read-only="1" type="short"/>
        <property name="locale" read-only="1" type="DOMString"/>
        <property name="location" read-only="1" type="unsigned long"/>
        <property name="metaKey" read-only="1" type="boolean"/>
        <property name="repeat" read-only="1" type="boolean"/>
        <property name="shiftKey" read-only="1" type="boolean"/>
        <property name="which" read-only="1" type="short"/>
      </properties>
    </interface>
    <interface name="ListeningStateChangedEvent" extends="Event">
      <properties>
        <property name="label" read-only="1" type="DOMString"/>
        <property name="state" read-only="1" type="ListeningState"/>
      </properties>
    </interface>
    <interface name="Location" extends="Object">
      <methods>
        <method name="assign" property-descriptor-not-configurable="1" property-descriptor-not-writable="1" type="void">
          <param name="url" type="DOMString"/>
        </method>
        <method name="reload" property-descriptor-not-configurable="1" property-descriptor-not-writable="1" type="void">
          <param name="forcedReload" default="false" optional="1" type="boolean"/>
        </method>
        <method name="replace" property-descriptor-not-configurable="1" property-descriptor-not-writable="1" type="void">
          <param name="url" type="DOMString"/>
        </method>
        <method name="toString" property-descriptor-not-configurable="1" stringifier="1" type="DOMString"/>
      </methods>
      <properties>
        <property name="hash" property-descriptor-not-configurable="1" type="DOMString"/>
        <property name="host" property-descriptor-not-configurable="1" type="DOMString"/>
        <property name="hostname" property-descriptor-not-configurable="1" type="DOMString"/>
        <property name="href" property-descriptor-not-configurable="1" stringifier="1" type="DOMString"/>
        <property name="origin" read-only="1" type="DOMString"/>
        <property name="pathname" type="DOMString"/>
        <property name="port" type="DOMString"/>
        <property name="protocol" type="DOMString"/>
        <property name="search" property-descriptor-not-configurable="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="LongRunningScriptDetectedEvent" extends="Event" tags="MSAppOnly">
      <properties>
        <property name="executionTime" read-only="1" tags="MSAppOnly" type="long"/>
        <property name="stopPageScriptExecution" tags="MSAppOnly" type="boolean"/>
      </properties>
    </interface>
    <interface name="MediaDeviceInfo" extends="Object">
      <properties>
        <property name="deviceId" read-only="1" type="DOMString"/>
        <property name="groupId" read-only="1" type="DOMString"/>
        <property name="kind" read-only="1" type="MediaDeviceKind"/>
        <property name="label" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MediaDevices" extends="EventTarget">
      <events>
        <event name="devicechange" dispatch="sync" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="enumerateDevices" type="Promise&lt;sequence&lt;MediaDeviceInfo&gt;&gt;"/>
        <method name="getSupportedConstraints" type="MediaTrackSupportedConstraints"/>
        <method name="getUserMedia" type="Promise&lt;MediaStream&gt;">
          <param name="constraints" type="MediaStreamConstraints"/>
        </method>
      </methods>
      <properties>
        <property name="ondevicechange" event-handler="devicechange" type="EventHandler"/>
      </properties>
    </interface>
    <interface name="MediaElementAudioSourceNode" extends="AudioNode"/>
    <interface name="MediaEncryptedEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="MediaEncryptedEventInit"/>
      </constructor>
      <properties>
        <property name="initData" nullable="1" read-only="1" type="ArrayBuffer"/>
        <property name="initDataType" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MediaError" extends="Object">
      <constants>
        <constant name="MEDIA_ERR_ABORTED" type="unsigned short" value="1"/>
        <constant name="MEDIA_ERR_DECODE" type="unsigned short" value="3"/>
        <constant name="MEDIA_ERR_NETWORK" type="unsigned short" value="2"/>
        <constant name="MEDIA_ERR_SRC_NOT_SUPPORTED" type="unsigned short" value="4"/>
        <constant name="MS_MEDIA_ERR_ENCRYPTED" type="unsigned short" value="5"/>
      </constants>
      <properties>
        <property name="code" read-only="1" type="short"/>
        <property name="msExtendedCode" read-only="1" type="long"/>
      </properties>
    </interface>
    <interface name="MediaKeyMessageEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="MediaKeyMessageEventInit"/>
      </constructor>
      <properties>
        <property name="message" read-only="1" type="ArrayBuffer"/>
        <property name="messageType" read-only="1" type="MediaKeyMessageType"/>
      </properties>
    </interface>
    <interface name="MediaKeys" extends="Object">
      <methods>
        <method name="createSession" type="MediaKeySession">
          <param name="sessionType" default="&quot;temporary&quot;" optional="1" type="MediaKeySessionType"/>
        </method>
        <method name="setServerCertificate" type="Promise&lt;void&gt;">
          <param name="serverCertificate" type="BufferSource"/>
        </method>
      </methods>
    </interface>
    <interface name="MediaKeySession" extends="EventTarget">
      <events>
        <event name="keystatuseschange" dispatch="sync" type="Event"/>
        <event name="message" dispatch="sync" type="MediaKeyMessageEvent"/>
      </events>
      <methods>
        <method name="close" type="Promise&lt;void&gt;"/>
        <method name="generateRequest" type="Promise&lt;void&gt;">
          <param name="initDataType" type="DOMString"/>
          <param name="initData" type="BufferSource"/>
        </method>
        <method name="load" type="Promise&lt;boolean&gt;">
          <param name="sessionId" type="DOMString"/>
        </method>
        <method name="remove" type="Promise&lt;void&gt;"/>
        <method name="update" type="Promise&lt;void&gt;">
          <param name="response" type="BufferSource"/>
        </method>
      </methods>
      <properties>
        <property name="closed" read-only="1" type="Promise&lt;void&gt;"/>
        <property name="expiration" read-only="1" type="UnrestrictedDouble"/>
        <property name="keyStatuses" read-only="1" type="MediaKeyStatusMap"/>
        <property name="sessionId" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MediaKeyStatusMap" extends="Object">
      <methods>
        <method name="forEach" type="void">
          <param name="callback" type="ForEachCallback"/>
        </method>
        <method name="get" type="MediaKeyStatus">
          <param name="keyId" type="BufferSource"/>
        </method>
        <method name="has" type="boolean">
          <param name="keyId" type="BufferSource"/>
        </method>
      </methods>
      <properties>
        <property name="size" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="MediaKeySystemAccess" extends="Object">
      <methods>
        <method name="createMediaKeys" type="Promise&lt;MediaKeys&gt;"/>
        <method name="getConfiguration" type="MediaKeySystemConfiguration"/>
      </methods>
      <properties>
        <property name="keySystem" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MediaList" extends="Object">
      <methods>
        <method name="appendMedium" type="void">
          <param name="newMedium" type="DOMString"/>
        </method>
        <method name="deleteMedium" type="void">
          <param name="oldMedium" type="DOMString"/>
        </method>
        <method name="item" getter="1" type="DOMString">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="toString" stringifier="1" type="DOMString"/>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="mediaText" stringifier="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MediaQueryList" extends="Object">
      <methods>
        <method name="addListener" type="void">
          <param name="listener" type="MediaQueryListListener"/>
        </method>
        <method name="removeListener" type="void">
          <param name="listener" type="MediaQueryListListener"/>
        </method>
      </methods>
      <properties>
        <property name="matches" read-only="1" type="boolean"/>
        <property name="media" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MediaSource" extends="EventTarget">
      <constructor/>
      <events>
        <event name="sourceopen" dispatch="sync" precedes="sourceended sourceclose" skips-window="1" type="Event"/>
        <event name="sourceended" dispatch="sync" follows="sourceopen" precedes="sourceclose" skips-window="1" type="Event"/>
        <event name="sourceclose" dispatch="sync" follows="sourceended sourceopen" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="addSourceBuffer" type="SourceBuffer">
          <param name="type" type="DOMString"/>
        </method>
        <method name="endOfStream" type="void">
          <param name="error" optional="1" type="EndOfStreamError"/>
        </method>
        <method name="isTypeSupported" static="1" type="boolean">
          <param name="type" type="DOMString"/>
        </method>
        <method name="removeSourceBuffer" type="void">
          <param name="sourceBuffer" type="SourceBuffer"/>
        </method>
      </methods>
      <properties>
        <property name="activeSourceBuffers" read-only="1" type="SourceBufferList"/>
        <property name="duration" type="double"/>
        <property name="readyState" read-only="1" type="ReadyState"/>
        <property name="sourceBuffers" read-only="1" type="SourceBufferList"/>
      </properties>
    </interface>
    <interface name="MediaStream" extends="EventTarget">
      <constructor>
        <param name="streamOrTracks" optional="1" type="(MediaStream or sequence&lt;MediaStreamTrack&gt;)"/>
      </constructor>
      <events>
        <event name="active" dispatch="sync" skips-window="1" type="Event"/>
        <event name="inactive" dispatch="sync" skips-window="1" type="Event"/>
        <event name="addtrack" dispatch="sync" skips-window="1" type="MediaStreamTrackEvent"/>
        <event name="removetrack" dispatch="sync" skips-window="1" type="MediaStreamTrackEvent"/>
      </events>
      <methods>
        <method name="addTrack" type="void">
          <param name="track" type="MediaStreamTrack"/>
        </method>
        <method name="clone" type="MediaStream"/>
        <method name="getAudioTracks" type="sequence&lt;MediaStreamTrack&gt;"/>
        <method name="getTrackById" nullable="1" type="MediaStreamTrack">
          <param name="trackId" type="DOMString"/>
        </method>
        <method name="getTracks" type="sequence&lt;MediaStreamTrack&gt;"/>
        <method name="getVideoTracks" type="sequence&lt;MediaStreamTrack&gt;"/>
        <method name="removeTrack" type="void">
          <param name="track" type="MediaStreamTrack"/>
        </method>
        <method name="stop" type="void"/>
      </methods>
      <properties>
        <property name="active" read-only="1" type="boolean"/>
        <property name="id" read-only="1" type="DOMString"/>
        <property name="onactive" event-handler="active" type="EventHandler"/>
        <property name="onaddtrack" event-handler="addtrack" type="EventHandler"/>
        <property name="oninactive" event-handler="inactive" type="EventHandler"/>
        <property name="onremovetrack" event-handler="removetrack" type="EventHandler"/>
      </properties>
    </interface>
    <interface name="MediaStreamAudioSourceNode" extends="AudioNode"/>
    <interface name="MediaStreamError" extends="Object">
      <properties>
        <property name="constraintName" nullable="1" read-only="1" type="DOMString"/>
        <property name="message" nullable="1" read-only="1" type="DOMString"/>
        <property name="name" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MediaStreamErrorEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="MediaStreamErrorEventInit"/>
      </constructor>
      <properties>
        <property name="error" nullable="1" read-only="1" type="MediaStreamError"/>
      </properties>
    </interface>
    <interface name="MediaStreamEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" type="MediaStreamEventInit"/>
      </constructor>
      <properties>
        <property name="stream" nullable="1" read-only="1" type="MediaStream"/>
      </properties>
    </interface>
    <interface name="MediaStreamTrack" extends="EventTarget">
      <events>
        <event name="mute" dispatch="sync" skips-window="1" type="Event"/>
        <event name="unmute" dispatch="sync" skips-window="1" type="Event"/>
        <event name="ended" dispatch="sync" skips-window="1" type="MediaStreamErrorEvent"/>
        <event name="overconstrained" dispatch="sync" skips-window="1" type="MediaStreamErrorEvent"/>
      </events>
      <methods>
        <method name="applyConstraints" type="Promise&lt;void&gt;">
          <param name="constraints" type="MediaTrackConstraints"/>
        </method>
        <method name="clone" type="MediaStreamTrack"/>
        <method name="getCapabilities" type="MediaTrackCapabilities"/>
        <method name="getConstraints" type="MediaTrackConstraints"/>
        <method name="getSettings" type="MediaTrackSettings"/>
        <method name="stop" type="void"/>
      </methods>
      <properties>
        <property name="enabled" type="boolean"/>
        <property name="id" read-only="1" type="DOMString"/>
        <property name="kind" read-only="1" type="DOMString"/>
        <property name="label" read-only="1" type="DOMString"/>
        <property name="muted" read-only="1" type="boolean"/>
        <property name="onended" event-handler="ended" type="EventHandler"/>
        <property name="onmute" event-handler="mute" type="EventHandler"/>
        <property name="onoverconstrained" event-handler="overconstrained" type="EventHandler"/>
        <property name="onunmute" event-handler="unmute" type="EventHandler"/>
        <property name="readonly" read-only="1" type="boolean"/>
        <property name="readyState" read-only="1" type="MediaStreamTrackState"/>
        <property name="remote" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="MediaStreamTrackEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="MediaStreamTrackEventInit"/>
      </constructor>
      <properties>
        <property name="track" read-only="1" type="MediaStreamTrack"/>
      </properties>
    </interface>
    <interface name="MessageChannel" extends="Object">
      <constructor/>
      <properties>
        <property name="port1" read-only="1" type="MessagePort"/>
        <property name="port2" read-only="1" type="MessagePort"/>
      </properties>
    </interface>
    <interface name="MessageEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="MessageEventInit"/>
      </constructor>
      <methods>
        <method name="initMessageEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="dataArg" type="any"/>
          <param name="originArg" type="DOMString"/>
          <param name="lastEventIdArg" type="DOMString"/>
          <param name="sourceArg" type="Window"/>
        </method>
      </methods>
      <properties>
        <property name="data" read-only="1" type="any"/>
        <property name="origin" read-only="1" type="DOMString"/>
        <property name="ports" read-only="1" type="any"/>
        <property name="source" read-only="1" type="Window"/>
      </properties>
    </interface>
    <interface name="MessagePort" extends="EventTarget">
      <events>
        <event name="message" dispatch="async" skips-window="1" type="MessageEvent"/>
      </events>
      <methods>
        <method name="close" type="void"/>
        <method name="postMessage" type="void">
          <param name="message" optional="1" type="any"/>
          <param name="transfer" optional="1" type="sequence&lt;Transferable&gt;"/>
        </method>
        <method name="start" type="void"/>
      </methods>
      <properties>
        <property name="onmessage" event-handler="message" type="EventHandler"/>
      </properties>
    </interface>
    <interface name="MimeType" extends="Object">
      <properties>
        <property name="description" read-only="1" type="DOMString"/>
        <property name="enabledPlugin" read-only="1" type="Plugin"/>
        <property name="suffixes" read-only="1" type="DOMString"/>
        <property name="type" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MimeTypeArray" extends="Object">
      <methods>
        <method name="item" getter="1" type="Plugin">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="namedItem" getter="1" type="Plugin">
          <param name="type" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="MouseEvent" extends="UIEvent">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="MouseEventInit"/>
      </constructor>
      <methods>
        <method name="getModifierState" type="boolean">
          <param name="keyArg" type="DOMString"/>
        </method>
        <method name="initMouseEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="viewArg" type="Window"/>
          <param name="detailArg" type="long"/>
          <param name="screenXArg" type="long"/>
          <param name="screenYArg" type="long"/>
          <param name="clientXArg" type="long"/>
          <param name="clientYArg" type="long"/>
          <param name="ctrlKeyArg" type="boolean"/>
          <param name="altKeyArg" type="boolean"/>
          <param name="shiftKeyArg" type="boolean"/>
          <param name="metaKeyArg" type="boolean"/>
          <param name="buttonArg" type="unsigned short"/>
          <param name="relatedTargetArg" type="EventTarget"/>
        </method>
      </methods>
      <properties>
        <property name="altKey" read-only="1" type="boolean"/>
        <property name="button" read-only="1" type="unsigned short"/>
        <property name="buttons" read-only="1" type="unsigned short"/>
        <property name="clientX" read-only="1" type="long"/>
        <property name="clientY" read-only="1" type="long"/>
        <property name="ctrlKey" read-only="1" type="boolean"/>
        <property name="fromElement" read-only="1" type="Element"/>
        <property name="layerX" read-only="1" type="long"/>
        <property name="layerY" read-only="1" type="long"/>
        <property name="metaKey" read-only="1" type="boolean"/>
        <property name="movementX" read-only="1" type="long"/>
        <property name="movementY" read-only="1" type="long"/>
        <property name="offsetX" read-only="1" type="long"/>
        <property name="offsetY" read-only="1" type="long"/>
        <property name="pageX" read-only="1" type="long"/>
        <property name="pageY" read-only="1" type="long"/>
        <property name="relatedTarget" read-only="1" type="EventTarget"/>
        <property name="screenX" read-only="1" type="long"/>
        <property name="screenY" read-only="1" type="long"/>
        <property name="shiftKey" read-only="1" type="boolean"/>
        <property name="toElement" read-only="1" type="Element"/>
        <property name="which" read-only="1" type="unsigned short"/>
        <property name="x" read-only="1" type="long"/>
        <property name="y" read-only="1" type="long"/>
      </properties>
    </interface>
    <interface name="MSApp" extends="Object" static="1" tags="MSAppOnly">
      <constants>
        <constant name="CURRENT" type="DOMString" value="current"/>
        <constant name="HIGH" type="DOMString" value="high"/>
        <constant name="IDLE" type="DOMString" value="idle"/>
        <constant name="NORMAL" type="DOMString" value="normal"/>
      </constants>
      <methods>
        <method name="clearTemporaryWebDataAsync" static="1" tags="MSAppOnly" type="MSAppAsyncOperation"/>
        <method name="createBlobFromRandomAccessStream" property-descriptor-not-configurable="1" property-descriptor-not-writable="1" static="1" tags="MSAppOnly" type="Blob">
          <param name="type" type="DOMString"/>
          <param name="seeker" type="any"/>
        </method>
        <method name="createDataPackage" property-descriptor-not-configurable="1" property-descriptor-not-writable="1" static="1" tags="MSAppOnly" type="any">
          <param name="object" type="any"/>
        </method>
        <method name="createDataPackageFromSelection" property-descriptor-not-configurable="1" property-descriptor-not-writable="1" static="1" tags="MSAppOnly" type="any"/>
        <method name="createFileFromStorageFile" property-descriptor-not-configurable="1" property-descriptor-not-writable="1" static="1" tags="MSAppOnly" type="File">
          <param name="storageFile" type="any"/>
        </method>
        <method name="createStreamFromInputStream" property-descriptor-not-configurable="1" property-descriptor-not-writable="1" static="1" tags="MSAppOnly" type="MSStream">
          <param name="type" type="DOMString"/>
          <param name="inputStream" type="any"/>
        </method>
        <method name="execAsyncAtPriority" static="1" type="void">
          <param name="asynchronousCallback" type="MSExecAtPriorityFunctionCallback"/>
          <param name="priority" type="DOMString"/>
          <param name="args" type="any" variadic="1"/>
        </method>
        <method name="execAtPriority" static="1" type="any">
          <param name="synchronousCallback" type="MSExecAtPriorityFunctionCallback"/>
          <param name="priority" type="DOMString"/>
          <param name="args" type="any" variadic="1"/>
        </method>
        <method name="getCurrentPriority" static="1" type="DOMString"/>
        <method name="getHtmlPrintDocumentSourceAsync" property-descriptor-not-configurable="1" property-descriptor-not-writable="1" static="1" tags="MSAppOnly" type="Promise&lt;any&gt;">
          <param name="htmlDoc" type="any"/>
        </method>
        <method name="getViewId" static="1" tags="MSAppOnly" type="any">
          <param name="view" type="any"/>
        </method>
        <method name="isTaskScheduledAtPriorityOrHigher" static="1" type="boolean">
          <param name="priority" type="DOMString"/>
        </method>
        <method name="pageHandlesAllApplicationActivations" static="1" tags="MSAppOnly" type="void">
          <param name="enabled" type="boolean"/>
        </method>
        <method name="suppressSubdownloadCredentialPrompts" static="1" tags="MSAppOnly" type="void">
          <param name="suppress" type="boolean"/>
        </method>
        <method name="terminateApp" property-descriptor-not-configurable="1" property-descriptor-not-writable="1" static="1" tags="MSAppOnly" type="void">
          <param name="exceptionObject" type="any"/>
        </method>
      </methods>
    </interface>
    <interface name="MSAppAsyncOperation" extends="EventTarget" tags="MSAppOnly">
      <constants>
        <constant name="COMPLETED" tags="MSAppOnly" type="unsigned short" value="1"/>
        <constant name="ERROR" tags="MSAppOnly" type="unsigned short" value="2"/>
        <constant name="STARTED" tags="MSAppOnly" type="unsigned short" value="0"/>
      </constants>
      <events>
        <event name="error" dispatch="sync" skips-window="1" tags="MSAppOnly" type="Event"/>
        <event name="complete" dispatch="sync" skips-window="1" tags="MSAppOnly" type="Event"/>
      </events>
      <methods>
        <method name="start" tags="MSAppOnly" type="void"/>
      </methods>
      <properties>
        <property name="error" read-only="1" tags="MSAppOnly" type="DOMError"/>
        <property name="oncomplete" event-handler="complete" tags="MSAppOnly" type="EventHandler"/>
        <property name="onerror" event-handler="error" tags="MSAppOnly" type="EventHandler"/>
        <property name="readyState" read-only="1" tags="MSAppOnly" type="unsigned short"/>
        <property name="result" read-only="1" tags="MSAppOnly" type="any"/>
      </properties>
    </interface>
    <interface name="MSAssertion" extends="Object">
      <properties>
        <property name="id" read-only="1" type="DOMString"/>
        <property name="type" read-only="1" type="MSCredentialType"/>
      </properties>
    </interface>
    <interface name="MSBlobBuilder" extends="Object">
      <constructor/>
      <methods>
        <method name="append" type="void">
          <param name="data" type="any"/>
          <param name="endings" optional="1" type="DOMString"/>
        </method>
        <method name="getBlob" type="Blob">
          <param name="contentType" optional="1" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="MSCredentials" extends="Object">
      <methods>
        <method name="getAssertion" type="Promise&lt;MSAssertion&gt;">
          <param name="challenge" type="DOMString"/>
          <param name="filter" optional="1" type="MSCredentialFilter"/>
          <param name="params" optional="1" type="MSSignatureParameters"/>
        </method>
        <method name="makeCredential" type="Promise&lt;MSAssertion&gt;">
          <param name="accountInfo" type="MSAccountInfo"/>
          <param name="params" type="sequence&lt;MSCredentialParameters&gt;"/>
          <param name="challenge" optional="1" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="MSFIDOCredentialAssertion" extends="MSAssertion">
      <properties>
        <property name="algorithm" read-only="1" type="(DOMString or Algorithm)" type-original="AlgorithmIdentifier"/>
        <property name="attestation" nullable="1" read-only="1" type="MSAttestationStatement"/>
        <property name="publicKey" read-only="1" type="DOMString"/>
        <property name="transportHints" read-only="1" type="sequence&lt;MSTransportType&gt;"/>
      </properties>
    </interface>
    <interface name="MSFIDOSignature" extends="Object">
      <properties>
        <property name="authnrData" read-only="1" type="DOMString"/>
        <property name="clientData" read-only="1" type="DOMString"/>
        <property name="signature" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MSFIDOSignatureAssertion" extends="MSAssertion">
      <properties>
        <property name="signature" read-only="1" type="MSFIDOSignature"/>
      </properties>
    </interface>
    <interface name="MSGesture" extends="Object">
      <constructor/>
      <methods>
        <method name="addPointer" type="void">
          <param name="pointerId" type="long"/>
        </method>
        <method name="stop" type="void"/>
      </methods>
      <properties>
        <property name="target" type="Element"/>
      </properties>
    </interface>
    <interface name="MSGestureEvent" extends="UIEvent">
      <constants>
        <constant name="MSGESTURE_FLAG_BEGIN" type="unsigned long" value="0x00000001"/>
        <constant name="MSGESTURE_FLAG_CANCEL" type="unsigned long" value="0x00000004"/>
        <constant name="MSGESTURE_FLAG_END" type="unsigned long" value="0x00000002"/>
        <constant name="MSGESTURE_FLAG_INERTIA" type="unsigned long" value="0x00000008"/>
        <constant name="MSGESTURE_FLAG_NONE" type="unsigned long" value="0x00000000"/>
      </constants>
      <methods>
        <method name="initGestureEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="viewArg" type="Window"/>
          <param name="detailArg" type="long"/>
          <param name="screenXArg" type="long"/>
          <param name="screenYArg" type="long"/>
          <param name="clientXArg" type="float"/>
          <param name="clientYArg" type="float"/>
          <param name="offsetXArg" type="float"/>
          <param name="offsetYArg" type="float"/>
          <param name="translationXArg" type="float"/>
          <param name="translationYArg" type="float"/>
          <param name="scaleArg" type="float"/>
          <param name="expansionArg" type="float"/>
          <param name="rotationArg" type="float"/>
          <param name="velocityXArg" type="float"/>
          <param name="velocityYArg" type="float"/>
          <param name="velocityExpansionArg" type="float"/>
          <param name="velocityAngularArg" type="float"/>
          <param name="hwTimestampArg" type="unsigned long long"/>
        </method>
      </methods>
      <properties>
        <property name="clientX" read-only="1" type="float"/>
        <property name="clientY" read-only="1" type="float"/>
        <property name="expansion" read-only="1" type="float"/>
        <property name="gestureObject" read-only="1" type="any"/>
        <property name="hwTimestamp" read-only="1" type="unsigned long long"/>
        <property name="offsetX" read-only="1" type="float"/>
        <property name="offsetY" read-only="1" type="float"/>
        <property name="rotation" read-only="1" type="float"/>
        <property name="scale" read-only="1" type="float"/>
        <property name="screenX" read-only="1" type="long"/>
        <property name="screenY" read-only="1" type="long"/>
        <property name="translationX" read-only="1" type="float"/>
        <property name="translationY" read-only="1" type="float"/>
        <property name="velocityAngular" read-only="1" type="float"/>
        <property name="velocityExpansion" read-only="1" type="float"/>
        <property name="velocityX" read-only="1" type="float"/>
        <property name="velocityY" read-only="1" type="float"/>
      </properties>
    </interface>
    <interface name="MSGraphicsTrust" extends="Object">
      <properties>
        <property name="constrictionActive" read-only="1" type="boolean"/>
        <property name="status" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MSHTMLWebViewElement" extends="HTMLElement" tags="MSAppOnly">
      <element name="x-ms-webview" namespace="HTML"/>
      <events>
        <event name="MSWebViewNavigationStarting" cancelable="1" dispatch="sync" precedes="MSWebViewContentLoading" tags="MSAppOnly" type="NavigationEvent"/>
        <event name="MSWebViewContentLoading" dispatch="sync" follows="MSWebViewNavigationStarting" precedes="MSWebViewDOMContentLoaded" tags="MSAppOnly" type="NavigationEvent"/>
        <event name="MSWebViewDOMContentLoaded" dispatch="sync" follows="MSWebViewContentLoading" precedes="MSWebViewNavigationCompleted" tags="MSAppOnly" type="NavigationEvent"/>
        <event name="MSWebViewNavigationCompleted" dispatch="sync" follows="MSWebViewDOMContentLoaded" tags="MSAppOnly" type="NavigationCompletedEvent"/>
        <event name="MSWebViewScriptNotify" dispatch="sync" tags="MSAppOnly" type="ScriptNotifyEvent"/>
        <event name="MSWebViewUnsafeContentWarningDisplaying" dispatch="sync" tags="MSAppOnly" type="Event"/>
        <event name="MSWebViewContainsFullScreenElementChanged" dispatch="sync" tags="MSAppOnly" type="Event"/>
        <event name="MSWebViewLongRunningScriptDetected" dispatch="sync" tags="MSAppOnly" type="LongRunningScriptDetectedEvent"/>
        <event name="MSWebViewUnviewableContentIdentified" dispatch="sync" tags="MSAppOnly" type="UnviewableContentIdentifiedEvent"/>
        <event name="MSWebViewPermissionRequested" dispatch="sync" tags="MSAppOnly" type="PermissionRequestedEvent"/>
        <event name="MSWebViewUnsupportedUriSchemeIdentified" cancelable="1" dispatch="sync" tags="MSAppOnly" type="NavigationEvent"/>
        <event name="MSWebViewNewWindowRequested" dispatch="sync" tags="MSAppOnly" type="NavigationEventWithReferrer"/>
        <event name="MSWebViewFrameNavigationStarting" cancelable="1" dispatch="sync" precedes="MSWebViewFrameContentLoading" tags="MSAppOnly" type="NavigationEvent"/>
        <event name="MSWebViewFrameNavigationCompleted" dispatch="sync" follows="MSWebViewFrameDOMContentLoaded" tags="MSAppOnly" type="NavigationCompletedEvent"/>
        <event name="MSWebViewFrameDOMContentLoaded" dispatch="sync" follows="MSWebViewFrameContentLoading" precedes="MSWebViewFrameNavigationCompleted" tags="MSAppOnly" type="NavigationEvent"/>
        <event name="MSWebViewFrameContentLoading" dispatch="sync" follows="MSWebViewFrameNavigationStarting" precedes="MSWebViewFrameDOMContentLoaded" tags="MSAppOnly" type="NavigationEvent"/>
        <event name="departingfocus" bubbles="1" dispatch="sync" type="FocusNavigationEvent"/>
      </events>
      <methods>
        <method name="addWebAllowedObject" tags="MSAppOnly" type="void">
          <param name="name" type="DOMString"/>
          <param name="applicationObject" type="any"/>
        </method>
        <method name="buildLocalStreamUri" tags="MSAppOnly" type="DOMString">
          <param name="contentIdentifier" type="DOMString"/>
          <param name="relativePath" type="DOMString"/>
        </method>
        <method name="capturePreviewToBlobAsync" tags="MSAppOnly" type="MSWebViewAsyncOperation"/>
        <method name="captureSelectedContentToDataPackageAsync" tags="MSAppOnly" type="MSWebViewAsyncOperation"/>
        <method name="getDeferredPermissionRequestById" tags="MSAppOnly" type="DeferredPermissionRequest">
          <param name="id" type="unsigned long"/>
        </method>
        <method name="getDeferredPermissionRequests" tags="MSAppOnly" type="sequence&lt;DeferredPermissionRequest&gt;"/>
        <method name="goBack" tags="MSAppOnly" type="void"/>
        <method name="goForward" tags="MSAppOnly" type="void"/>
        <method name="invokeScriptAsync" tags="MSAppOnly" type="MSWebViewAsyncOperation">
          <param name="scriptName" type="DOMString"/>
          <param name="args" type="any" variadic="1"/>
        </method>
        <method name="navigate" tags="MSAppOnly" type="void">
          <param name="uri" type="DOMString"/>
        </method>
        <method name="navigateFocus" tags="MSAppOnly" type="void">
          <param name="navigationReason" type="NavigationReason"/>
          <param name="origin" type="FocusNavigationOrigin"/>
        </method>
        <method name="navigateToLocalStreamUri" tags="MSAppOnly" type="void">
          <param name="source" type="DOMString"/>
          <param name="streamResolver" type="any"/>
        </method>
        <method name="navigateToString" tags="MSAppOnly" type="void">
          <param name="contents" type="DOMString"/>
        </method>
        <method name="navigateWithHttpRequestMessage" tags="MSAppOnly" type="void">
          <param name="requestMessage" type="any"/>
        </method>
        <method name="refresh" tags="MSAppOnly" type="void"/>
        <method name="stop" tags="MSAppOnly" type="void"/>
      </methods>
      <properties>
        <property name="canGoBack" read-only="1" tags="MSAppOnly" type="bool"/>
        <property name="canGoForward" read-only="1" tags="MSAppOnly" type="bool"/>
        <property name="containsFullScreenElement" read-only="1" tags="MSAppOnly" type="bool"/>
        <property name="documentTitle" read-only="1" tags="MSAppOnly" type="DOMString"/>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" tags="MSAppOnly" type="unsigned long"/>
        <property name="settings" read-only="1" tags="MSAppOnly" type="MSWebViewSettings"/>
        <property name="src" tags="MSAppOnly" type="DOMString"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="non_negative_integer" tags="MSAppOnly" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="MSInputMethodContext" extends="EventTarget">
      <events>
        <event name="MSCandidateWindowShow" dispatch="sync" precedes="MSCandidateWindowUpdate MSCandidateWindowHide" skips-window="1" tags="IEOnly" type="Event"/>
        <event name="MSCandidateWindowUpdate" dispatch="sync" follows="MSCandidateWindowShow" precedes="MSCandidateWindowHide" skips-window="1" tags="IEOnly" type="Event"/>
        <event name="MSCandidateWindowHide" dispatch="sync" follows="MSCandidateWindowShow MSCandidateWindowUpdate" skips-window="1" tags="IEOnly" type="Event"/>
      </events>
      <methods>
        <method name="getCandidateWindowClientRect" type="ClientRect"/>
        <method name="getCompositionAlternatives" type="sequence&lt;DOMString&gt;"/>
        <method name="hasComposition" type="boolean"/>
        <method name="isCandidateWindowVisible" type="boolean"/>
      </methods>
      <properties>
        <property name="compositionEndOffset" read-only="1" type="unsigned long"/>
        <property name="compositionStartOffset" read-only="1" type="unsigned long"/>
        <property name="oncandidatewindowhide" event-handler="MSCandidateWindowHide" type="EventHandler"/>
        <property name="oncandidatewindowshow" event-handler="MSCandidateWindowShow" type="EventHandler"/>
        <property name="oncandidatewindowupdate" event-handler="MSCandidateWindowUpdate" type="EventHandler"/>
        <property name="target" read-only="1" type="HTMLElement"/>
      </properties>
    </interface>
    <interface name="MSManipulationEvent" extends="UIEvent" tags="IEOnly">
      <constants>
        <constant name="MS_MANIPULATION_STATE_ACTIVE" tags="IEOnly" type="unsigned short" value="1"/>
        <constant name="MS_MANIPULATION_STATE_CANCELLED" tags="IEOnly" type="unsigned short" value="6"/>
        <constant name="MS_MANIPULATION_STATE_COMMITTED" tags="IEOnly" type="unsigned short" value="7"/>
        <constant name="MS_MANIPULATION_STATE_DRAGGING" tags="IEOnly" type="unsigned short" value="5"/>
        <constant name="MS_MANIPULATION_STATE_INERTIA" tags="IEOnly" type="unsigned short" value="2"/>
        <constant name="MS_MANIPULATION_STATE_PRESELECT" tags="IEOnly" type="unsigned short" value="3"/>
        <constant name="MS_MANIPULATION_STATE_SELECTING" tags="IEOnly" type="unsigned short" value="4"/>
        <constant name="MS_MANIPULATION_STATE_STOPPED" tags="IEOnly" type="unsigned short" value="0"/>
      </constants>
      <methods>
        <method name="initMSManipulationEvent" tags="IEOnly" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="viewArg" type="Window"/>
          <param name="detailArg" type="long"/>
          <param name="lastState" type="long"/>
          <param name="currentState" type="long"/>
        </method>
      </methods>
      <properties>
        <property name="currentState" read-only="1" tags="IEOnly" type="long"/>
        <property name="inertiaDestinationX" read-only="1" tags="IEOnly" type="long"/>
        <property name="inertiaDestinationY" read-only="1" tags="IEOnly" type="long"/>
        <property name="lastState" read-only="1" tags="IEOnly" type="long"/>
      </properties>
    </interface>
    <interface name="MSMediaKeyError" extends="Object">
      <constants>
        <constant name="MS_MEDIA_KEYERR_CLIENT" type="unsigned short" value="2"/>
        <constant name="MS_MEDIA_KEYERR_DOMAIN" type="unsigned short" value="6"/>
        <constant name="MS_MEDIA_KEYERR_HARDWARECHANGE" type="unsigned short" value="5"/>
        <constant name="MS_MEDIA_KEYERR_OUTPUT" type="unsigned short" value="4"/>
        <constant name="MS_MEDIA_KEYERR_SERVICE" type="unsigned short" value="3"/>
        <constant name="MS_MEDIA_KEYERR_UNKNOWN" type="unsigned short" value="1"/>
      </constants>
      <properties>
        <property name="code" read-only="1" type="unsigned short"/>
        <property name="systemCode" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="MSMediaKeyMessageEvent" extends="Event">
      <properties>
        <property name="destinationURL" nullable="1" read-only="1" type="DOMString"/>
        <property name="message" read-only="1" type="Uint8Array"/>
      </properties>
    </interface>
    <interface name="MSMediaKeyNeededEvent" extends="Event">
      <properties>
        <property name="initData" nullable="1" read-only="1" type="Uint8Array"/>
      </properties>
    </interface>
    <interface name="MSMediaKeys" extends="Object">
      <constructor>
        <param name="keySystem" type="DOMString"/>
      </constructor>
      <methods>
        <method name="createSession" type="MSMediaKeySession">
          <param name="type" type="DOMString"/>
          <param name="initData" type="Uint8Array"/>
          <param name="cdmData" nullable="1" optional="1" type="Uint8Array"/>
        </method>
        <method name="isTypeSupported" static="1" type="bool">
          <param name="keySystem" type="DOMString"/>
          <param name="type" nullable="1" optional="1" type="DOMString"/>
        </method>
        <method name="isTypeSupportedWithFeatures" static="1" type="DOMString">
          <param name="keySystem" type="DOMString"/>
          <param name="type" nullable="1" optional="1" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="keySystem" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MSMediaKeySession" extends="EventTarget">
      <events>
        <event name="mskeymessage" dispatch="sync" skips-window="1" tags="IEOnly" type="MSMediaKeyMessageEvent"/>
        <event name="mskeyadded" dispatch="sync" skips-window="1" tags="IEOnly" type="Event"/>
        <event name="mskeyerror" dispatch="sync" skips-window="1" tags="IEOnly" type="Event"/>
      </events>
      <methods>
        <method name="close" type="void"/>
        <method name="update" type="void">
          <param name="key" type="Uint8Array"/>
        </method>
      </methods>
      <properties>
        <property name="error" nullable="1" read-only="1" type="MSMediaKeyError"/>
        <property name="keySystem" read-only="1" type="DOMString"/>
        <property name="sessionId" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MSPointerEvent" extends="MouseEvent">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="PointerEventInit"/>
      </constructor>
      <methods>
        <method name="getCurrentPoint" type="void">
          <param name="element" type="Element"/>
        </method>
        <method name="getIntermediatePoints" type="void">
          <param name="element" type="Element"/>
        </method>
        <method name="initPointerEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="viewArg" type="Window"/>
          <param name="detailArg" type="long"/>
          <param name="screenXArg" type="long"/>
          <param name="screenYArg" type="long"/>
          <param name="clientXArg" type="float"/>
          <param name="clientYArg" type="float"/>
          <param name="ctrlKeyArg" type="boolean"/>
          <param name="altKeyArg" type="boolean"/>
          <param name="shiftKeyArg" type="boolean"/>
          <param name="metaKeyArg" type="boolean"/>
          <param name="buttonArg" type="unsigned short"/>
          <param name="relatedTargetArg" type="EventTarget"/>
          <param name="offsetXArg" type="float"/>
          <param name="offsetYArg" type="float"/>
          <param name="widthArg" type="long"/>
          <param name="heightArg" type="long"/>
          <param name="pressure" type="float"/>
          <param name="rotation" type="long"/>
          <param name="tiltX" type="long"/>
          <param name="tiltY" type="long"/>
          <param name="pointerIdArg" type="long"/>
          <param name="pointerType" type="any"/>
          <param name="hwTimestampArg" type="unsigned long long"/>
          <param name="isPrimary" type="boolean"/>
        </method>
      </methods>
      <properties>
        <property name="currentPoint" read-only="1" type="any"/>
        <property name="height" read-only="1" type="long"/>
        <property name="hwTimestamp" read-only="1" type="unsigned long long"/>
        <property name="intermediatePoints" read-only="1" type="any"/>
        <property name="isPrimary" read-only="1" type="boolean"/>
        <property name="pointerId" read-only="1" type="long"/>
        <property name="pointerType" read-only="1" type="any"/>
        <property name="pressure" read-only="1" type="float"/>
        <property name="rotation" read-only="1" type="long"/>
        <property name="tiltX" read-only="1" type="long"/>
        <property name="tiltY" read-only="1" type="long"/>
        <property name="width" read-only="1" type="long"/>
      </properties>
    </interface>
    <interface name="MSRangeCollection" extends="Object">
      <methods>
        <method name="item" getter="1" type="Range">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="MSSiteModeEvent" extends="Event">
      <properties>
        <property name="actionURL" read-only="1" type="DOMString"/>
        <property name="buttonID" read-only="1" type="long"/>
      </properties>
    </interface>
    <interface name="MSStream" extends="Object">
      <methods>
        <method name="msClose" type="void"/>
        <method name="msDetachStream" type="any"/>
      </methods>
      <properties>
        <property name="type" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MSStreamReader" extends="EventTarget">
      <constructor/>
      <events>
        <event name="load" dispatch="sync" follows="progress" precedes="loadend" skips-window="1" tags="IEOnly" type="ProgressEvent"/>
        <event name="loadstart" dispatch="sync" precedes="progress" skips-window="1" tags="IEOnly" type="ProgressEvent"/>
        <event name="loadend" dispatch="sync" follows="load" skips-window="1" tags="IEOnly" type="ProgressEvent"/>
        <event name="progress" dispatch="sync" follows="loadstart" precedes="load" skips-window="1" tags="IEOnly" type="ProgressEvent"/>
        <event name="abort" dispatch="sync" skips-window="1" tags="IEOnly" type="ProgressEvent"/>
        <event name="error" dispatch="sync" skips-window="1" tags="IEOnly" type="ProgressEvent"/>
      </events>
      <implements>MSBaseReader</implements>
      <methods>
        <method name="readAsArrayBuffer" type="void">
          <param name="stream" type="MSStream"/>
          <param name="size" default="-1" optional="1" type="long long"/>
        </method>
        <method name="readAsBinaryString" type="void">
          <param name="stream" type="MSStream"/>
          <param name="size" default="-1" optional="1" type="long long"/>
        </method>
        <method name="readAsBlob" type="void">
          <param name="stream" type="MSStream"/>
          <param name="size" default="-1" optional="1" type="long long"/>
        </method>
        <method name="readAsDataURL" type="void">
          <param name="stream" type="MSStream"/>
          <param name="size" default="-1" optional="1" type="long long"/>
        </method>
        <method name="readAsText" type="void">
          <param name="stream" type="MSStream"/>
          <param name="encoding" optional="1" type="DOMString"/>
          <param name="size" default="-1" optional="1" type="long long"/>
        </method>
      </methods>
      <properties>
        <property name="error" read-only="1" type="DOMError"/>
      </properties>
    </interface>
    <interface name="MSWebViewAsyncOperation" extends="EventTarget" tags="MSAppOnly">
      <constants>
        <constant name="COMPLETED" tags="MSAppOnly" type="unsigned short" value="1"/>
        <constant name="ERROR" tags="MSAppOnly" type="unsigned short" value="2"/>
        <constant name="STARTED" tags="MSAppOnly" type="unsigned short" value="0"/>
        <constant name="TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM" tags="MSAppOnly" type="unsigned short" value="0"/>
        <constant name="TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION" tags="MSAppOnly" type="unsigned short" value="2"/>
        <constant name="TYPE_INVOKE_SCRIPT" tags="MSAppOnly" type="unsigned short" value="1"/>
      </constants>
      <events>
        <event name="complete" dispatch="sync" skips-window="1" tags="MSAppOnly" type="Event"/>
        <event name="error" dispatch="sync" skips-window="1" tags="MSAppOnly" type="Event"/>
      </events>
      <methods>
        <method name="start" tags="MSAppOnly" type="void"/>
      </methods>
      <properties>
        <property name="error" read-only="1" tags="MSAppOnly" type="DOMError"/>
        <property name="oncomplete" event-handler="complete" tags="MSAppOnly" type="EventHandler"/>
        <property name="onerror" event-handler="error" tags="MSAppOnly" type="EventHandler"/>
        <property name="readyState" read-only="1" tags="MSAppOnly" type="unsigned short"/>
        <property name="result" read-only="1" tags="MSAppOnly" type="any"/>
        <property name="target" read-only="1" tags="MSAppOnly" type="MSHTMLWebViewElement"/>
        <property name="type" read-only="1" tags="MSAppOnly" type="unsigned short"/>
      </properties>
    </interface>
    <interface name="MSWebViewSettings" extends="Object" tags="MSAppOnly">
      <properties>
        <property name="isIndexedDBEnabled" tags="MSAppOnly" type="bool"/>
        <property name="isJavaScriptEnabled" tags="MSAppOnly" type="bool"/>
      </properties>
    </interface>
    <interface name="MutationEvent" extends="Event">
      <constants>
        <constant name="ADDITION" type="unsigned short" value="2"/>
        <constant name="MODIFICATION" type="unsigned short" value="1"/>
        <constant name="REMOVAL" type="unsigned short" value="3"/>
      </constants>
      <methods>
        <method name="initMutationEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="relatedNodeArg" type="Node"/>
          <param name="prevValueArg" type="DOMString"/>
          <param name="newValueArg" type="DOMString"/>
          <param name="attrNameArg" type="DOMString"/>
          <param name="attrChangeArg" type="unsigned short"/>
        </method>
      </methods>
      <properties>
        <property name="attrChange" read-only="1" type="unsigned short"/>
        <property name="attrName" read-only="1" type="DOMString"/>
        <property name="newValue" read-only="1" type="DOMString"/>
        <property name="prevValue" read-only="1" type="DOMString"/>
        <property name="relatedNode" read-only="1" type="Node"/>
      </properties>
    </interface>
    <interface name="MutationObserver" extends="Object">
      <constructor>
        <param name="callback" type="MutationCallback"/>
      </constructor>
      <methods>
        <method name="disconnect" type="void"/>
        <method name="observe" type="void">
          <param name="target" type="Node"/>
          <param name="options" type="MutationObserverInit"/>
        </method>
        <method name="takeRecords" type="sequence&lt;MutationRecord&gt;"/>
      </methods>
    </interface>
    <interface name="MutationRecord" extends="Object">
      <properties>
        <property name="addedNodes" read-only="1" type="NodeList"/>
        <property name="attributeName" nullable="1" read-only="1" type="DOMString"/>
        <property name="attributeNamespace" nullable="1" read-only="1" type="DOMString"/>
        <property name="nextSibling" nullable="1" read-only="1" type="Node"/>
        <property name="oldValue" nullable="1" read-only="1" type="DOMString"/>
        <property name="previousSibling" nullable="1" read-only="1" type="Node"/>
        <property name="removedNodes" read-only="1" type="NodeList"/>
        <property name="target" read-only="1" type="Node"/>
        <property name="type" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="NamedNodeMap" extends="Object">
      <methods>
        <method name="getNamedItem" getter="1" type="Attr">
          <param name="name" type="DOMString"/>
        </method>
        <method name="getNamedItemNS" type="Attr">
          <param name="namespaceURI" nullable="1" type="DOMString"/>
          <param name="localName" nullable="1" type="DOMString"/>
        </method>
        <method name="item" getter="1" type="Attr">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeNamedItem" type="Attr">
          <param name="name" type="DOMString"/>
        </method>
        <method name="removeNamedItemNS" type="Attr">
          <param name="namespaceURI" nullable="1" type="DOMString"/>
          <param name="localName" nullable="1" type="DOMString"/>
        </method>
        <method name="setNamedItem" type="Attr">
          <param name="arg" type="Attr"/>
        </method>
        <method name="setNamedItemNS" type="Attr">
          <param name="arg" type="Attr"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="NavigationCompletedEvent" extends="NavigationEvent" tags="MSAppOnly">
      <properties>
        <property name="isSuccess" read-only="1" tags="MSAppOnly" type="boolean"/>
        <property name="webErrorStatus" read-only="1" tags="MSAppOnly" type="unsigned long long"/>
      </properties>
    </interface>
    <interface name="NavigationEvent" extends="Event" tags="MSAppOnly">
      <properties>
        <property name="uri" read-only="1" tags="MSAppOnly" type="DOMString"/>
      </properties>
    </interface>
    <interface name="NavigationEventWithReferrer" extends="NavigationEvent" tags="MSAppOnly">
      <properties>
        <property name="referer" read-only="1" tags="MSAppOnly" type="DOMString"/>
      </properties>
    </interface>
    <interface name="Navigator" extends="Object">
      <implements>NavigatorID</implements>
      <implements>NavigatorOnLine</implements>
      <implements>NavigatorContentUtils</implements>
      <implements>NavigatorStorageUtils</implements>
      <implements>NavigatorGeolocation</implements>
      <implements>MSNavigatorDoNotTrack</implements>
      <implements>MSFileSaver</implements>
      <implements>NavigatorBeacon</implements>
      <implements>NavigatorConcurrentHardware</implements>
      <implements>NavigatorUserMedia</implements>
      <methods>
        <method name="getGamepads" type="sequence&lt;Gamepad&gt;"/>
        <method name="javaEnabled" type="boolean"/>
        <method name="msLaunchUri" type="void">
          <param name="uri" type="DOMString"/>
          <param name="successCallback" default="0" optional="1" type="MSLaunchUriCallback"/>
          <param name="noHandlerCallback" default="0" optional="1" type="MSLaunchUriCallback"/>
        </method>
        <method name="requestMediaKeySystemAccess" type="Promise&lt;MediaKeySystemAccess&gt;">
          <param name="keySystem" type="DOMString"/>
          <param name="supportedConfigurations" type="sequence&lt;MediaKeySystemConfiguration&gt;"/>
        </method>
      </methods>
      <properties>
        <property name="authentication" read-only="1" type="WebAuthentication"/>
        <property name="cookieEnabled" read-only="1" type="boolean"/>
        <property name="gamepadInputEmulation" type="GamepadInputEmulationType"/>
        <property name="language" read-only="1" type="DOMString"/>
        <property name="maxTouchPoints" read-only="1" type="long"/>
        <property name="mimeTypes" read-only="1" type="MimeTypeArray"/>
        <property name="msManipulationViewsEnabled" read-only="1" type="boolean"/>
        <property name="msMaxTouchPoints" read-only="1" type="long"/>
        <property name="msPointerEnabled" read-only="1" type="boolean"/>
        <property name="plugins" read-only="1" type="PluginArray"/>
        <property name="pointerEnabled" read-only="1" type="boolean"/>
        <property name="serviceWorker" read-only="1" same-object="1" secure-context="1" type="ServiceWorkerContainer"/>
        <property name="webdriver" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="Node" extends="EventTarget">
      <constants>
        <constant name="ATTRIBUTE_NODE" type="unsigned short" value="2"/>
        <constant name="CDATA_SECTION_NODE" type="unsigned short" value="4"/>
        <constant name="COMMENT_NODE" type="unsigned short" value="8"/>
        <constant name="DOCUMENT_FRAGMENT_NODE" type="unsigned short" value="11"/>
        <constant name="DOCUMENT_NODE" type="unsigned short" value="9"/>
        <constant name="DOCUMENT_POSITION_CONTAINED_BY" type="unsigned short" value="0x10"/>
        <constant name="DOCUMENT_POSITION_CONTAINS" type="unsigned short" value="0x08"/>
        <constant name="DOCUMENT_POSITION_DISCONNECTED" type="unsigned short" value="0x01"/>
        <constant name="DOCUMENT_POSITION_FOLLOWING" type="unsigned short" value="0x04"/>
        <constant name="DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC" type="unsigned short" value="0x20"/>
        <constant name="DOCUMENT_POSITION_PRECEDING" type="unsigned short" value="0x02"/>
        <constant name="DOCUMENT_TYPE_NODE" type="unsigned short" value="10"/>
        <constant name="ELEMENT_NODE" type="unsigned short" value="1"/>
        <constant name="ENTITY_NODE" type="unsigned short" value="6"/>
        <constant name="ENTITY_REFERENCE_NODE" type="unsigned short" value="5"/>
        <constant name="NOTATION_NODE" type="unsigned short" value="12"/>
        <constant name="PROCESSING_INSTRUCTION_NODE" type="unsigned short" value="7"/>
        <constant name="TEXT_NODE" type="unsigned short" value="3"/>
      </constants>
      <methods>
        <method name="appendChild" type="Node">
          <param name="newChild" type="Node"/>
        </method>
        <method name="cloneNode" type="Node">
          <param name="deep" default="false" optional="1" type="boolean"/>
        </method>
        <method name="compareDocumentPosition" type="unsigned short">
          <param name="other" type="Node"/>
        </method>
        <method name="contains" type="boolean">
          <param name="child" type="Node"/>
        </method>
        <method name="hasAttributes" type="boolean"/>
        <method name="hasChildNodes" type="boolean"/>
        <method name="insertBefore" type="Node">
          <param name="newChild" type="Node"/>
          <param name="refChild" default="null" optional="1" type="Node"/>
        </method>
        <method name="isDefaultNamespace" type="boolean">
          <param name="namespaceURI" nullable="1" type="DOMString"/>
        </method>
        <method name="isEqualNode" type="boolean">
          <param name="arg" type="Node"/>
        </method>
        <method name="isSameNode" type="boolean">
          <param name="other" type="Node"/>
        </method>
        <method name="lookupNamespaceURI" nullable="1" type="DOMString">
          <param name="prefix" nullable="1" type="DOMString"/>
        </method>
        <method name="lookupPrefix" nullable="1" type="DOMString">
          <param name="namespaceURI" nullable="1" type="DOMString"/>
        </method>
        <method name="normalize" type="void"/>
        <method name="removeChild" type="Node">
          <param name="oldChild" type="Node"/>
        </method>
        <method name="replaceChild" type="Node">
          <param name="newChild" type="Node"/>
          <param name="oldChild" type="Node"/>
        </method>
      </methods>
      <properties>
        <property name="attributes" read-only="1" type="NamedNodeMap"/>
        <property name="baseURI" nullable="1" read-only="1" type="DOMString"/>
        <property name="childNodes" read-only="1" type="NodeList"/>
        <property name="firstChild" read-only="1" type="Node"/>
        <property name="lastChild" read-only="1" type="Node"/>
        <property name="localName" nullable="1" read-only="1" type="DOMString"/>
        <property name="namespaceURI" nullable="1" read-only="1" type="DOMString"/>
        <property name="nextSibling" read-only="1" type="Node"/>
        <property name="nodeName" read-only="1" type="DOMString"/>
        <property name="nodeType" read-only="1" type="unsigned short"/>
        <property name="nodeValue" nullable="1" treat-null-as="EmptyString" type="DOMString"/>
        <property name="ownerDocument" read-only="1" type="Document"/>
        <property name="parentElement" read-only="1" type="HTMLElement"/>
        <property name="parentNode" read-only="1" type="Node"/>
        <property name="previousSibling" read-only="1" type="Node"/>
        <property name="textContent" nullable="1" treat-null-as="EmptyString" type="DOMString"/>
      </properties>
    </interface>
    <interface name="NodeFilter" extends="Object" static="1">
      <constants>
        <constant name="FILTER_ACCEPT" type="short" value="1"/>
        <constant name="FILTER_REJECT" type="short" value="2"/>
        <constant name="FILTER_SKIP" type="short" value="3"/>
        <constant name="SHOW_ALL" type="unsigned long" value="0xFFFFFFFF"/>
        <constant name="SHOW_ATTRIBUTE" type="unsigned long" value="0x00000002"/>
        <constant name="SHOW_CDATA_SECTION" type="unsigned long" value="0x00000008"/>
        <constant name="SHOW_COMMENT" type="unsigned long" value="0x00000080"/>
        <constant name="SHOW_DOCUMENT" type="unsigned long" value="0x00000100"/>
        <constant name="SHOW_DOCUMENT_FRAGMENT" type="unsigned long" value="0x00000400"/>
        <constant name="SHOW_DOCUMENT_TYPE" type="unsigned long" value="0x00000200"/>
        <constant name="SHOW_ELEMENT" type="unsigned long" value="0x00000001"/>
        <constant name="SHOW_ENTITY" type="unsigned long" value="0x00000020"/>
        <constant name="SHOW_ENTITY_REFERENCE" type="unsigned long" value="0x00000010"/>
        <constant name="SHOW_NOTATION" type="unsigned long" value="0x00000800"/>
        <constant name="SHOW_PROCESSING_INSTRUCTION" type="unsigned long" value="0x00000040"/>
        <constant name="SHOW_TEXT" type="unsigned long" value="0x00000004"/>
      </constants>
      <methods>
        <method name="acceptNode" type="short">
          <param name="n" type="Node"/>
        </method>
      </methods>
    </interface>
    <interface name="NodeIterator" extends="Object">
      <methods>
        <method name="detach" type="void"/>
        <method name="nextNode" type="Node"/>
        <method name="previousNode" type="Node"/>
      </methods>
      <properties>
        <property name="expandEntityReferences" read-only="1" type="boolean"/>
        <property name="filter" read-only="1" type="NodeFilter"/>
        <property name="root" read-only="1" type="Node"/>
        <property name="whatToShow" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="NodeList" extends="Object">
      <methods>
        <method name="item" getter="1" type="Node">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="Notification" extends="EventTarget">
      <constructor>
        <param name="title" type="DOMString"/>
        <param name="options" optional="1" type="NotificationOptions"/>
      </constructor>
      <events>
        <event name="click" dispatch="sync" follows="show" skips-window="1" type="Event"/>
        <event name="show" dispatch="sync" precedes="click" skips-window="1" type="Event"/>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
        <event name="close" dispatch="sync" follows="show" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="close" type="void"/>
        <method name="requestPermission" static="1" type="Promise&lt;NotificationPermission&gt;">
          <param name="callback" optional="1" type="NotificationPermissionCallback"/>
        </method>
      </methods>
      <properties>
        <property name="body" read-only="1" type="DOMString"/>
        <property name="dir" read-only="1" type="NotificationDirection"/>
        <property name="icon" read-only="1" type="DOMString"/>
        <property name="lang" read-only="1" type="DOMString"/>
        <property name="onclick" event-handler="click" type="EventHandler"/>
        <property name="onclose" event-handler="close" type="EventHandler"/>
        <property name="onerror" event-handler="error" type="EventHandler"/>
        <property name="onshow" event-handler="show" type="EventHandler"/>
        <property name="permission" read-only="1" static="1" type="NotificationPermission"/>
        <property name="tag" read-only="1" type="DOMString"/>
        <property name="title" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="OES_element_index_uint" extends="Object"/>
    <interface name="OES_standard_derivatives" extends="Object">
      <constants>
        <constant name="FRAGMENT_SHADER_DERIVATIVE_HINT_OES" type="unsigned long" type-original="GLenum" value="0x8B8B"/>
      </constants>
    </interface>
    <interface name="OES_texture_float" extends="Object"/>
    <interface name="OES_texture_float_linear" extends="Object"/>
    <interface name="OES_texture_half_float" extends="Object">
      <constants>
        <constant name="HALF_FLOAT_OES" type="unsigned long" type-original="GLenum" value="0x8D61"/>
      </constants>
    </interface>
    <interface name="OES_texture_half_float_linear" extends="Object"/>
    <interface name="OfflineAudioCompletionEvent" extends="Event">
      <properties>
        <property name="renderedBuffer" read-only="1" type="AudioBuffer"/>
      </properties>
    </interface>
    <interface name="OfflineAudioContext" extends="AudioContext">
      <constructor>
        <param name="numberOfChannels" type="unsigned long"/>
        <param name="length" type="unsigned long"/>
        <param name="sampleRate" type="float"/>
      </constructor>
      <events>
        <event name="complete" dispatch="sync" skips-window="1" type="OfflineAudioCompletionEvent"/>
      </events>
      <methods>
        <method name="startRendering" type="Promise&lt;AudioBuffer&gt;"/>
        <method name="suspend" type="Promise&lt;void&gt;">
          <param name="suspendTime" type="double"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="oncomplete" event-handler="complete" type="EventHandler"/>
      </properties>
    </interface>
    <interface name="OscillatorNode" extends="AudioNode">
      <events>
        <event name="end" dispatch="sync" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="setPeriodicWave" type="void">
          <param name="periodicWave" type="PeriodicWave"/>
        </method>
        <method name="start" type="void">
          <param name="when" default="0" optional="1" type="double"/>
        </method>
        <method name="stop" type="void">
          <param name="when" default="0" optional="1" type="double"/>
        </method>
      </methods>
      <properties>
        <property name="detune" read-only="1" type="AudioParam"/>
        <property name="frequency" read-only="1" type="AudioParam"/>
        <property name="onended" event-handler="ended" type="EventHandler"/>
        <property name="type" type="OscillatorType"/>
      </properties>
    </interface>
    <interface name="OverflowEvent" extends="UIEvent">
      <anonymous-methods>
        <method type="initOverflowEvent">
          <param name="typeArg" type="DOMString"/>
          <param name="orient" type="long"/>
          <param name="horizontalOverflow" type="boolean"/>
          <param name="verticalOverflow" type="boolean"/>
        </method>
      </anonymous-methods>
      <constants>
        <constant name="BOTH" type="unsigned short" value="2"/>
        <constant name="HORIZONTAL" type="unsigned short" value="0"/>
        <constant name="VERTICAL" type="unsigned short" value="1"/>
      </constants>
      <properties>
        <property name="horizontalOverflow" read-only="1" type="boolean"/>
        <property name="orient" read-only="1" type="unsigned long"/>
        <property name="verticalOverflow" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="PageTransitionEvent" extends="Event">
      <properties>
        <property name="persisted" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="PannerNode" extends="AudioNode">
      <methods>
        <method name="setOrientation" type="void">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="z" type="float"/>
        </method>
        <method name="setPosition" type="void">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="z" type="float"/>
        </method>
        <method name="setVelocity" type="void">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="z" type="float"/>
        </method>
      </methods>
      <properties>
        <property name="coneInnerAngle" type="float"/>
        <property name="coneOuterAngle" type="float"/>
        <property name="coneOuterGain" type="float"/>
        <property name="distanceModel" type="DistanceModelType"/>
        <property name="maxDistance" type="float"/>
        <property name="panningModel" type="PanningModelType"/>
        <property name="refDistance" type="float"/>
        <property name="rolloffFactor" type="float"/>
      </properties>
    </interface>
    <interface name="Path2D" extends="Object">
      <constructor>
        <param name="path" optional="1" type="Path2D"/>
      </constructor>
      <implements>CanvasPathMethods</implements>
    </interface>
    <interface name="PaymentAddress" extends="Object" secure-context="1">
      <methods>
        <method name="toJSON" serializer="1" serializer-info="attribute" type="any"/>
      </methods>
      <properties>
        <property name="addressLine" read-only="1" type="sequence&lt;DOMString&gt;"/>
        <property name="city" read-only="1" type="DOMString"/>
        <property name="country" read-only="1" type="DOMString"/>
        <property name="dependentLocality" read-only="1" type="DOMString"/>
        <property name="languageCode" read-only="1" type="DOMString"/>
        <property name="organization" read-only="1" type="DOMString"/>
        <property name="phone" read-only="1" type="DOMString"/>
        <property name="postalCode" read-only="1" type="DOMString"/>
        <property name="recipient" read-only="1" type="DOMString"/>
        <property name="region" read-only="1" type="DOMString"/>
        <property name="sortingCode" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="PaymentRequest" extends="EventTarget" secure-context="1">
      <constructor>
        <param name="methodData" type="sequence&lt;PaymentMethodData&gt;"/>
        <param name="details" type="PaymentDetails"/>
        <param name="options" optional="1" type="PaymentOptions"/>
      </constructor>
      <events>
        <event name="shippingaddresschange" dispatch="sync" type="Event"/>
        <event name="shippingoptionchange" dispatch="sync" type="Event"/>
      </events>
      <methods>
        <method name="abort" type="Promise&lt;void&gt;"/>
        <method name="show" type="Promise&lt;PaymentResponse&gt;"/>
      </methods>
      <properties>
        <property name="onshippingaddresschange" event-handler="shippingaddresschange" type="EventHandler"/>
        <property name="onshippingoptionchange" event-handler="shippingoptionchange" type="EventHandler"/>
        <property name="shippingAddress" nullable="1" read-only="1" type="PaymentAddress"/>
        <property name="shippingOption" nullable="1" read-only="1" type="DOMString"/>
        <property name="shippingType" nullable="1" read-only="1" type="PaymentShippingType"/>
      </properties>
    </interface>
    <interface name="PaymentRequestUpdateEvent" extends="Event" secure-context="1">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="PaymentRequestUpdateEventInit"/>
      </constructor>
      <methods>
        <method name="updateWith" type="void">
          <param name="d" type="Promise&lt;PaymentDetails&gt;"/>
        </method>
      </methods>
    </interface>
    <interface name="PaymentResponse" extends="Object" secure-context="1">
      <methods>
        <method name="complete" type="Promise&lt;void&gt;">
          <param name="result" default="&quot;&quot;" optional="1" type="PaymentComplete"/>
        </method>
        <method name="toJSON" serializer="1" serializer-info="attribute" type="any"/>
      </methods>
      <properties>
        <property name="details" read-only="1" type="object"/>
        <property name="methodName" read-only="1" type="DOMString"/>
        <property name="payerEmail" nullable="1" read-only="1" type="DOMString"/>
        <property name="payerName" nullable="1" read-only="1" type="DOMString"/>
        <property name="payerPhone" nullable="1" read-only="1" type="DOMString"/>
        <property name="shippingAddress" nullable="1" read-only="1" type="PaymentAddress"/>
        <property name="shippingOption" nullable="1" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="Performance" extends="Object">
      <methods>
        <method name="clearMarks" type="void">
          <param name="markName" optional="1" type="DOMString"/>
        </method>
        <method name="clearMeasures" type="void">
          <param name="measureName" optional="1" type="DOMString"/>
        </method>
        <method name="clearResourceTimings" type="void"/>
        <method name="getEntries" type="any"/>
        <method name="getEntriesByName" type="any">
          <param name="name" type="DOMString"/>
          <param name="entryType" optional="1" type="DOMString"/>
        </method>
        <method name="getEntriesByType" type="any">
          <param name="entryType" type="DOMString"/>
        </method>
        <method name="getMarks" type="any">
          <param name="markName" optional="1" type="DOMString"/>
        </method>
        <method name="getMeasures" type="any">
          <param name="measureName" optional="1" type="DOMString"/>
        </method>
        <method name="mark" type="void">
          <param name="markName" type="DOMString"/>
        </method>
        <method name="measure" type="void">
          <param name="measureName" type="DOMString"/>
          <param name="startMarkName" optional="1" type="DOMString"/>
          <param name="endMarkName" optional="1" type="DOMString"/>
        </method>
        <method name="now" type="DOMHighResTimeStamp"/>
        <method name="setResourceTimingBufferSize" type="void">
          <param name="maxSize" type="unsigned long"/>
        </method>
        <method name="toJSON" type="any"/>
      </methods>
      <properties>
        <property name="navigation" read-only="1" type="PerformanceNavigation"/>
        <property name="timing" read-only="1" type="PerformanceTiming"/>
      </properties>
    </interface>
    <interface name="PerformanceEntry" extends="Object">
      <properties>
        <property name="duration" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="entryType" read-only="1" type="DOMString"/>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="startTime" read-only="1" type="DOMHighResTimeStamp"/>
      </properties>
    </interface>
    <interface name="PerformanceMark" extends="PerformanceEntry"/>
    <interface name="PerformanceMeasure" extends="PerformanceEntry"/>
    <interface name="PerformanceNavigation" extends="Object">
      <constants>
        <constant name="TYPE_BACK_FORWARD" type="unsigned short" value="2"/>
        <constant name="TYPE_NAVIGATE" type="unsigned short" value="0"/>
        <constant name="TYPE_RELOAD" type="unsigned short" value="1"/>
        <constant name="TYPE_RESERVED" type="unsigned short" value="255"/>
      </constants>
      <methods>
        <method name="toJSON" type="any"/>
      </methods>
      <properties>
        <property name="redirectCount" read-only="1" type="unsigned long"/>
        <property name="type" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="PerformanceNavigationTiming" extends="PerformanceEntry">
      <properties>
        <property name="connectEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="connectStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="domainLookupEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="domainLookupStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="domComplete" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="domContentLoadedEventEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="domContentLoadedEventStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="domInteractive" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="domLoading" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="fetchStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="loadEventEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="loadEventStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="navigationStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="redirectCount" read-only="1" type="unsigned short"/>
        <property name="redirectEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="redirectStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="requestStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="responseEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="responseStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="type" read-only="1" type="NavigationType"/>
        <property name="unloadEventEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="unloadEventStart" read-only="1" type="DOMHighResTimeStamp"/>
      </properties>
    </interface>
    <interface name="PerformanceResourceTiming" extends="PerformanceEntry">
      <properties>
        <property name="connectEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="connectStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="domainLookupEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="domainLookupStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="fetchStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="initiatorType" read-only="1" type="DOMString"/>
        <property name="redirectEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="redirectStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="requestStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="responseEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="responseStart" read-only="1" type="DOMHighResTimeStamp"/>
      </properties>
    </interface>
    <interface name="PerformanceTiming" extends="Object">
      <methods>
        <method name="toJSON" type="any"/>
      </methods>
      <properties>
        <property name="connectEnd" read-only="1" type="unsigned long long"/>
        <property name="connectStart" read-only="1" type="unsigned long long"/>
        <property name="domainLookupEnd" read-only="1" type="unsigned long long"/>
        <property name="domainLookupStart" read-only="1" type="unsigned long long"/>
        <property name="domComplete" read-only="1" type="unsigned long long"/>
        <property name="domContentLoadedEventEnd" read-only="1" type="unsigned long long"/>
        <property name="domContentLoadedEventStart" read-only="1" type="unsigned long long"/>
        <property name="domInteractive" read-only="1" type="unsigned long long"/>
        <property name="domLoading" read-only="1" type="unsigned long long"/>
        <property name="fetchStart" read-only="1" type="unsigned long long"/>
        <property name="loadEventEnd" read-only="1" type="unsigned long long"/>
        <property name="loadEventStart" read-only="1" type="unsigned long long"/>
        <property name="msFirstPaint" read-only="1" type="unsigned long long"/>
        <property name="navigationStart" read-only="1" type="unsigned long long"/>
        <property name="redirectEnd" read-only="1" type="unsigned long long"/>
        <property name="redirectStart" read-only="1" type="unsigned long long"/>
        <property name="requestStart" read-only="1" type="unsigned long long"/>
        <property name="responseEnd" read-only="1" type="unsigned long long"/>
        <property name="responseStart" read-only="1" type="unsigned long long"/>
        <property name="unloadEventEnd" read-only="1" type="unsigned long long"/>
        <property name="unloadEventStart" read-only="1" type="unsigned long long"/>
      </properties>
    </interface>
    <interface name="PerfWidgetExternal" extends="Object">
      <methods>
        <method name="addEventListener" type="void">
          <param name="eventType" type="DOMString"/>
          <param name="callback" type="Function"/>
        </method>
        <method name="getMemoryUsage" type="unsigned long"/>
        <method name="getProcessCpuUsage" type="unsigned long"/>
        <method name="getRecentCpuUsage" type="any">
          <param name="last" nullable="1" type="unsigned long long"/>
        </method>
        <method name="getRecentFrames" type="any">
          <param name="last" nullable="1" type="unsigned long long"/>
        </method>
        <method name="getRecentMemoryUsage" type="any">
          <param name="last" nullable="1" type="unsigned long long"/>
        </method>
        <method name="getRecentPaintRequests" type="any">
          <param name="last" nullable="1" type="unsigned long long"/>
        </method>
        <method name="removeEventListener" type="void">
          <param name="eventType" type="DOMString"/>
          <param name="callback" type="Function"/>
        </method>
        <method name="repositionWindow" type="void">
          <param name="x" type="long"/>
          <param name="y" type="long"/>
        </method>
        <method name="resizeWindow" type="void">
          <param name="width" type="unsigned long"/>
          <param name="height" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="activeNetworkRequestCount" read-only="1" type="unsigned long"/>
        <property name="averageFrameTime" read-only="1" type="double"/>
        <property name="averagePaintTime" read-only="1" type="double"/>
        <property name="extraInformationEnabled" read-only="1" type="boolean"/>
        <property name="independentRenderingEnabled" read-only="1" type="boolean"/>
        <property name="irDisablingContentString" read-only="1" type="DOMString"/>
        <property name="irStatusAvailable" read-only="1" type="boolean"/>
        <property name="maxCpuSpeed" read-only="1" type="unsigned long"/>
        <property name="paintRequestsPerSecond" read-only="1" type="unsigned long"/>
        <property name="performanceCounter" read-only="1" type="unsigned long long"/>
        <property name="performanceCounterFrequency" read-only="1" type="unsigned long long"/>
      </properties>
    </interface>
    <interface name="PeriodicWave" extends="Object"/>
    <interface name="PermissionRequest" extends="DeferredPermissionRequest">
      <methods>
        <method name="defer" type="void"/>
      </methods>
      <properties>
        <property name="state" read-only="1" type="MSWebViewPermissionState"/>
      </properties>
    </interface>
    <interface name="PermissionRequestedEvent" extends="Event">
      <properties>
        <property name="permissionRequest" read-only="1" type="PermissionRequest"/>
      </properties>
    </interface>
    <interface name="Plugin" extends="Object">
      <methods>
        <method name="item" getter="1" type="MimeType">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="namedItem" getter="1" type="MimeType">
          <param name="type" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="description" read-only="1" type="DOMString"/>
        <property name="filename" read-only="1" type="DOMString"/>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="version" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="PluginArray" extends="Object">
      <methods>
        <method name="item" getter="1" type="Plugin">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="namedItem" getter="1" type="Plugin">
          <param name="name" type="DOMString"/>
        </method>
        <method name="refresh" type="void">
          <param name="reload" optional="1" type="boolean"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="PointerEvent" extends="MouseEvent">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="PointerEventInit"/>
      </constructor>
      <methods>
        <method name="getCurrentPoint" type="void">
          <param name="element" type="Element"/>
        </method>
        <method name="getIntermediatePoints" type="void">
          <param name="element" type="Element"/>
        </method>
        <method name="initPointerEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="viewArg" type="Window"/>
          <param name="detailArg" type="long"/>
          <param name="screenXArg" type="long"/>
          <param name="screenYArg" type="long"/>
          <param name="clientXArg" type="float"/>
          <param name="clientYArg" type="float"/>
          <param name="ctrlKeyArg" type="boolean"/>
          <param name="altKeyArg" type="boolean"/>
          <param name="shiftKeyArg" type="boolean"/>
          <param name="metaKeyArg" type="boolean"/>
          <param name="buttonArg" type="unsigned short"/>
          <param name="relatedTargetArg" type="EventTarget"/>
          <param name="offsetXArg" type="float"/>
          <param name="offsetYArg" type="float"/>
          <param name="widthArg" type="long"/>
          <param name="heightArg" type="long"/>
          <param name="pressure" type="float"/>
          <param name="rotation" type="long"/>
          <param name="tiltX" type="long"/>
          <param name="tiltY" type="long"/>
          <param name="pointerIdArg" type="long"/>
          <param name="pointerType" type="any"/>
          <param name="hwTimestampArg" type="unsigned long long"/>
          <param name="isPrimary" type="boolean"/>
        </method>
      </methods>
      <properties>
        <property name="currentPoint" read-only="1" type="any"/>
        <property name="height" read-only="1" type="long"/>
        <property name="hwTimestamp" read-only="1" type="unsigned long long"/>
        <property name="intermediatePoints" read-only="1" type="any"/>
        <property name="isPrimary" read-only="1" type="boolean"/>
        <property name="pointerId" read-only="1" type="long"/>
        <property name="pointerType" read-only="1" type="any"/>
        <property name="pressure" read-only="1" type="float"/>
        <property name="rotation" read-only="1" type="long"/>
        <property name="tiltX" read-only="1" type="long"/>
        <property name="tiltY" read-only="1" type="long"/>
        <property name="width" read-only="1" type="long"/>
      </properties>
    </interface>
    <interface name="PopStateEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="PopStateEventInit"/>
      </constructor>
      <methods>
        <method name="initPopStateEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="stateArg" type="any"/>
        </method>
      </methods>
      <properties>
        <property name="state" read-only="1" type="any"/>
      </properties>
    </interface>
    <interface name="Position" extends="Object">
      <properties>
        <property name="coords" read-only="1" type="Coordinates"/>
        <property name="timestamp" read-only="1" type="DOMTimeStamp"/>
      </properties>
    </interface>
    <interface name="PositionError" extends="Object">
      <constants>
        <constant name="PERMISSION_DENIED" type="unsigned short" value="1"/>
        <constant name="POSITION_UNAVAILABLE" type="unsigned short" value="2"/>
        <constant name="TIMEOUT" type="unsigned short" value="3"/>
      </constants>
      <methods>
        <method name="toString" stringifier="1" type="DOMString"/>
      </methods>
      <properties>
        <property name="code" read-only="1" type="unsigned short"/>
        <property name="message" read-only="1" stringifier="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="ProcessingInstruction" extends="CharacterData">
      <events>
        <event name="DOMCharacterDataModified" bubbles="1" dispatch="sync" type="MutationEvent"/>
      </events>
      <properties>
        <property name="target" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="ProgressEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="ProgressEventInit"/>
      </constructor>
      <methods>
        <method name="initProgressEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="lengthComputableArg" type="boolean"/>
          <param name="loadedArg" type="unsigned long long"/>
          <param name="totalArg" type="unsigned long long"/>
        </method>
      </methods>
      <properties>
        <property name="lengthComputable" read-only="1" type="boolean"/>
        <property name="loaded" read-only="1" type="unsigned long long"/>
        <property name="total" read-only="1" type="unsigned long long"/>
      </properties>
    </interface>
    <interface name="PushManager" extends="Object">
      <methods>
        <method name="getSubscription" type="Promise&lt;PushSubscription&gt;"/>
        <method name="permissionState" type="Promise&lt;PushPermissionState&gt;">
          <param name="options" optional="1" type="PushSubscriptionOptionsInit"/>
        </method>
        <method name="subscribe" type="Promise&lt;PushSubscription&gt;">
          <param name="options" optional="1" type="PushSubscriptionOptionsInit"/>
        </method>
      </methods>
    </interface>
    <interface name="PushSubscription" extends="Object">
      <methods>
        <method name="getKey" nullable="1" type="ArrayBuffer">
          <param name="name" type="PushEncryptionKeyName"/>
        </method>
        <method name="toJSON" serializer="1" type="any"/>
        <method name="unsubscribe" type="Promise&lt;boolean&gt;"/>
      </methods>
      <properties>
        <property name="endpoint" read-only="1" type="USVString"/>
        <property name="options" read-only="1" same-object="1" type="PushSubscriptionOptions"/>
      </properties>
    </interface>
    <interface name="PushSubscriptionOptions" extends="Object">
      <properties>
        <property name="applicationServerKey" nullable="1" read-only="1" type="ArrayBuffer"/>
        <property name="userVisibleOnly" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="Range" extends="Object">
      <constants>
        <constant name="END_TO_END" type="unsigned short" value="2"/>
        <constant name="END_TO_START" type="unsigned short" value="3"/>
        <constant name="START_TO_END" type="unsigned short" value="1"/>
        <constant name="START_TO_START" type="unsigned short" value="0"/>
      </constants>
      <methods>
        <method name="cloneContents" type="DocumentFragment"/>
        <method name="cloneRange" type="Range"/>
        <method name="collapse" type="void">
          <param name="toStart" type="boolean"/>
        </method>
        <method name="compareBoundaryPoints" type="short">
          <param name="how" type="unsigned short"/>
          <param name="sourceRange" type="Range"/>
        </method>
        <method name="createContextualFragment" type="DocumentFragment">
          <param name="fragment" type="DOMString"/>
        </method>
        <method name="deleteContents" type="void"/>
        <method name="detach" type="void"/>
        <method name="expand" type="boolean">
          <param name="Unit" type="ExpandGranularity"/>
        </method>
        <method name="extractContents" type="DocumentFragment"/>
        <method name="getBoundingClientRect" type="ClientRect"/>
        <method name="getClientRects" type="ClientRectList"/>
        <method name="insertNode" type="void">
          <param name="newNode" type="Node"/>
        </method>
        <method name="selectNode" type="void">
          <param name="refNode" type="Node"/>
        </method>
        <method name="selectNodeContents" type="void">
          <param name="refNode" type="Node"/>
        </method>
        <method name="setEnd" type="void">
          <param name="refNode" type="Node"/>
          <param name="offset" type="long"/>
        </method>
        <method name="setEndAfter" type="void">
          <param name="refNode" type="Node"/>
        </method>
        <method name="setEndBefore" type="void">
          <param name="refNode" type="Node"/>
        </method>
        <method name="setStart" type="void">
          <param name="refNode" type="Node"/>
          <param name="offset" type="long"/>
        </method>
        <method name="setStartAfter" type="void">
          <param name="refNode" type="Node"/>
        </method>
        <method name="setStartBefore" type="void">
          <param name="refNode" type="Node"/>
        </method>
        <method name="surroundContents" type="void">
          <param name="newParent" type="Node"/>
        </method>
        <method name="toString" stringifier="1" type="DOMString"/>
      </methods>
      <properties>
        <property name="collapsed" read-only="1" type="boolean"/>
        <property name="commonAncestorContainer" read-only="1" type="Node"/>
        <property name="endContainer" read-only="1" type="Node"/>
        <property name="endOffset" read-only="1" type="long"/>
        <property name="startContainer" read-only="1" type="Node"/>
        <property name="startOffset" read-only="1" type="long"/>
      </properties>
    </interface>
    <interface name="ReadableStream" extends="Object">
      <methods>
        <method name="cancel" type="Promise&lt;void&gt;"/>
        <method name="getReader" type="ReadableStreamReader"/>
      </methods>
      <properties>
        <property name="locked" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="ReadableStreamReader" extends="Object">
      <methods>
        <method name="cancel" type="Promise&lt;void&gt;"/>
        <method name="read" type="Promise&lt;any&gt;"/>
        <method name="releaseLock" type="void"/>
      </methods>
    </interface>
    <interface name="Request" extends="Object">
      <constructor>
        <param name="input" type="(Request or DOMString)" type-original="RequestInfo"/>
        <param name="init" optional="1" type="RequestInit"/>
      </constructor>
      <implements>Body</implements>
      <methods>
        <method name="clone" type="Request"/>
      </methods>
      <properties>
        <property name="cache" read-only="1" type="RequestCache"/>
        <property name="credentials" read-only="1" type="RequestCredentials"/>
        <property name="destination" read-only="1" type="RequestDestination"/>
        <property name="headers" read-only="1" type="Headers"/>
        <property name="integrity" read-only="1" type="DOMString"/>
        <property name="keepalive" read-only="1" type="boolean"/>
        <property name="method" read-only="1" type="DOMString" type-original="ByteString"/>
        <property name="mode" read-only="1" type="RequestMode"/>
        <property name="redirect" read-only="1" type="RequestRedirect"/>
        <property name="referrer" read-only="1" type="DOMString" type-original="USVString"/>
        <property name="referrerPolicy" read-only="1" type="ReferrerPolicy"/>
        <property name="type" read-only="1" type="RequestType"/>
        <property name="url" read-only="1" type="DOMString" type-original="USVString"/>
      </properties>
    </interface>
    <interface name="Response" extends="Object">
      <constructor>
        <param name="body" default="null" nullable="1" optional="1" type="(Blob or BufferSource or FormData or DOMString)" type-original="BodyInit"/>
        <param name="init" optional="1" type="ResponseInit"/>
      </constructor>
      <implements>Body</implements>
      <methods>
        <method name="clone" type="Response"/>
      </methods>
      <properties>
        <property name="body" nullable="1" read-only="1" type="ReadableStream"/>
        <property name="headers" read-only="1" type="Headers"/>
        <property name="ok" read-only="1" type="boolean"/>
        <property name="status" read-only="1" type="unsigned short"/>
        <property name="statusText" read-only="1" type="DOMString" type-original="ByteString"/>
        <property name="type" read-only="1" type="ResponseType"/>
        <property name="url" read-only="1" type="DOMString" type-original="USVString"/>
      </properties>
    </interface>
    <interface name="RTCDtlsTransport" extends="RTCStatsProvider">
      <constructor>
        <param name="transport" type="RTCIceTransport"/>
      </constructor>
      <events>
        <event name="dtlsstatechange" dispatch="sync" skips-window="1" type="RTCDtlsTransportStateChangedEvent"/>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="getLocalParameters" type="RTCDtlsParameters"/>
        <method name="getRemoteCertificates" type="sequence&lt;ArrayBuffer&gt;"/>
        <method name="getRemoteParameters" nullable="1" type="RTCDtlsParameters"/>
        <method name="start" type="void">
          <param name="remoteParameters" type="RTCDtlsParameters"/>
        </method>
        <method name="stop" type="void"/>
      </methods>
      <properties>
        <property name="ondtlsstatechange" event-handler="dtlsstatechange" nullable="1" type="EventHandler"/>
        <property name="onerror" event-handler="error" nullable="1" type="EventHandler"/>
        <property name="state" read-only="1" type="RTCDtlsTransportState"/>
        <property name="transport" read-only="1" type="RTCIceTransport"/>
      </properties>
    </interface>
    <interface name="RTCDtlsTransportStateChangedEvent" extends="Event">
      <properties>
        <property name="state" read-only="1" type="RTCDtlsTransportState"/>
      </properties>
    </interface>
    <interface name="RTCDtmfSender" extends="EventTarget">
      <constructor>
        <param name="sender" type="RTCRtpSender"/>
      </constructor>
      <events>
        <event name="tonechange" dispatch="sync" skips-window="1" type="RTCDTMFToneChangeEvent"/>
      </events>
      <methods>
        <method name="insertDTMF" type="void">
          <param name="tones" type="DOMString"/>
          <param name="duration" optional="1" type="long"/>
          <param name="interToneGap" optional="1" type="long"/>
        </method>
      </methods>
      <properties>
        <property name="canInsertDTMF" read-only="1" type="boolean"/>
        <property name="duration" read-only="1" type="long"/>
        <property name="interToneGap" read-only="1" type="long"/>
        <property name="ontonechange" event-handler="tonechange" type="EventHandler"/>
        <property name="sender" read-only="1" type="RTCRtpSender"/>
        <property name="toneBuffer" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="RTCDTMFToneChangeEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" type="RTCDTMFToneChangeEventInit"/>
      </constructor>
      <properties>
        <property name="tone" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="RTCIceCandidate" extends="Object">
      <constructor>
        <param name="candidateInitDict" optional="1" type="RTCIceCandidateInit"/>
      </constructor>
      <methods>
        <method name="toJSON" serializer="1" serializer-info="attribute" type="any"/>
      </methods>
      <properties>
        <property name="candidate" nullable="1" type="DOMString"/>
        <property name="sdpMid" nullable="1" type="DOMString"/>
        <property name="sdpMLineIndex" nullable="1" type="unsigned short"/>
      </properties>
    </interface>
    <interface name="RTCIceCandidatePairChangedEvent" extends="Event">
      <properties>
        <property name="pair" read-only="1" type="RTCIceCandidatePair"/>
      </properties>
    </interface>
    <interface name="RTCIceGatherer" extends="RTCStatsProvider">
      <constructor>
        <param name="options" type="RTCIceGatherOptions"/>
      </constructor>
      <events>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
        <event name="localcandidate" dispatch="sync" skips-window="1" type="RTCIceGathererEvent"/>
      </events>
      <methods>
        <method name="createAssociatedGatherer" type="RTCIceGatherer"/>
        <method name="getLocalCandidates" type="sequence&lt;RTCIceCandidateDictionary&gt;"/>
        <method name="getLocalParameters" type="RTCIceParameters"/>
      </methods>
      <properties>
        <property name="component" read-only="1" type="RTCIceComponent"/>
        <property name="onerror" event-handler="error" nullable="1" type="EventHandler"/>
        <property name="onlocalcandidate" event-handler="localcandidate" nullable="1" type="EventHandler"/>
      </properties>
    </interface>
    <interface name="RTCIceGathererEvent" extends="Event">
      <properties>
        <property name="candidate" read-only="1" type="(RTCIceCandidateDictionary or RTCIceCandidateComplete)" type-original="RTCIceGatherCandidate"/>
      </properties>
    </interface>
    <interface name="RTCIceTransport" extends="RTCStatsProvider">
      <constructor/>
      <events>
        <event name="icestatechange" dispatch="sync" skips-window="1" type="RTCIceTransportStateChangedEvent"/>
        <event name="candidatepairchange" dispatch="sync" skips-window="1" type="RTCIceCandidatePairChangedEvent"/>
      </events>
      <methods>
        <method name="addRemoteCandidate" type="void">
          <param name="remoteCandidate" type="(RTCIceCandidateDictionary or RTCIceCandidateComplete)" type-original="RTCIceGatherCandidate"/>
        </method>
        <method name="createAssociatedTransport" type="RTCIceTransport"/>
        <method name="getNominatedCandidatePair" nullable="1" type="RTCIceCandidatePair"/>
        <method name="getRemoteCandidates" type="sequence&lt;RTCIceCandidateDictionary&gt;"/>
        <method name="getRemoteParameters" nullable="1" type="RTCIceParameters"/>
        <method name="setRemoteCandidates" type="void">
          <param name="remoteCandidates" type="sequence&lt;RTCIceCandidateDictionary&gt;"/>
        </method>
        <method name="start" type="void">
          <param name="gatherer" type="RTCIceGatherer"/>
          <param name="remoteParameters" type="RTCIceParameters"/>
          <param name="role" optional="1" type="RTCIceRole"/>
        </method>
        <method name="stop" type="void"/>
      </methods>
      <properties>
        <property name="component" read-only="1" type="RTCIceComponent"/>
        <property name="iceGatherer" nullable="1" read-only="1" type="RTCIceGatherer"/>
        <property name="oncandidatepairchange" event-handler="candidatepairchange" nullable="1" type="EventHandler"/>
        <property name="onicestatechange" event-handler="icestatechange" nullable="1" type="EventHandler"/>
        <property name="role" read-only="1" type="RTCIceRole"/>
        <property name="state" read-only="1" type="RTCIceTransportState"/>
      </properties>
    </interface>
    <interface name="RTCIceTransportStateChangedEvent" extends="Event">
      <properties>
        <property name="state" read-only="1" type="RTCIceTransportState"/>
      </properties>
    </interface>
    <interface name="RTCPeerConnection" extends="EventTarget">
      <constructor>
        <param name="configuration" type="RTCConfiguration"/>
      </constructor>
      <events>
        <event name="negotiationneeded" dispatch="sync" skips-window="1" type="Event"/>
        <event name="icecandidate" dispatch="sync" skips-window="1" type="RTCPeerConnectionIceEvent"/>
        <event name="signalingstatechange" dispatch="sync" skips-window="1" type="Event"/>
        <event name="addstream" dispatch="sync" skips-window="1" type="MediaStreamEvent"/>
        <event name="removestream" dispatch="sync" skips-window="1" type="MediaStreamEvent"/>
        <event name="iceconnectionstatechange" dispatch="sync" skips-window="1" type="Event"/>
        <event name="icegatheringstatechange" dispatch="sync" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="addIceCandidate" type="Promise&lt;void&gt;">
          <param name="candidate" type="RTCIceCandidate"/>
          <param name="successCallback" optional="1" type="VoidFunction"/>
          <param name="failureCallback" optional="1" type="RTCPeerConnectionErrorCallback"/>
        </method>
        <method name="addStream" type="void">
          <param name="stream" type="MediaStream"/>
        </method>
        <method name="close" type="void"/>
        <method name="createAnswer" type="Promise&lt;RTCSessionDescription&gt;">
          <param name="successCallback" optional="1" type="RTCSessionDescriptionCallback"/>
          <param name="failureCallback" optional="1" type="RTCPeerConnectionErrorCallback"/>
        </method>
        <method name="createOffer" type="Promise&lt;RTCSessionDescription&gt;">
          <param name="successCallback" optional="1" type="RTCSessionDescriptionCallback"/>
          <param name="failureCallback" optional="1" type="RTCPeerConnectionErrorCallback"/>
          <param name="options" optional="1" type="RTCOfferOptions"/>
        </method>
        <method name="getConfiguration" type="RTCConfiguration"/>
        <method name="getLocalStreams" type="sequence&lt;MediaStream&gt;"/>
        <method name="getRemoteStreams" type="sequence&lt;MediaStream&gt;"/>
        <method name="getStats" type="Promise&lt;RTCStatsReport&gt;">
          <param name="selector" nullable="1" type="MediaStreamTrack"/>
          <param name="successCallback" optional="1" type="RTCStatsCallback"/>
          <param name="failureCallback" optional="1" type="RTCPeerConnectionErrorCallback"/>
        </method>
        <method name="getStreamById" nullable="1" type="MediaStream">
          <param name="streamId" type="DOMString"/>
        </method>
        <method name="removeStream" type="void">
          <param name="stream" type="MediaStream"/>
        </method>
        <method name="setLocalDescription" type="Promise&lt;void&gt;">
          <param name="description" type="RTCSessionDescription"/>
          <param name="successCallback" optional="1" type="VoidFunction"/>
          <param name="failureCallback" optional="1" type="RTCPeerConnectionErrorCallback"/>
        </method>
        <method name="setRemoteDescription" type="Promise&lt;void&gt;">
          <param name="description" type="RTCSessionDescription"/>
          <param name="successCallback" optional="1" type="VoidFunction"/>
          <param name="failureCallback" optional="1" type="RTCPeerConnectionErrorCallback"/>
        </method>
      </methods>
      <properties>
        <property name="canTrickleIceCandidates" nullable="1" read-only="1" type="boolean"/>
        <property name="iceConnectionState" read-only="1" type="RTCIceConnectionState"/>
        <property name="iceGatheringState" read-only="1" type="RTCIceGatheringState"/>
        <property name="localDescription" nullable="1" read-only="1" type="RTCSessionDescription"/>
        <property name="onaddstream" event-handler="addstream" type="EventHandler"/>
        <property name="onicecandidate" event-handler="icecandidate" type="EventHandler"/>
        <property name="oniceconnectionstatechange" event-handler="iceconnectionstatechange" type="EventHandler"/>
        <property name="onicegatheringstatechange" event-handler="icegatheringstatechange" type="EventHandler"/>
        <property name="onnegotiationneeded" event-handler="negotiationneeded" type="EventHandler"/>
        <property name="onremovestream" event-handler="removestream" type="EventHandler"/>
        <property name="onsignalingstatechange" event-handler="signalingstatechange" type="EventHandler"/>
        <property name="remoteDescription" nullable="1" read-only="1" type="RTCSessionDescription"/>
        <property name="signalingState" read-only="1" type="RTCSignalingState"/>
      </properties>
    </interface>
    <interface name="RTCPeerConnectionIceEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" type="RTCPeerConnectionIceEventInit"/>
      </constructor>
      <properties>
        <property name="candidate" read-only="1" type="RTCIceCandidate"/>
      </properties>
    </interface>
    <interface name="RTCRtpReceiver" extends="RTCStatsProvider">
      <constructor>
        <param name="transport" type="(RTCDtlsTransport or RTCSrtpSdesTransport)" type-original="RTCTransport"/>
        <param name="kind" type="DOMString"/>
        <param name="rtcpTransport" optional="1" type="RTCDtlsTransport"/>
      </constructor>
      <events>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="getCapabilities" static="1" type="RTCRtpCapabilities">
          <param name="kind" optional="1" type="DOMString"/>
        </method>
        <method name="getContributingSources" type="sequence&lt;RTCRtpContributingSource&gt;"/>
        <method name="receive" type="void">
          <param name="parameters" type="RTCRtpParameters"/>
        </method>
        <method name="requestSendCSRC" type="void">
          <param name="csrc" type="unsigned long"/>
        </method>
        <method name="setTransport" type="void">
          <param name="transport" type="(RTCDtlsTransport or RTCSrtpSdesTransport)" type-original="RTCTransport"/>
          <param name="rtcpTransport" optional="1" type="RTCDtlsTransport"/>
        </method>
        <method name="stop" type="void"/>
      </methods>
      <properties>
        <property name="onerror" event-handler="error" nullable="1" type="EventHandler"/>
        <property name="rtcpTransport" read-only="1" type="RTCDtlsTransport"/>
        <property name="track" nullable="1" read-only="1" type="MediaStreamTrack"/>
        <property name="transport" read-only="1" type="(RTCDtlsTransport or RTCSrtpSdesTransport)" type-original="RTCTransport"/>
      </properties>
    </interface>
    <interface name="RTCRtpSender" extends="RTCStatsProvider">
      <constructor>
        <param name="track" type="MediaStreamTrack"/>
        <param name="transport" type="(RTCDtlsTransport or RTCSrtpSdesTransport)" type-original="RTCTransport"/>
        <param name="rtcpTransport" optional="1" type="RTCDtlsTransport"/>
      </constructor>
      <events>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
        <event name="ssrcconflict" dispatch="sync" skips-window="1" type="RTCSsrcConflictEvent"/>
      </events>
      <methods>
        <method name="getCapabilities" static="1" type="RTCRtpCapabilities">
          <param name="kind" optional="1" type="DOMString"/>
        </method>
        <method name="send" type="void">
          <param name="parameters" type="RTCRtpParameters"/>
        </method>
        <method name="setTrack" type="void">
          <param name="track" type="MediaStreamTrack"/>
        </method>
        <method name="setTransport" type="void">
          <param name="transport" type="(RTCDtlsTransport or RTCSrtpSdesTransport)" type-original="RTCTransport"/>
          <param name="rtcpTransport" optional="1" type="RTCDtlsTransport"/>
        </method>
        <method name="stop" type="void"/>
      </methods>
      <properties>
        <property name="onerror" event-handler="error" nullable="1" type="EventHandler"/>
        <property name="onssrcconflict" event-handler="ssrcconflict" nullable="1" type="EventHandler"/>
        <property name="rtcpTransport" read-only="1" type="RTCDtlsTransport"/>
        <property name="track" read-only="1" type="MediaStreamTrack"/>
        <property name="transport" read-only="1" type="(RTCDtlsTransport or RTCSrtpSdesTransport)" type-original="RTCTransport"/>
      </properties>
    </interface>
    <interface name="RTCSessionDescription" extends="Object">
      <constructor>
        <param name="descriptionInitDict" optional="1" type="RTCSessionDescriptionInit"/>
      </constructor>
      <methods>
        <method name="toJSON" serializer="1" serializer-info="attribute" type="any"/>
      </methods>
      <properties>
        <property name="sdp" nullable="1" type="DOMString"/>
        <property name="type" nullable="1" type="RTCSdpType"/>
      </properties>
    </interface>
    <interface name="RTCSrtpSdesTransport" extends="EventTarget">
      <constructor>
        <param name="transport" type="RTCIceTransport"/>
        <param name="encryptParameters" type="RTCSrtpSdesParameters"/>
        <param name="decryptParameters" type="RTCSrtpSdesParameters"/>
      </constructor>
      <events>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="getLocalParameters" static="1" type="sequence&lt;RTCSrtpSdesParameters&gt;"/>
      </methods>
      <properties>
        <property name="onerror" event-handler="error" nullable="1" type="EventHandler"/>
        <property name="transport" read-only="1" type="RTCIceTransport"/>
      </properties>
    </interface>
    <interface name="RTCSsrcConflictEvent" extends="Event">
      <properties>
        <property name="ssrc" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="RTCStatsProvider" extends="EventTarget">
      <methods>
        <method name="getStats" type="Promise&lt;RTCStatsReport&gt;"/>
        <method name="msGetStats" type="Promise&lt;RTCStatsReport&gt;"/>
      </methods>
    </interface>
    <interface name="ScopedCredential" extends="Object" secure-context="1">
      <properties>
        <property name="id" read-only="1" type="ArrayBuffer"/>
        <property name="type" read-only="1" type="ScopedCredentialType"/>
      </properties>
    </interface>
    <interface name="ScopedCredentialInfo" extends="Object" secure-context="1">
      <properties>
        <property name="credential" read-only="1" type="ScopedCredential"/>
        <property name="publicKey" read-only="1" type="CryptoKey"/>
      </properties>
    </interface>
    <interface name="Screen" extends="EventTarget">
      <events>
        <event name="MSOrientationChange" dispatch="async" skips-window="1" tags="IEOnly" type="Event"/>
      </events>
      <methods>
        <method name="msLockOrientation" type="boolean">
          <param name="orientations" type="(DOMString or sequence&lt;DOMString&gt;)"/>
        </method>
        <method name="msUnlockOrientation" type="void"/>
      </methods>
      <properties>
        <property name="availHeight" read-only="1" type="unsigned long"/>
        <property name="availWidth" read-only="1" type="unsigned long"/>
        <property name="bufferDepth" type="long"/>
        <property name="colorDepth" read-only="1" type="unsigned long"/>
        <property name="deviceXDPI" read-only="1" type="long"/>
        <property name="deviceYDPI" read-only="1" type="long"/>
        <property name="fontSmoothingEnabled" read-only="1" type="boolean"/>
        <property name="height" read-only="1" type="unsigned long"/>
        <property name="logicalXDPI" read-only="1" type="long"/>
        <property name="logicalYDPI" read-only="1" type="long"/>
        <property name="msOrientation" read-only="1" type="DOMString"/>
        <property name="onmsorientationchange" event-handler="MSOrientationChange" type="EventHandler"/>
        <property name="pixelDepth" read-only="1" type="unsigned long"/>
        <property name="systemXDPI" read-only="1" type="long"/>
        <property name="systemYDPI" read-only="1" type="long"/>
        <property name="width" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="ScriptNotifyEvent" extends="Event" tags="MSAppOnly">
      <properties>
        <property name="callingUri" read-only="1" tags="MSAppOnly" type="DOMString"/>
        <property name="value" read-only="1" tags="MSAppOnly" type="DOMString"/>
      </properties>
    </interface>
    <interface name="ScriptProcessorNode" extends="AudioNode">
      <events>
        <event name="audioprocess" dispatch="sync" skips-window="1" type="AudioProcessingEvent"/>
      </events>
      <properties>
        <property name="bufferSize" read-only="1" type="long"/>
        <property name="onaudioprocess" event-handler="audioprocess" type="EventHandler"/>
      </properties>
    </interface>
    <interface name="Selection" extends="Object">
      <methods>
        <method name="addRange" type="void">
          <param name="range" type="Range"/>
        </method>
        <method name="collapse" type="void">
          <param name="parentNode" type="Node"/>
          <param name="offset" type="long"/>
        </method>
        <method name="collapseToEnd" type="void"/>
        <method name="collapseToStart" type="void"/>
        <method name="containsNode" type="boolean">
          <param name="node" type="Node"/>
          <param name="partlyContained" type="boolean"/>
        </method>
        <method name="deleteFromDocument" type="void"/>
        <method name="empty" type="void"/>
        <method name="extend" type="void">
          <param name="newNode" type="Node"/>
          <param name="offset" type="long"/>
        </method>
        <method name="getRangeAt" type="Range">
          <param name="index" type="long"/>
        </method>
        <method name="removeAllRanges" type="void"/>
        <method name="removeRange" type="void">
          <param name="range" type="Range"/>
        </method>
        <method name="selectAllChildren" type="void">
          <param name="parentNode" type="Node"/>
        </method>
        <method name="setBaseAndExtent" type="void">
          <param name="baseNode" type="Node"/>
          <param name="baseOffset" type="long"/>
          <param name="extentNode" type="Node"/>
          <param name="extentOffset" type="long"/>
        </method>
        <method name="setPosition" type="void">
          <param name="parentNode" type="Node"/>
          <param name="offset" type="long"/>
        </method>
        <method name="toString" stringifier="1" type="DOMString"/>
      </methods>
      <properties>
        <property name="anchorNode" read-only="1" type="Node"/>
        <property name="anchorOffset" read-only="1" type="long"/>
        <property name="baseNode" read-only="1" type="Node"/>
        <property name="baseOffset" read-only="1" type="long"/>
        <property name="extentNode" read-only="1" type="Node"/>
        <property name="extentOffset" read-only="1" type="long"/>
        <property name="focusNode" read-only="1" type="Node"/>
        <property name="focusOffset" read-only="1" type="long"/>
        <property name="isCollapsed" read-only="1" type="boolean"/>
        <property name="rangeCount" read-only="1" type="long"/>
        <property name="type" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="ServiceWorker" extends="EventTarget">
      <events>
        <event name="error" dispatch="async" skips-window="1" type="ErrorEvent"/>
        <event name="statechange" dispatch="async" skips-window="1" type="Event"/>
      </events>
      <implements>AbstractWorker</implements>
      <methods>
        <method name="postMessage" type="void">
          <param name="message" type="any"/>
          <param name="transfer" optional="1" type="sequence&lt;Transferable&gt;"/>
        </method>
      </methods>
      <properties>
        <property name="onstatechange" event-handler="statechange" type="EventHandler"/>
        <property name="scriptURL" read-only="1" type="USVString"/>
        <property name="state" read-only="1" type="ServiceWorkerState"/>
      </properties>
    </interface>
    <interface name="ServiceWorkerContainer" extends="EventTarget" secure-context="1">
      <events>
        <event name="controllerchange" dispatch="async" skips-window="1" type="Event"/>
        <event name="error" dispatch="async" skips-window="1" type="ErrorEvent"/>
        <event name="message" dispatch="async" skips-window="1" type="ServiceWorkerMessageEvent"/>
      </events>
      <methods>
        <method name="getRegistration" new-object="1" type="Promise&lt;any&gt;">
          <param name="clientURL" default="&quot;&quot;" optional="1" type="USVString"/>
        </method>
        <method name="getRegistrations" new-object="1" type="Promise&lt;sequence&lt;ServiceWorkerRegistration&gt;&gt;"/>
        <method name="register" new-object="1" type="Promise&lt;ServiceWorkerRegistration&gt;">
          <param name="scriptURL" type="USVString"/>
          <param name="options" optional="1" type="RegistrationOptions"/>
        </method>
      </methods>
      <properties>
        <property name="controller" nullable="1" read-only="1" type="ServiceWorker"/>
        <property name="oncontrollerchange" event-handler="controllerchange" type="EventHandler"/>
        <property name="onmessage" event-handler="message" type="EventHandler"/>
        <property name="ready" read-only="1" same-object="1" type="Promise&lt;ServiceWorkerRegistration&gt;"/>
      </properties>
    </interface>
    <interface name="ServiceWorkerMessageEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="ServiceWorkerMessageEventInit"/>
      </constructor>
      <properties>
        <property name="data" read-only="1" type="any"/>
        <property name="lastEventId" read-only="1" type="DOMString"/>
        <property name="origin" read-only="1" type="DOMString"/>
        <property name="ports" nullable="1" read-only="1" type="sequence&lt;MessagePort&gt;"/>
        <property name="source" nullable="1" read-only="1" same-object="1" type="(ServiceWorker or MessagePort)"/>
      </properties>
    </interface>
    <interface name="ServiceWorkerRegistration" extends="EventTarget">
      <events>
        <event name="updatefound" dispatch="async" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="getNotifications" type="Promise&lt;sequence&lt;Notification&gt;&gt;">
          <param name="filter" optional="1" type="GetNotificationOptions"/>
        </method>
        <method name="showNotification" type="Promise&lt;void&gt;">
          <param name="title" type="DOMString"/>
          <param name="options" optional="1" type="NotificationOptions"/>
        </method>
        <method name="unregister" new-object="1" type="Promise&lt;boolean&gt;"/>
        <method name="update" new-object="1" type="Promise&lt;void&gt;"/>
      </methods>
      <properties>
        <property name="active" nullable="1" read-only="1" type="ServiceWorker"/>
        <property name="installing" nullable="1" read-only="1" type="ServiceWorker"/>
        <property name="onupdatefound" event-handler="updatefound" type="EventHandler"/>
        <property name="pushManager" read-only="1" type="PushManager"/>
        <property name="scope" read-only="1" type="USVString"/>
        <property name="sync" read-only="1" type="SyncManager"/>
        <property name="waiting" nullable="1" read-only="1" type="ServiceWorker"/>
      </properties>
    </interface>
    <interface name="SourceBuffer" extends="EventTarget">
      <events>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
        <event name="abort" dispatch="sync" skips-window="1" type="Event"/>
        <event name="updatestart" dispatch="sync" skips-window="1" type="Event"/>
        <event name="update" dispatch="sync" skips-window="1" type="Event"/>
        <event name="updateend" dispatch="sync" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="abort" type="void"/>
        <method name="appendBuffer" type="void">
          <param name="data" type="(ArrayBuffer or ArrayBufferView)"/>
        </method>
        <method name="appendStream" type="void">
          <param name="stream" type="MSStream"/>
          <param name="maxSize" optional="1" type="unsigned long long"/>
        </method>
        <method name="remove" type="void">
          <param name="start" type="double"/>
          <param name="end" type="double"/>
        </method>
      </methods>
      <properties>
        <property name="appendWindowEnd" type="double"/>
        <property name="appendWindowStart" type="double"/>
        <property name="audioTracks" read-only="1" type="AudioTrackList"/>
        <property name="buffered" read-only="1" type="TimeRanges"/>
        <property name="mode" type="AppendMode"/>
        <property name="timestampOffset" type="double"/>
        <property name="updating" read-only="1" type="boolean"/>
        <property name="videoTracks" read-only="1" type="VideoTrackList"/>
      </properties>
    </interface>
    <interface name="SourceBufferList" extends="EventTarget">
      <events>
        <event name="addsourcebuffer" dispatch="sync" skips-window="1" type="Event"/>
        <event name="removesourcebuffer" dispatch="sync" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="item" getter="1" type="SourceBuffer">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="SpeechSynthesis" extends="EventTarget">
      <events>
        <event name="voiceschanged" dispatch="sync" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="cancel" type="void"/>
        <method name="getVoices" type="sequence&lt;SpeechSynthesisVoice&gt;"/>
        <method name="pause" type="void"/>
        <method name="resume" type="void"/>
        <method name="speak" type="void">
          <param name="utterance" type="SpeechSynthesisUtterance"/>
        </method>
      </methods>
      <properties>
        <property name="onvoiceschanged" event-handler="voiceschanged" type="EventHandler"/>
        <property name="paused" read-only="1" type="boolean"/>
        <property name="pending" read-only="1" type="boolean"/>
        <property name="speaking" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="SpeechSynthesisEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="SpeechSynthesisEventInit"/>
      </constructor>
      <properties>
        <property name="charIndex" read-only="1" type="unsigned long"/>
        <property name="elapsedTime" read-only="1" type="float"/>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="utterance" nullable="1" read-only="1" type="SpeechSynthesisUtterance"/>
      </properties>
    </interface>
    <interface name="SpeechSynthesisUtterance" extends="EventTarget">
      <constructor>
        <param name="text" optional="1" type="DOMString"/>
      </constructor>
      <events>
        <event name="start" dispatch="sync" skips-window="1" type="Event"/>
        <event name="pause" dispatch="sync" skips-window="1" type="Event"/>
        <event name="resume" dispatch="sync" skips-window="1" type="Event"/>
        <event name="end" dispatch="sync" skips-window="1" type="Event"/>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
        <event name="mark" dispatch="sync" skips-window="1" type="Event"/>
        <event name="boundary" dispatch="sync" skips-window="1" type="Event"/>
      </events>
      <properties>
        <property name="lang" type="DOMString"/>
        <property name="onboundary" event-handler="boundary" type="EventHandler"/>
        <property name="onend" event-handler="end" type="EventHandler"/>
        <property name="onerror" event-handler="error" type="EventHandler"/>
        <property name="onmark" event-handler="mark" type="EventHandler"/>
        <property name="onpause" event-handler="pause" type="EventHandler"/>
        <property name="onresume" event-handler="resume" type="EventHandler"/>
        <property name="onstart" event-handler="start" type="EventHandler"/>
        <property name="pitch" type="float"/>
        <property name="rate" type="float"/>
        <property name="text" type="DOMString"/>
        <property name="voice" type="SpeechSynthesisVoice"/>
        <property name="volume" type="float"/>
      </properties>
    </interface>
    <interface name="SpeechSynthesisVoice" extends="Object">
      <properties>
        <property name="default" read-only="1" type="boolean"/>
        <property name="lang" read-only="1" type="DOMString"/>
        <property name="localService" read-only="1" type="boolean"/>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="voiceURI" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="StereoPannerNode" extends="AudioNode">
      <properties>
        <property name="pan" read-only="1" type="AudioParam"/>
      </properties>
    </interface>
    <interface name="Storage" extends="Object" override-builtins="1">
      <methods>
        <method name="clear" property-descriptor-not-enumerable="1" type="void"/>
        <method name="getItem" getter="1" property-descriptor-not-enumerable="1" type="any">
          <param name="key" type="DOMString"/>
        </method>
        <method name="key" getter="1" property-descriptor-not-enumerable="1" type="DOMString">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeItem" deleter="1" property-descriptor-not-enumerable="1" type="void">
          <param name="key" type="DOMString"/>
        </method>
        <method name="setItem" creator="1" property-descriptor-not-enumerable="1" setter="1" type="void">
          <param name="key" type="DOMString"/>
          <param name="data" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="length" property-descriptor-not-enumerable="1" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="StorageEvent" extends="Event">
      <methods>
        <method name="initStorageEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="keyArg" type="DOMString"/>
          <param name="oldValueArg" type="any"/>
          <param name="newValueArg" type="any"/>
          <param name="urlArg" type="DOMString"/>
          <param name="storageAreaArg" type="Storage"/>
        </method>
      </methods>
      <properties>
        <property name="key" read-only="1" type="DOMString"/>
        <property name="newValue" read-only="1" type="any"/>
        <property name="oldValue" read-only="1" type="any"/>
        <property name="storageArea" read-only="1" type="Storage"/>
        <property name="url" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="StyleMedia" extends="Object">
      <methods>
        <method name="matchMedium" type="boolean">
          <param name="mediaquery" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="type" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="StyleSheet" extends="Object">
      <properties>
        <property name="disabled" type="boolean"/>
        <property name="href" read-only="1" type="DOMString"/>
        <property name="media" put-forwards="mediaText" read-only="1" type="MediaList"/>
        <property name="ownerNode" read-only="1" type="Node"/>
        <property name="parentStyleSheet" read-only="1" type="StyleSheet"/>
        <property name="title" read-only="1" type="DOMString"/>
        <property name="type" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="StyleSheetList" extends="Object">
      <methods>
        <method name="item" getter="1" type="StyleSheet">
          <param name="index" default="0" optional="1" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="long"/>
      </properties>
    </interface>
    <interface name="StyleSheetPageList" extends="Object">
      <methods>
        <method name="item" getter="1" type="CSSPageRule">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="long"/>
      </properties>
    </interface>
    <interface name="SubtleCrypto" extends="Object">
      <methods>
        <method name="decrypt" type="Promise&lt;any&gt;">
          <param name="algorithm" type="(DOMString or Algorithm)" type-original="AlgorithmIdentifier"/>
          <param name="key" type="CryptoKey"/>
          <param name="data" type="ArrayBufferView" type-original="CryptoOperationData"/>
        </method>
        <method name="deriveBits" type="Promise&lt;any&gt;">
          <param name="algorithm" type="(DOMString or Algorithm)" type-original="AlgorithmIdentifier"/>
          <param name="baseKey" type="CryptoKey"/>
          <param name="length" type="unsigned long"/>
        </method>
        <method name="deriveKey" type="Promise&lt;any&gt;">
          <param name="algorithm" type="(DOMString or Algorithm)" type-original="AlgorithmIdentifier"/>
          <param name="baseKey" type="CryptoKey"/>
          <param name="derivedKeyType" type="(DOMString or Algorithm)" type-original="AlgorithmIdentifier"/>
          <param name="extractable" type="boolean"/>
          <param name="keyUsages" type="sequence&lt;DOMString&gt;"/>
        </method>
        <method name="digest" type="Promise&lt;any&gt;">
          <param name="algorithm" type="(DOMString or Algorithm)" type-original="AlgorithmIdentifier"/>
          <param name="data" type="ArrayBufferView" type-original="CryptoOperationData"/>
        </method>
        <method name="encrypt" type="Promise&lt;any&gt;">
          <param name="algorithm" type="(DOMString or Algorithm)" type-original="AlgorithmIdentifier"/>
          <param name="key" type="CryptoKey"/>
          <param name="data" type="ArrayBufferView" type-original="CryptoOperationData"/>
        </method>
        <method name="exportKey" type="Promise&lt;any&gt;">
          <param name="format" type="DOMString" type-original="KeyFormat"/>
          <param name="key" type="CryptoKey"/>
        </method>
        <method name="generateKey" type="Promise&lt;any&gt;">
          <param name="algorithm" type="(DOMString or Algorithm)" type-original="AlgorithmIdentifier"/>
          <param name="extractable" type="boolean"/>
          <param name="keyUsages" type="sequence&lt;DOMString&gt;"/>
        </method>
        <method name="importKey" type="Promise&lt;any&gt;">
          <param name="format" type="DOMString" type-original="KeyFormat"/>
          <param name="keyData" type="ArrayBufferView" type-original="CryptoOperationData"/>
          <param name="algorithm" nullable="1" type="(DOMString or Algorithm)" type-original="AlgorithmIdentifier"/>
          <param name="extractable" type="boolean"/>
          <param name="keyUsages" type="sequence&lt;DOMString&gt;"/>
        </method>
        <method name="sign" type="Promise&lt;any&gt;">
          <param name="algorithm" type="(DOMString or Algorithm)" type-original="AlgorithmIdentifier"/>
          <param name="key" type="CryptoKey"/>
          <param name="data" type="ArrayBufferView" type-original="CryptoOperationData"/>
        </method>
        <method name="unwrapKey" type="Promise&lt;any&gt;">
          <param name="format" type="DOMString" type-original="KeyFormat"/>
          <param name="wrappedKey" type="ArrayBufferView" type-original="CryptoOperationData"/>
          <param name="unwrappingKey" type="CryptoKey"/>
          <param name="unwrapAlgorithm" type="(DOMString or Algorithm)" type-original="AlgorithmIdentifier"/>
          <param name="unwrappedKeyAlgorithm" nullable="1" type="(DOMString or Algorithm)" type-original="AlgorithmIdentifier"/>
          <param name="extractable" type="boolean"/>
          <param name="keyUsages" type="sequence&lt;DOMString&gt;"/>
        </method>
        <method name="verify" type="Promise&lt;any&gt;">
          <param name="algorithm" type="(DOMString or Algorithm)" type-original="AlgorithmIdentifier"/>
          <param name="key" type="CryptoKey"/>
          <param name="signature" type="ArrayBufferView" type-original="CryptoOperationData"/>
          <param name="data" type="ArrayBufferView" type-original="CryptoOperationData"/>
        </method>
        <method name="wrapKey" type="Promise&lt;any&gt;">
          <param name="format" type="DOMString" type-original="KeyFormat"/>
          <param name="key" type="CryptoKey"/>
          <param name="wrappingKey" type="CryptoKey"/>
          <param name="wrapAlgorithm" type="(DOMString or Algorithm)" type-original="AlgorithmIdentifier"/>
        </method>
      </methods>
    </interface>
    <interface name="SVGAElement" extends="SVGGraphicsElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial" name="display" value-syntax="enum"/>
        <parsedattribute enum-values="accumulate inherit" name="enable-background" value-syntax="svg_enum_new_followed_by_svg_viewbox"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="mask" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="inherit initial" name="opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="visible hidden collapse inherit initial" name="visibility" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="a" namespace="SVG"/>
      <implements>SVGURIReference</implements>
      <properties>
        <property name="target" content-attribute="target" content-attribute-enum-values="_blank _self _parent _top" content-attribute-reflects="1" content-attribute-value-syntax="name_ref" read-only="1" type="SVGAnimatedString"/>
      </properties>
    </interface>
    <interface name="SVGAngle" extends="Object">
      <constants>
        <constant name="SVG_ANGLETYPE_DEG" type="unsigned short" value="2"/>
        <constant name="SVG_ANGLETYPE_GRAD" type="unsigned short" value="4"/>
        <constant name="SVG_ANGLETYPE_RAD" type="unsigned short" value="3"/>
        <constant name="SVG_ANGLETYPE_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_ANGLETYPE_UNSPECIFIED" type="unsigned short" value="1"/>
      </constants>
      <methods>
        <method name="convertToSpecifiedUnits" type="void">
          <param name="unitType" type="unsigned short"/>
        </method>
        <method name="newValueSpecifiedUnits" type="void">
          <param name="unitType" type="unsigned short"/>
          <param name="valueInSpecifiedUnits" type="float"/>
        </method>
      </methods>
      <properties>
        <property name="unitType" read-only="1" type="unsigned short"/>
        <property name="value" type="float"/>
        <property name="valueAsString" type="DOMString"/>
        <property name="valueInSpecifiedUnits" type="float"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedAngle" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="SVGAngle"/>
        <property name="baseVal" read-only="1" type="SVGAngle"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedBoolean" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="boolean"/>
        <property name="baseVal" type="boolean"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedEnumeration" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="unsigned short"/>
        <property name="baseVal" type="unsigned short"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedInteger" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="long"/>
        <property name="baseVal" type="long"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedLength" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="SVGLength"/>
        <property name="baseVal" read-only="1" type="SVGLength"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedLengthList" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="SVGLengthList"/>
        <property name="baseVal" read-only="1" type="SVGLengthList"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedNumber" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="float"/>
        <property name="baseVal" type="float"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedNumberList" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="SVGNumberList"/>
        <property name="baseVal" read-only="1" type="SVGNumberList"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedPreserveAspectRatio" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="SVGPreserveAspectRatio"/>
        <property name="baseVal" read-only="1" type="SVGPreserveAspectRatio"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedRect" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="SVGRect"/>
        <property name="baseVal" read-only="1" type="SVGRect"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedString" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="DOMString"/>
        <property name="baseVal" type="DOMString"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedTransformList" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="SVGTransformList"/>
        <property name="baseVal" read-only="1" type="SVGTransformList"/>
      </properties>
    </interface>
    <interface name="SVGCircleElement" extends="SVGGraphicsElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="clip-rule" value-syntax="enum"/>
        <parsedattribute enum-values="inherit initial" name="color" value-syntax="css_color"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial" name="display" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="fill" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="inherit" name="fill-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="fill-rule" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="mask" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="inherit initial" name="opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="auto none visiblePainted visibleFill visibleStroke visible painted fill stroke all inherit initial" name="pointer-events" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="stroke" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="none inherit" name="stroke-dasharray" value-syntax="comma_or_space_separated_css_percentage_or_length"/>
        <parsedattribute enum-values="inherit" name="stroke-dashoffset" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="butt round square inherit" name="stroke-linecap" value-syntax="enum"/>
        <parsedattribute enum-values="miter round bevel inherit" name="stroke-linejoin" value-syntax="enum"/>
        <parsedattribute enum-values="inherit" name="stroke-miterlimit" value-syntax="1_or_greater_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-width" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="visible hidden collapse inherit initial" name="visibility" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="circle" namespace="SVG"/>
      <properties>
        <property name="cx" content-attribute="cx" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="cy" content-attribute="cy" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="r" content-attribute="r" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGClipPathElement" extends="SVGGraphicsElement">
      <element name="clipPath" namespace="SVG"/>
      <implements>SVGUnitTypes</implements>
      <properties>
        <property name="clipPathUnits" content-attribute="clipPathUnits" content-attribute-enum-values="userSpaceOnUse objectBoundingBox" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
      </properties>
    </interface>
    <interface name="SVGComponentTransferFunctionElement" extends="SVGElement">
      <constants>
        <constant name="SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE" type="unsigned short" value="3"/>
        <constant name="SVG_FECOMPONENTTRANSFER_TYPE_GAMMA" type="unsigned short" value="5"/>
        <constant name="SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY" type="unsigned short" value="1"/>
        <constant name="SVG_FECOMPONENTTRANSFER_TYPE_LINEAR" type="unsigned short" value="4"/>
        <constant name="SVG_FECOMPONENTTRANSFER_TYPE_TABLE" type="unsigned short" value="2"/>
        <constant name="SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <properties>
        <property name="amplitude" content-attribute="amplitude" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="exponent" content-attribute="exponent" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="intercept" content-attribute="intercept" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="offset" content-attribute="offset" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="slope" content-attribute="slope" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="tableValues" content-attribute="tableValues" content-attribute-reflects="1" content-attribute-value-syntax="comma_or_space_separated_floating_point_numbers" read-only="1" type="SVGAnimatedNumberList"/>
        <property name="type" content-attribute="type" content-attribute-enum-values="identity table discrete linear gamma" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
      </properties>
    </interface>
    <interface name="SVGDefsElement" extends="SVGGraphicsElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="accumulate inherit" name="enable-background" value-syntax="svg_enum_new_followed_by_svg_viewbox"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="mask" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="inherit initial" name="opacity" value-syntax="0_to_1_floating_point_number"/>
      </anonymous-content-attributes>
      <element name="defs" namespace="SVG"/>
    </interface>
    <interface name="SVGDescElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="default preserve" name="xml:space" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="desc" namespace="SVG"/>
    </interface>
    <interface name="SVGElement" extends="Element">
      <events>
        <event name="SVGLoad" dispatch="async" type="Event"/>
      </events>
      <properties>
        <property name="dataset" read-only="1" type="DOMStringMap"/>
        <property name="ownerSVGElement" read-only="1" type="SVGSVGElement"/>
        <property name="viewportElement" read-only="1" type="SVGElement"/>
        <property name="xmlbase" type="DOMString"/>
      </properties>
    </interface>
    <interface name="SVGElementInstance" extends="EventTarget">
      <properties>
        <property name="childNodes" read-only="1" type="SVGElementInstanceList"/>
        <property name="correspondingElement" read-only="1" type="SVGElement"/>
        <property name="correspondingUseElement" read-only="1" type="SVGUseElement"/>
        <property name="firstChild" read-only="1" type="SVGElementInstance"/>
        <property name="lastChild" read-only="1" type="SVGElementInstance"/>
        <property name="nextSibling" read-only="1" type="SVGElementInstance"/>
        <property name="parentNode" read-only="1" type="SVGElementInstance"/>
        <property name="previousSibling" read-only="1" type="SVGElementInstance"/>
      </properties>
    </interface>
    <interface name="SVGElementInstanceList" extends="Object">
      <methods>
        <method name="item" type="SVGElementInstance">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="SVGEllipseElement" extends="SVGGraphicsElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="clip-rule" value-syntax="enum"/>
        <parsedattribute enum-values="inherit initial" name="color" value-syntax="css_color"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial" name="display" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="fill" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="inherit" name="fill-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="fill-rule" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="mask" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="inherit initial" name="opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="auto none visiblePainted visibleFill visibleStroke visible painted fill stroke all inherit initial" name="pointer-events" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="stroke" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="none inherit" name="stroke-dasharray" value-syntax="comma_or_space_separated_css_percentage_or_length"/>
        <parsedattribute enum-values="inherit" name="stroke-dashoffset" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="butt round square inherit" name="stroke-linecap" value-syntax="enum"/>
        <parsedattribute enum-values="miter round bevel inherit" name="stroke-linejoin" value-syntax="enum"/>
        <parsedattribute enum-values="inherit" name="stroke-miterlimit" value-syntax="1_or_greater_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-width" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="visible hidden collapse inherit initial" name="visibility" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="ellipse" namespace="SVG"/>
      <properties>
        <property name="cx" content-attribute="cx" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="cy" content-attribute="cy" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="rx" content-attribute="rx" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="ry" content-attribute="ry" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGFEBlendElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="linearRGB auto sRGB inherit" name="color-interpolation-filters" value-syntax="enum"/>
      </anonymous-content-attributes>
      <constants>
        <constant name="SVG_FEBLEND_MODE_COLOR" type="unsigned short" value="15"/>
        <constant name="SVG_FEBLEND_MODE_COLOR_BURN" type="unsigned short" value="8"/>
        <constant name="SVG_FEBLEND_MODE_COLOR_DODGE" type="unsigned short" value="7"/>
        <constant name="SVG_FEBLEND_MODE_DARKEN" type="unsigned short" value="4"/>
        <constant name="SVG_FEBLEND_MODE_DIFFERENCE" type="unsigned short" value="11"/>
        <constant name="SVG_FEBLEND_MODE_EXCLUSION" type="unsigned short" value="12"/>
        <constant name="SVG_FEBLEND_MODE_HARD_LIGHT" type="unsigned short" value="9"/>
        <constant name="SVG_FEBLEND_MODE_HUE" type="unsigned short" value="13"/>
        <constant name="SVG_FEBLEND_MODE_LIGHTEN" type="unsigned short" value="5"/>
        <constant name="SVG_FEBLEND_MODE_LUMINOSITY" type="unsigned short" value="16"/>
        <constant name="SVG_FEBLEND_MODE_MULTIPLY" type="unsigned short" value="2"/>
        <constant name="SVG_FEBLEND_MODE_NORMAL" type="unsigned short" value="1"/>
        <constant name="SVG_FEBLEND_MODE_OVERLAY" type="unsigned short" value="6"/>
        <constant name="SVG_FEBLEND_MODE_SATURATION" type="unsigned short" value="14"/>
        <constant name="SVG_FEBLEND_MODE_SCREEN" type="unsigned short" value="3"/>
        <constant name="SVG_FEBLEND_MODE_SOFT_LIGHT" type="unsigned short" value="10"/>
        <constant name="SVG_FEBLEND_MODE_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <element name="feBlend" namespace="SVG"/>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <properties>
        <property name="in1" content-attribute="in" content-attribute-enum-values="SourceGraphic SourceAlpha BackgroundImage BackgroundAlpha FillPaint StrokePaint" content-attribute-reflects="1" content-attribute-value-syntax="filter_result_ref" read-only="1" type="SVGAnimatedString"/>
        <property name="in2" content-attribute="in2" content-attribute-enum-values="SourceGraphic SourceAlpha BackgroundImage BackgroundAlpha FillPaint StrokePaint" content-attribute-reflects="1" content-attribute-value-syntax="filter_result_ref" read-only="1" type="SVGAnimatedString"/>
        <property name="mode" content-attribute="mode" content-attribute-enum-values="normal multiply screen darken lighten" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
      </properties>
    </interface>
    <interface name="SVGFEColorMatrixElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="linearRGB auto sRGB inherit" name="color-interpolation-filters" value-syntax="enum"/>
      </anonymous-content-attributes>
      <constants>
        <constant name="SVG_FECOLORMATRIX_TYPE_HUEROTATE" type="unsigned short" value="3"/>
        <constant name="SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA" type="unsigned short" value="4"/>
        <constant name="SVG_FECOLORMATRIX_TYPE_MATRIX" type="unsigned short" value="1"/>
        <constant name="SVG_FECOLORMATRIX_TYPE_SATURATE" type="unsigned short" value="2"/>
        <constant name="SVG_FECOLORMATRIX_TYPE_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <element name="feColorMatrix" namespace="SVG"/>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <properties>
        <property name="in1" content-attribute="in" content-attribute-enum-values="SourceGraphic SourceAlpha BackgroundImage BackgroundAlpha FillPaint StrokePaint" content-attribute-reflects="1" content-attribute-value-syntax="filter_result_ref" read-only="1" type="SVGAnimatedString"/>
        <property name="type" content-attribute="type" content-attribute-enum-values="matrix saturate hueRotate luminanceToAlpha" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="values" content-attribute="values" content-attribute-reflects="1" content-attribute-value-syntax="svg_5x5_matrix_values_or_single_floating_point_number" read-only="1" type="SVGAnimatedNumberList"/>
      </properties>
    </interface>
    <interface name="SVGFEComponentTransferElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="linearRGB auto sRGB inherit" name="color-interpolation-filters" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="feComponentTransfer" namespace="SVG"/>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <properties>
        <property name="in1" content-attribute="in" content-attribute-enum-values="SourceGraphic SourceAlpha BackgroundImage BackgroundAlpha FillPaint StrokePaint" content-attribute-reflects="1" content-attribute-value-syntax="filter_result_ref" read-only="1" type="SVGAnimatedString"/>
      </properties>
    </interface>
    <interface name="SVGFECompositeElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="linearRGB auto sRGB inherit" name="color-interpolation-filters" value-syntax="enum"/>
      </anonymous-content-attributes>
      <constants>
        <constant name="SVG_FECOMPOSITE_OPERATOR_ARITHMETIC" type="unsigned short" value="6"/>
        <constant name="SVG_FECOMPOSITE_OPERATOR_ATOP" type="unsigned short" value="4"/>
        <constant name="SVG_FECOMPOSITE_OPERATOR_IN" type="unsigned short" value="2"/>
        <constant name="SVG_FECOMPOSITE_OPERATOR_OUT" type="unsigned short" value="3"/>
        <constant name="SVG_FECOMPOSITE_OPERATOR_OVER" type="unsigned short" value="1"/>
        <constant name="SVG_FECOMPOSITE_OPERATOR_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_FECOMPOSITE_OPERATOR_XOR" type="unsigned short" value="5"/>
      </constants>
      <element name="feComposite" namespace="SVG"/>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <properties>
        <property name="in1" content-attribute="in" content-attribute-enum-values="SourceGraphic SourceAlpha BackgroundImage BackgroundAlpha FillPaint StrokePaint" content-attribute-reflects="1" content-attribute-value-syntax="filter_result_ref" read-only="1" type="SVGAnimatedString"/>
        <property name="in2" content-attribute="in2" content-attribute-enum-values="SourceGraphic SourceAlpha BackgroundImage BackgroundAlpha FillPaint StrokePaint" content-attribute-reflects="1" content-attribute-value-syntax="filter_result_ref" read-only="1" type="SVGAnimatedString"/>
        <property name="k1" content-attribute="k1" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="k2" content-attribute="k2" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="k3" content-attribute="k3" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="k4" content-attribute="k4" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="operator" content-attribute="operator" content-attribute-enum-values="over in out atop xor arithmetic" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
      </properties>
    </interface>
    <interface name="SVGFEConvolveMatrixElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="linearRGB auto sRGB inherit" name="color-interpolation-filters" value-syntax="enum"/>
      </anonymous-content-attributes>
      <constants>
        <constant name="SVG_EDGEMODE_DUPLICATE" type="unsigned short" value="1"/>
        <constant name="SVG_EDGEMODE_NONE" type="unsigned short" value="3"/>
        <constant name="SVG_EDGEMODE_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_EDGEMODE_WRAP" type="unsigned short" value="2"/>
      </constants>
      <element name="feConvolveMatrix" namespace="SVG"/>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <properties>
        <property name="bias" content-attribute="bias" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="divisor" content-attribute="divisor" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="edgeMode" content-attribute="edgeMode" content-attribute-enum-values="duplicate wrap none" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="in1" content-attribute="in" content-attribute-enum-values="SourceGraphic SourceAlpha BackgroundImage BackgroundAlpha FillPaint StrokePaint" content-attribute-reflects="1" content-attribute-value-syntax="filter_result_ref" read-only="1" type="SVGAnimatedString"/>
        <property name="kernelMatrix" content-attribute="kernelMatrix" content-attribute-reflects="1" content-attribute-value-syntax="comma_or_space_separated_floating_point_numbers" read-only="1" type="SVGAnimatedNumberList"/>
        <property name="kernelUnitLengthX" content-attribute="kernelUnitLength" content-attribute-reflects="1" content-attribute-value-syntax="svg_x_y_pair" read-only="1" type="SVGAnimatedNumber"/>
        <property name="kernelUnitLengthY" content-attribute="kernelUnitLength" content-attribute-reflects="1" content-attribute-value-syntax="svg_x_y_pair" read-only="1" type="SVGAnimatedNumber"/>
        <property name="orderX" content-attribute="order" content-attribute-reflects="1" content-attribute-value-syntax="svg_x_y_pair" read-only="1" type="SVGAnimatedInteger"/>
        <property name="orderY" content-attribute="order" content-attribute-reflects="1" content-attribute-value-syntax="svg_x_y_pair" read-only="1" type="SVGAnimatedInteger"/>
        <property name="preserveAlpha" content-attribute="preserveAlpha" content-attribute-enum-values="false true" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedBoolean"/>
        <property name="targetX" content-attribute="targetX" content-attribute-reflects="1" content-attribute-value-syntax="signed_integer" read-only="1" type="SVGAnimatedInteger"/>
        <property name="targetY" content-attribute="targetY" content-attribute-reflects="1" content-attribute-value-syntax="signed_integer" read-only="1" type="SVGAnimatedInteger"/>
      </properties>
    </interface>
    <interface name="SVGFEDiffuseLightingElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="inherit initial" name="color" value-syntax="css_color"/>
        <parsedattribute enum-values="linearRGB auto sRGB inherit" name="color-interpolation-filters" value-syntax="enum"/>
        <parsedattribute enum-values="currentColor inherit initial" name="lighting-color" value-syntax="css_color"/>
      </anonymous-content-attributes>
      <element name="feDiffuseLighting" namespace="SVG"/>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <properties>
        <property name="diffuseConstant" content-attribute="diffuseConstant" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="in1" content-attribute="in" content-attribute-enum-values="SourceGraphic SourceAlpha BackgroundImage BackgroundAlpha FillPaint StrokePaint" content-attribute-reflects="1" content-attribute-value-syntax="filter_result_ref" read-only="1" type="SVGAnimatedString"/>
        <property name="kernelUnitLengthX" content-attribute="kernelUnitLength" content-attribute-reflects="1" content-attribute-value-syntax="svg_x_y_pair" read-only="1" type="SVGAnimatedNumber"/>
        <property name="kernelUnitLengthY" content-attribute="kernelUnitLength" content-attribute-reflects="1" content-attribute-value-syntax="svg_x_y_pair" read-only="1" type="SVGAnimatedNumber"/>
        <property name="surfaceScale" content-attribute="surfaceScale" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
    </interface>
    <interface name="SVGFEDisplacementMapElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="linearRGB auto sRGB inherit" name="color-interpolation-filters" value-syntax="enum"/>
      </anonymous-content-attributes>
      <constants>
        <constant name="SVG_CHANNEL_A" type="unsigned short" value="4"/>
        <constant name="SVG_CHANNEL_B" type="unsigned short" value="3"/>
        <constant name="SVG_CHANNEL_G" type="unsigned short" value="2"/>
        <constant name="SVG_CHANNEL_R" type="unsigned short" value="1"/>
        <constant name="SVG_CHANNEL_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <element name="feDisplacementMap" namespace="SVG"/>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <properties>
        <property name="in1" content-attribute="in" content-attribute-enum-values="SourceGraphic SourceAlpha BackgroundImage BackgroundAlpha FillPaint StrokePaint" content-attribute-reflects="1" content-attribute-value-syntax="filter_result_ref" read-only="1" type="SVGAnimatedString"/>
        <property name="in2" content-attribute="in2" content-attribute-enum-values="SourceGraphic SourceAlpha BackgroundImage BackgroundAlpha FillPaint StrokePaint" content-attribute-reflects="1" content-attribute-value-syntax="filter_result_ref" read-only="1" type="SVGAnimatedString"/>
        <property name="scale" content-attribute="scale" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="xChannelSelector" content-attribute="xChannelSelector" content-attribute-enum-values="A R G B" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="yChannelSelector" content-attribute="yChannelSelector" content-attribute-enum-values="A R G B" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
      </properties>
    </interface>
    <interface name="SVGFEDistantLightElement" extends="SVGElement">
      <element name="feDistantLight" namespace="SVG"/>
      <properties>
        <property name="azimuth" content-attribute="azimuth" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="elevation" content-attribute="elevation" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
    </interface>
    <interface name="SVGFEFloodElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="inherit initial" name="color" value-syntax="css_color"/>
        <parsedattribute enum-values="linearRGB auto sRGB inherit" name="color-interpolation-filters" value-syntax="enum"/>
        <parsedattribute enum-values="currentColor inherit initial" name="flood-color" value-syntax="css_color"/>
        <parsedattribute enum-values="inherit" name="flood-opacity" value-syntax="0_to_1_floating_point_number"/>
      </anonymous-content-attributes>
      <element name="feFlood" namespace="SVG"/>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
    </interface>
    <interface name="SVGFEFuncAElement" extends="SVGComponentTransferFunctionElement">
      <element name="feFuncA" namespace="SVG"/>
    </interface>
    <interface name="SVGFEFuncBElement" extends="SVGComponentTransferFunctionElement">
      <element name="feFuncB" namespace="SVG"/>
    </interface>
    <interface name="SVGFEFuncGElement" extends="SVGComponentTransferFunctionElement">
      <element name="feFuncG" namespace="SVG"/>
    </interface>
    <interface name="SVGFEFuncRElement" extends="SVGComponentTransferFunctionElement">
      <element name="feFuncR" namespace="SVG"/>
    </interface>
    <interface name="SVGFEGaussianBlurElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="linearRGB auto sRGB inherit" name="color-interpolation-filters" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="feGaussianBlur" namespace="SVG"/>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <methods>
        <method name="setStdDeviation" type="void">
          <param name="stdDeviationX" type="float"/>
          <param name="stdDeviationY" type="float"/>
        </method>
      </methods>
      <properties>
        <property name="in1" content-attribute="in" content-attribute-enum-values="SourceGraphic SourceAlpha BackgroundImage BackgroundAlpha FillPaint StrokePaint" content-attribute-reflects="1" content-attribute-value-syntax="filter_result_ref" read-only="1" type="SVGAnimatedString"/>
        <property name="stdDeviationX" content-attribute="stdDeviation" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="stdDeviationY" content-attribute="stdDeviation" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
    </interface>
    <interface name="SVGFEImageElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="false true" name="externalResourcesRequired" value-syntax="enum"/>
        <parsedattribute enum-values="default preserve" name="xml:space" value-syntax="enum"/>
        <parsedattribute enum-values="linearRGB auto sRGB inherit" name="color-interpolation-filters" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="feImage" namespace="SVG"/>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <implements>SVGURIReference</implements>
      <properties>
        <property name="preserveAspectRatio" read-only="1" type="SVGAnimatedPreserveAspectRatio"/>
      </properties>
    </interface>
    <interface name="SVGFEMergeElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="linearRGB auto sRGB inherit" name="color-interpolation-filters" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="feMerge" namespace="SVG"/>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
    </interface>
    <interface name="SVGFEMergeNodeElement" extends="SVGElement">
      <element name="feMergeNode" namespace="SVG"/>
      <properties>
        <property name="in1" content-attribute="in" content-attribute-enum-values="SourceGraphic SourceAlpha BackgroundImage BackgroundAlpha FillPaint StrokePaint" content-attribute-reflects="1" content-attribute-value-syntax="filter_result_ref" read-only="1" type="SVGAnimatedString"/>
      </properties>
    </interface>
    <interface name="SVGFEMorphologyElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="linearRGB auto sRGB inherit" name="color-interpolation-filters" value-syntax="enum"/>
      </anonymous-content-attributes>
      <constants>
        <constant name="SVG_MORPHOLOGY_OPERATOR_DILATE" type="unsigned short" value="2"/>
        <constant name="SVG_MORPHOLOGY_OPERATOR_ERODE" type="unsigned short" value="1"/>
        <constant name="SVG_MORPHOLOGY_OPERATOR_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <element name="feMorphology" namespace="SVG"/>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <properties>
        <property name="in1" content-attribute="in" content-attribute-enum-values="SourceGraphic SourceAlpha BackgroundImage BackgroundAlpha FillPaint StrokePaint" content-attribute-reflects="1" content-attribute-value-syntax="filter_result_ref" read-only="1" type="SVGAnimatedString"/>
        <property name="operator" content-attribute="operator" content-attribute-enum-values="erode dilate" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="radiusX" content-attribute="radius" content-attribute-reflects="1" content-attribute-value-syntax="svg_x_y_pair" read-only="1" type="SVGAnimatedNumber"/>
        <property name="radiusY" content-attribute="radius" content-attribute-reflects="1" content-attribute-value-syntax="svg_x_y_pair" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
    </interface>
    <interface name="SVGFEOffsetElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="linearRGB auto sRGB inherit" name="color-interpolation-filters" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="feOffset" namespace="SVG"/>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <properties>
        <property name="dx" content-attribute="dx" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="dy" content-attribute="dy" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="in1" content-attribute="in" content-attribute-enum-values="SourceGraphic SourceAlpha BackgroundImage BackgroundAlpha FillPaint StrokePaint" content-attribute-reflects="1" content-attribute-value-syntax="filter_result_ref" read-only="1" type="SVGAnimatedString"/>
      </properties>
    </interface>
    <interface name="SVGFEPointLightElement" extends="SVGElement">
      <element name="fePointLight" namespace="SVG"/>
      <properties>
        <property name="x" content-attribute="x" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="y" content-attribute="y" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="z" content-attribute="z" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
    </interface>
    <interface name="SVGFESpecularLightingElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="inherit initial" name="color" value-syntax="css_color"/>
        <parsedattribute enum-values="linearRGB auto sRGB inherit" name="color-interpolation-filters" value-syntax="enum"/>
        <parsedattribute enum-values="currentColor inherit initial" name="lighting-color" value-syntax="css_color"/>
      </anonymous-content-attributes>
      <element name="feSpecularLighting" namespace="SVG"/>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <properties>
        <property name="in1" content-attribute="in" content-attribute-enum-values="SourceGraphic SourceAlpha BackgroundImage BackgroundAlpha FillPaint StrokePaint" content-attribute-reflects="1" content-attribute-value-syntax="filter_result_ref" read-only="1" type="SVGAnimatedString"/>
        <property name="kernelUnitLengthX" content-attribute="kernelUnitLength" content-attribute-reflects="1" content-attribute-value-syntax="svg_x_y_pair" read-only="1" type="SVGAnimatedNumber"/>
        <property name="kernelUnitLengthY" content-attribute="kernelUnitLength" content-attribute-reflects="1" content-attribute-value-syntax="svg_x_y_pair" read-only="1" type="SVGAnimatedNumber"/>
        <property name="specularConstant" content-attribute="specularConstant" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="specularExponent" content-attribute="specularExponent" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="surfaceScale" content-attribute="surfaceScale" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
    </interface>
    <interface name="SVGFESpotLightElement" extends="SVGElement">
      <element name="feSpotLight" namespace="SVG"/>
      <properties>
        <property name="limitingConeAngle" content-attribute="limitingConeAngle" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="pointsAtX" content-attribute="pointsAtX" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="pointsAtY" content-attribute="pointsAtY" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="pointsAtZ" content-attribute="pointsAtZ" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="specularExponent" content-attribute="specularExponent" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="x" content-attribute="x" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="y" content-attribute="y" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="z" content-attribute="z" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
    </interface>
    <interface name="SVGFETileElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="linearRGB auto sRGB inherit" name="color-interpolation-filters" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="feTile" namespace="SVG"/>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <properties>
        <property name="in1" content-attribute="in" content-attribute-enum-values="SourceGraphic SourceAlpha BackgroundImage BackgroundAlpha FillPaint StrokePaint" content-attribute-reflects="1" content-attribute-value-syntax="filter_result_ref" read-only="1" type="SVGAnimatedString"/>
      </properties>
    </interface>
    <interface name="SVGFETurbulenceElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="linearRGB auto sRGB inherit" name="color-interpolation-filters" value-syntax="enum"/>
      </anonymous-content-attributes>
      <constants>
        <constant name="SVG_STITCHTYPE_NOSTITCH" type="unsigned short" value="2"/>
        <constant name="SVG_STITCHTYPE_STITCH" type="unsigned short" value="1"/>
        <constant name="SVG_STITCHTYPE_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_TURBULENCE_TYPE_FRACTALNOISE" type="unsigned short" value="1"/>
        <constant name="SVG_TURBULENCE_TYPE_TURBULENCE" type="unsigned short" value="2"/>
        <constant name="SVG_TURBULENCE_TYPE_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <element name="feTurbulence" namespace="SVG"/>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <properties>
        <property name="baseFrequencyX" content-attribute="baseFrequency" content-attribute-reflects="1" content-attribute-value-syntax="svg_x_y_pair" read-only="1" type="SVGAnimatedNumber"/>
        <property name="baseFrequencyY" content-attribute="baseFrequency" content-attribute-reflects="1" content-attribute-value-syntax="svg_x_y_pair" read-only="1" type="SVGAnimatedNumber"/>
        <property name="numOctaves" content-attribute="numOctaves" content-attribute-reflects="1" content-attribute-value-syntax="signed_integer" read-only="1" type="SVGAnimatedInteger"/>
        <property name="seed" content-attribute="seed" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
        <property name="stitchTiles" content-attribute="stitchTiles" content-attribute-enum-values="noStitch stitch" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="type" content-attribute="type" content-attribute-enum-values="turbulence fractalNoise" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
      </properties>
    </interface>
    <interface name="SVGFilterElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="default preserve" name="xml:space" value-syntax="enum"/>
        <parsedattribute enum-values="false true" name="externalResourcesRequired" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="filter" namespace="SVG"/>
      <implements>SVGUnitTypes</implements>
      <implements>SVGURIReference</implements>
      <methods>
        <method name="setFilterRes" type="void">
          <param name="filterResX" type="unsigned long"/>
          <param name="filterResY" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="filterResX" content-attribute="filterRes" content-attribute-reflects="1" content-attribute-value-syntax="svg_x_y_pair" read-only="1" type="SVGAnimatedInteger"/>
        <property name="filterResY" content-attribute="filterRes" content-attribute-reflects="1" content-attribute-value-syntax="svg_x_y_pair" read-only="1" type="SVGAnimatedInteger"/>
        <property name="filterUnits" content-attribute="filterUnits" content-attribute-enum-values="objectBoundingBox userSpaceOnUse" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="primitiveUnits" content-attribute="primitiveUnits" content-attribute-enum-values="userSpaceOnUse objectBoundingBox" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" content-attribute="x" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" content-attribute="y" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGForeignObjectElement" extends="SVGGraphicsElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="auto inherit" name="clip" value-syntax="css_shape_rect"/>
        <parsedattribute enum-values="inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial" name="display" value-syntax="enum"/>
        <parsedattribute enum-values="visible hidden scroll auto inherit" name="overflow" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="foreignObject" namespace="SVG"/>
      <properties>
        <property name="height" read-only="1" type="SVGAnimatedLength"/>
        <property name="width" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGGElement" extends="SVGGraphicsElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial" name="display" value-syntax="enum"/>
        <parsedattribute enum-values="accumulate inherit" name="enable-background" value-syntax="svg_enum_new_followed_by_svg_viewbox"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
      </anonymous-content-attributes>
      <element name="g" namespace="SVG"/>
    </interface>
    <interface name="SVGGradientElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="false true" name="externalResourcesRequired" value-syntax="enum"/>
      </anonymous-content-attributes>
      <constants>
        <constant name="SVG_SPREADMETHOD_PAD" type="unsigned short" value="1"/>
        <constant name="SVG_SPREADMETHOD_REFLECT" type="unsigned short" value="2"/>
        <constant name="SVG_SPREADMETHOD_REPEAT" type="unsigned short" value="3"/>
        <constant name="SVG_SPREADMETHOD_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <implements>SVGUnitTypes</implements>
      <implements>SVGURIReference</implements>
      <properties>
        <property name="gradientTransform" content-attribute="gradientTransform" content-attribute-reflects="1" content-attribute-value-syntax="svg_transform_list" read-only="1" type="SVGAnimatedTransformList"/>
        <property name="gradientUnits" content-attribute="gradientUnits" content-attribute-enum-values="objectBoundingBox userSpaceOnUse" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="spreadMethod" content-attribute="spreadMethod" content-attribute-enum-values="pad reflect repeat" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
      </properties>
    </interface>
    <interface name="SVGGraphicsElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="default preserve" name="xml:space" value-syntax="enum"/>
        <parsedattribute enum-values="false true" name="externalResourcesRequired" value-syntax="enum"/>
      </anonymous-content-attributes>
      <implements>SVGTests</implements>
      <methods>
        <method name="getBBox" type="SVGRect"/>
        <method name="getCTM" type="SVGMatrix"/>
        <method name="getScreenCTM" type="SVGMatrix"/>
        <method name="getTransformToElement" type="SVGMatrix">
          <param name="element" type="SVGElement"/>
        </method>
      </methods>
      <properties>
        <property name="farthestViewportElement" read-only="1" type="SVGElement"/>
        <property name="nearestViewportElement" read-only="1" type="SVGElement"/>
        <property name="transform" content-attribute="transform" content-attribute-reflects="1" content-attribute-value-syntax="svg_transform_list" read-only="1" same-object="1" type="SVGAnimatedTransformList"/>
      </properties>
    </interface>
    <interface name="SVGImageElement" extends="SVGGraphicsElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="auto inherit" name="clip" value-syntax="css_shape_rect"/>
        <parsedattribute enum-values="visible hidden scroll auto inherit" name="overflow" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
      </anonymous-content-attributes>
      <element name="image" namespace="SVG"/>
      <events>
        <event name="SVGAbort" bubbles="1" dispatch="sync" type="Event"/>
        <event name="SVGError" bubbles="1" dispatch="sync" type="Event"/>
        <event name="error" bubbles="1" dispatch="async" tags="IEOnly" type="Event"/>
      </events>
      <implements>SVGURIReference</implements>
      <properties>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="preserveAspectRatio" content-attribute="preserveAspectRatio" content-attribute-reflects="1" content-attribute-value-syntax="svg_aspect_ratio" read-only="1" type="SVGAnimatedPreserveAspectRatio"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" content-attribute="x" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" content-attribute="y" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGLength" extends="Object">
      <constants>
        <constant name="SVG_LENGTHTYPE_CM" type="unsigned short" value="6"/>
        <constant name="SVG_LENGTHTYPE_EMS" type="unsigned short" value="3"/>
        <constant name="SVG_LENGTHTYPE_EXS" type="unsigned short" value="4"/>
        <constant name="SVG_LENGTHTYPE_IN" type="unsigned short" value="8"/>
        <constant name="SVG_LENGTHTYPE_MM" type="unsigned short" value="7"/>
        <constant name="SVG_LENGTHTYPE_NUMBER" type="unsigned short" value="1"/>
        <constant name="SVG_LENGTHTYPE_PC" type="unsigned short" value="10"/>
        <constant name="SVG_LENGTHTYPE_PERCENTAGE" type="unsigned short" value="2"/>
        <constant name="SVG_LENGTHTYPE_PT" type="unsigned short" value="9"/>
        <constant name="SVG_LENGTHTYPE_PX" type="unsigned short" value="5"/>
        <constant name="SVG_LENGTHTYPE_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <methods>
        <method name="convertToSpecifiedUnits" type="void">
          <param name="unitType" type="unsigned short"/>
        </method>
        <method name="newValueSpecifiedUnits" type="void">
          <param name="unitType" type="unsigned short"/>
          <param name="valueInSpecifiedUnits" type="float"/>
        </method>
      </methods>
      <properties>
        <property name="unitType" read-only="1" type="unsigned short"/>
        <property name="value" type="float"/>
        <property name="valueAsString" type="DOMString"/>
        <property name="valueInSpecifiedUnits" type="float"/>
      </properties>
    </interface>
    <interface name="SVGLengthList" extends="Object">
      <methods>
        <method name="appendItem" type="SVGLength">
          <param name="newItem" type="SVGLength"/>
        </method>
        <method name="clear" type="void"/>
        <method name="getItem" type="SVGLength">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="initialize" type="SVGLength">
          <param name="newItem" type="SVGLength"/>
        </method>
        <method name="insertItemBefore" type="SVGLength">
          <param name="newItem" type="SVGLength"/>
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeItem" type="SVGLength">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="replaceItem" type="SVGLength">
          <param name="newItem" type="SVGLength"/>
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="numberOfItems" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="SVGLinearGradientElement" extends="SVGGradientElement">
      <element name="linearGradient" namespace="SVG"/>
      <properties>
        <property name="x1" content-attribute="x1" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="x2" content-attribute="x2" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="y1" content-attribute="y1" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="y2" content-attribute="y2" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGLineElement" extends="SVGGraphicsElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="clip-rule" value-syntax="enum"/>
        <parsedattribute enum-values="inherit initial" name="color" value-syntax="css_color"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial" name="display" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="fill" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="inherit" name="fill-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="fill-rule" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="marker" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="marker-end" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="marker-mid" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="marker-start" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="mask" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="inherit initial" name="opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="auto none visiblePainted visibleFill visibleStroke visible painted fill stroke all inherit initial" name="pointer-events" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="stroke" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="none inherit" name="stroke-dasharray" value-syntax="comma_or_space_separated_css_percentage_or_length"/>
        <parsedattribute enum-values="inherit" name="stroke-dashoffset" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="butt round square inherit" name="stroke-linecap" value-syntax="enum"/>
        <parsedattribute enum-values="miter round bevel inherit" name="stroke-linejoin" value-syntax="enum"/>
        <parsedattribute enum-values="inherit" name="stroke-miterlimit" value-syntax="1_or_greater_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-width" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="visible hidden collapse inherit initial" name="visibility" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="line" namespace="SVG"/>
      <properties>
        <property name="x1" content-attribute="x1" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="x2" content-attribute="x2" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="y1" content-attribute="y1" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="y2" content-attribute="y2" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGMarkerElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="auto inherit" name="clip" value-syntax="css_shape_rect"/>
        <parsedattribute enum-values="visible hidden scroll auto inherit" name="overflow" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="accumulate inherit" name="enable-background" value-syntax="svg_enum_new_followed_by_svg_viewbox"/>
        <parsedattribute enum-values="false true" name="externalResourcesRequired" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="mask" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="inherit initial" name="opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="default preserve" name="xml:space" value-syntax="enum"/>
      </anonymous-content-attributes>
      <constants>
        <constant name="SVG_MARKER_ORIENT_ANGLE" type="unsigned short" value="2"/>
        <constant name="SVG_MARKER_ORIENT_AUTO" type="unsigned short" value="1"/>
        <constant name="SVG_MARKER_ORIENT_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_MARKERUNITS_STROKEWIDTH" type="unsigned short" value="2"/>
        <constant name="SVG_MARKERUNITS_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_MARKERUNITS_USERSPACEONUSE" type="unsigned short" value="1"/>
      </constants>
      <element name="marker" namespace="SVG"/>
      <implements>SVGFitToViewBox</implements>
      <methods>
        <method name="setOrientToAngle" type="void">
          <param name="angle" type="SVGAngle"/>
        </method>
        <method name="setOrientToAuto" type="void"/>
      </methods>
      <properties>
        <property name="markerHeight" content-attribute="markerHeight" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="markerUnits" content-attribute="markerUnits" content-attribute-enum-values="strokeWidth userSpaceOnUse" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="markerWidth" content-attribute="markerWidth" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="orientAngle" content-attribute="orient" content-attribute-enum-values="auto" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedAngle"/>
        <property name="orientType" content-attribute="orient" content-attribute-enum-values="auto" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="refX" content-attribute="refX" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="refY" content-attribute="refY" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGMaskElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="accumulate inherit" name="enable-background" value-syntax="svg_enum_new_followed_by_svg_viewbox"/>
        <parsedattribute enum-values="false true" name="externalResourcesRequired" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="mask" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="inherit initial" name="opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="default preserve" name="xml:space" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="mask" namespace="SVG"/>
      <implements>SVGTests</implements>
      <implements>SVGUnitTypes</implements>
      <properties>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="maskContentUnits" content-attribute="maskContentUnits" content-attribute-enum-values="userSpaceOnUse objectBoundingBox" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="maskUnits" content-attribute="maskUnits" content-attribute-enum-values="objectBoundingBox userSpaceOnUse" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" content-attribute="x" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" content-attribute="y" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGMatrix" extends="Object">
      <methods>
        <method name="flipX" type="SVGMatrix"/>
        <method name="flipY" type="SVGMatrix"/>
        <method name="inverse" type="SVGMatrix"/>
        <method name="multiply" type="SVGMatrix">
          <param name="secondMatrix" type="SVGMatrix"/>
        </method>
        <method name="rotate" type="SVGMatrix">
          <param name="angle" type="float"/>
        </method>
        <method name="rotateFromVector" type="SVGMatrix">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
        </method>
        <method name="scale" type="SVGMatrix">
          <param name="scaleFactor" type="float"/>
        </method>
        <method name="scaleNonUniform" type="SVGMatrix">
          <param name="scaleFactorX" type="float"/>
          <param name="scaleFactorY" type="float"/>
        </method>
        <method name="skewX" type="SVGMatrix">
          <param name="angle" type="float"/>
        </method>
        <method name="skewY" type="SVGMatrix">
          <param name="angle" type="float"/>
        </method>
        <method name="translate" type="SVGMatrix">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
        </method>
      </methods>
      <properties>
        <property name="a" type="float"/>
        <property name="b" type="float"/>
        <property name="c" type="float"/>
        <property name="d" type="float"/>
        <property name="e" type="float"/>
        <property name="f" type="float"/>
      </properties>
    </interface>
    <interface name="SVGMetadataElement" extends="SVGElement">
      <element name="metadata" namespace="SVG"/>
    </interface>
    <interface name="SVGNumber" extends="Object">
      <properties>
        <property name="value" type="float"/>
      </properties>
    </interface>
    <interface name="SVGNumberList" extends="Object">
      <methods>
        <method name="appendItem" type="SVGNumber">
          <param name="newItem" type="SVGNumber"/>
        </method>
        <method name="clear" type="void"/>
        <method name="getItem" type="SVGNumber">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="initialize" type="SVGNumber">
          <param name="newItem" type="SVGNumber"/>
        </method>
        <method name="insertItemBefore" type="SVGNumber">
          <param name="newItem" type="SVGNumber"/>
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeItem" type="SVGNumber">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="replaceItem" type="SVGNumber">
          <param name="newItem" type="SVGNumber"/>
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="numberOfItems" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="SVGPathElement" extends="SVGGraphicsElement">
      <anonymous-content-attributes>
        <parsedattribute name="d" value-syntax="svg_path_data"/>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="clip-rule" value-syntax="enum"/>
        <parsedattribute enum-values="inherit initial" name="color" value-syntax="css_color"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial" name="display" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="fill" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="inherit" name="fill-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="fill-rule" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="marker" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="marker-end" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="marker-mid" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="marker-start" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="mask" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="inherit initial" name="opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="auto none visiblePainted visibleFill visibleStroke visible painted fill stroke all inherit initial" name="pointer-events" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="stroke" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="none inherit" name="stroke-dasharray" value-syntax="comma_or_space_separated_css_percentage_or_length"/>
        <parsedattribute enum-values="inherit" name="stroke-dashoffset" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="butt round square inherit" name="stroke-linecap" value-syntax="enum"/>
        <parsedattribute enum-values="miter round bevel inherit" name="stroke-linejoin" value-syntax="enum"/>
        <parsedattribute enum-values="inherit" name="stroke-miterlimit" value-syntax="1_or_greater_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-width" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="visible hidden collapse inherit initial" name="visibility" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="path" namespace="SVG"/>
      <methods>
        <method name="createSVGPathSegArcAbs" type="SVGPathSegArcAbs">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="r1" type="float"/>
          <param name="r2" type="float"/>
          <param name="angle" type="float"/>
          <param name="largeArcFlag" type="boolean"/>
          <param name="sweepFlag" type="boolean"/>
        </method>
        <method name="createSVGPathSegArcRel" type="SVGPathSegArcRel">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="r1" type="float"/>
          <param name="r2" type="float"/>
          <param name="angle" type="float"/>
          <param name="largeArcFlag" type="boolean"/>
          <param name="sweepFlag" type="boolean"/>
        </method>
        <method name="createSVGPathSegClosePath" type="SVGPathSegClosePath"/>
        <method name="createSVGPathSegCurvetoCubicAbs" type="SVGPathSegCurvetoCubicAbs">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="x1" type="float"/>
          <param name="y1" type="float"/>
          <param name="x2" type="float"/>
          <param name="y2" type="float"/>
        </method>
        <method name="createSVGPathSegCurvetoCubicRel" type="SVGPathSegCurvetoCubicRel">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="x1" type="float"/>
          <param name="y1" type="float"/>
          <param name="x2" type="float"/>
          <param name="y2" type="float"/>
        </method>
        <method name="createSVGPathSegCurvetoCubicSmoothAbs" type="SVGPathSegCurvetoCubicSmoothAbs">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="x2" type="float"/>
          <param name="y2" type="float"/>
        </method>
        <method name="createSVGPathSegCurvetoCubicSmoothRel" type="SVGPathSegCurvetoCubicSmoothRel">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="x2" type="float"/>
          <param name="y2" type="float"/>
        </method>
        <method name="createSVGPathSegCurvetoQuadraticAbs" type="SVGPathSegCurvetoQuadraticAbs">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="x1" type="float"/>
          <param name="y1" type="float"/>
        </method>
        <method name="createSVGPathSegCurvetoQuadraticRel" type="SVGPathSegCurvetoQuadraticRel">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="x1" type="float"/>
          <param name="y1" type="float"/>
        </method>
        <method name="createSVGPathSegCurvetoQuadraticSmoothAbs" type="SVGPathSegCurvetoQuadraticSmoothAbs">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
        </method>
        <method name="createSVGPathSegCurvetoQuadraticSmoothRel" type="SVGPathSegCurvetoQuadraticSmoothRel">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
        </method>
        <method name="createSVGPathSegLinetoAbs" type="SVGPathSegLinetoAbs">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
        </method>
        <method name="createSVGPathSegLinetoHorizontalAbs" type="SVGPathSegLinetoHorizontalAbs">
          <param name="x" type="float"/>
        </method>
        <method name="createSVGPathSegLinetoHorizontalRel" type="SVGPathSegLinetoHorizontalRel">
          <param name="x" type="float"/>
        </method>
        <method name="createSVGPathSegLinetoRel" type="SVGPathSegLinetoRel">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
        </method>
        <method name="createSVGPathSegLinetoVerticalAbs" type="SVGPathSegLinetoVerticalAbs">
          <param name="y" type="float"/>
        </method>
        <method name="createSVGPathSegLinetoVerticalRel" type="SVGPathSegLinetoVerticalRel">
          <param name="y" type="float"/>
        </method>
        <method name="createSVGPathSegMovetoAbs" type="SVGPathSegMovetoAbs">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
        </method>
        <method name="createSVGPathSegMovetoRel" type="SVGPathSegMovetoRel">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
        </method>
        <method name="getPathSegAtLength" type="unsigned long">
          <param name="distance" type="float"/>
        </method>
        <method name="getPointAtLength" type="SVGPoint">
          <param name="distance" type="float"/>
        </method>
        <method name="getTotalLength" type="float"/>
      </methods>
      <properties>
        <property name="pathSegList" read-only="1" type="SVGPathSegList"/>
      </properties>
    </interface>
    <interface name="SVGPathSeg" extends="Object">
      <constants>
        <constant name="PATHSEG_ARC_ABS" type="unsigned short" value="10"/>
        <constant name="PATHSEG_ARC_REL" type="unsigned short" value="11"/>
        <constant name="PATHSEG_CLOSEPATH" type="unsigned short" value="1"/>
        <constant name="PATHSEG_CURVETO_CUBIC_ABS" type="unsigned short" value="6"/>
        <constant name="PATHSEG_CURVETO_CUBIC_REL" type="unsigned short" value="7"/>
        <constant name="PATHSEG_CURVETO_CUBIC_SMOOTH_ABS" type="unsigned short" value="16"/>
        <constant name="PATHSEG_CURVETO_CUBIC_SMOOTH_REL" type="unsigned short" value="17"/>
        <constant name="PATHSEG_CURVETO_QUADRATIC_ABS" type="unsigned short" value="8"/>
        <constant name="PATHSEG_CURVETO_QUADRATIC_REL" type="unsigned short" value="9"/>
        <constant name="PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS" type="unsigned short" value="18"/>
        <constant name="PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL" type="unsigned short" value="19"/>
        <constant name="PATHSEG_LINETO_ABS" type="unsigned short" value="4"/>
        <constant name="PATHSEG_LINETO_HORIZONTAL_ABS" type="unsigned short" value="12"/>
        <constant name="PATHSEG_LINETO_HORIZONTAL_REL" type="unsigned short" value="13"/>
        <constant name="PATHSEG_LINETO_REL" type="unsigned short" value="5"/>
        <constant name="PATHSEG_LINETO_VERTICAL_ABS" type="unsigned short" value="14"/>
        <constant name="PATHSEG_LINETO_VERTICAL_REL" type="unsigned short" value="15"/>
        <constant name="PATHSEG_MOVETO_ABS" type="unsigned short" value="2"/>
        <constant name="PATHSEG_MOVETO_REL" type="unsigned short" value="3"/>
        <constant name="PATHSEG_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <properties>
        <property name="pathSegType" read-only="1" type="unsigned short"/>
        <property name="pathSegTypeAsLetter" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="SVGPathSegArcAbs" extends="SVGPathSeg">
      <properties>
        <property name="angle" type="float"/>
        <property name="largeArcFlag" type="boolean"/>
        <property name="r1" type="float"/>
        <property name="r2" type="float"/>
        <property name="sweepFlag" type="boolean"/>
        <property name="x" type="float"/>
        <property name="y" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPathSegArcRel" extends="SVGPathSeg">
      <properties>
        <property name="angle" type="float"/>
        <property name="largeArcFlag" type="boolean"/>
        <property name="r1" type="float"/>
        <property name="r2" type="float"/>
        <property name="sweepFlag" type="boolean"/>
        <property name="x" type="float"/>
        <property name="y" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPathSegClosePath" extends="SVGPathSeg"/>
    <interface name="SVGPathSegCurvetoCubicAbs" extends="SVGPathSeg">
      <properties>
        <property name="x" type="float"/>
        <property name="x1" type="float"/>
        <property name="x2" type="float"/>
        <property name="y" type="float"/>
        <property name="y1" type="float"/>
        <property name="y2" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPathSegCurvetoCubicRel" extends="SVGPathSeg">
      <properties>
        <property name="x" type="float"/>
        <property name="x1" type="float"/>
        <property name="x2" type="float"/>
        <property name="y" type="float"/>
        <property name="y1" type="float"/>
        <property name="y2" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPathSegCurvetoCubicSmoothAbs" extends="SVGPathSeg">
      <properties>
        <property name="x" type="float"/>
        <property name="x2" type="float"/>
        <property name="y" type="float"/>
        <property name="y2" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPathSegCurvetoCubicSmoothRel" extends="SVGPathSeg">
      <properties>
        <property name="x" type="float"/>
        <property name="x2" type="float"/>
        <property name="y" type="float"/>
        <property name="y2" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPathSegCurvetoQuadraticAbs" extends="SVGPathSeg">
      <properties>
        <property name="x" type="float"/>
        <property name="x1" type="float"/>
        <property name="y" type="float"/>
        <property name="y1" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPathSegCurvetoQuadraticRel" extends="SVGPathSeg">
      <properties>
        <property name="x" type="float"/>
        <property name="x1" type="float"/>
        <property name="y" type="float"/>
        <property name="y1" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPathSegCurvetoQuadraticSmoothAbs" extends="SVGPathSeg">
      <properties>
        <property name="x" type="float"/>
        <property name="y" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPathSegCurvetoQuadraticSmoothRel" extends="SVGPathSeg">
      <properties>
        <property name="x" type="float"/>
        <property name="y" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPathSegLinetoAbs" extends="SVGPathSeg">
      <properties>
        <property name="x" type="float"/>
        <property name="y" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPathSegLinetoHorizontalAbs" extends="SVGPathSeg">
      <properties>
        <property name="x" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPathSegLinetoHorizontalRel" extends="SVGPathSeg">
      <properties>
        <property name="x" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPathSegLinetoRel" extends="SVGPathSeg">
      <properties>
        <property name="x" type="float"/>
        <property name="y" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPathSegLinetoVerticalAbs" extends="SVGPathSeg">
      <properties>
        <property name="y" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPathSegLinetoVerticalRel" extends="SVGPathSeg">
      <properties>
        <property name="y" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPathSegList" extends="Object">
      <methods>
        <method name="appendItem" type="SVGPathSeg">
          <param name="newItem" type="SVGPathSeg"/>
        </method>
        <method name="clear" type="void"/>
        <method name="getItem" type="SVGPathSeg">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="initialize" type="SVGPathSeg">
          <param name="newItem" type="SVGPathSeg"/>
        </method>
        <method name="insertItemBefore" type="SVGPathSeg">
          <param name="newItem" type="SVGPathSeg"/>
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeItem" type="SVGPathSeg">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="replaceItem" type="SVGPathSeg">
          <param name="newItem" type="SVGPathSeg"/>
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="numberOfItems" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="SVGPathSegMovetoAbs" extends="SVGPathSeg">
      <properties>
        <property name="x" type="float"/>
        <property name="y" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPathSegMovetoRel" extends="SVGPathSeg">
      <properties>
        <property name="x" type="float"/>
        <property name="y" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPatternElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="auto inherit" name="clip" value-syntax="css_shape_rect"/>
        <parsedattribute enum-values="visible hidden scroll auto inherit" name="overflow" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="accumulate inherit" name="enable-background" value-syntax="svg_enum_new_followed_by_svg_viewbox"/>
        <parsedattribute enum-values="false true" name="externalResourcesRequired" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="mask" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="inherit initial" name="opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="default preserve" name="xml:space" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="pattern" namespace="SVG"/>
      <implements>SVGTests</implements>
      <implements>SVGUnitTypes</implements>
      <implements>SVGFitToViewBox</implements>
      <implements>SVGURIReference</implements>
      <properties>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="patternContentUnits" content-attribute="patternContentUnits" content-attribute-enum-values="userSpaceOnUse objectBoundingBox" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="patternTransform" content-attribute="patternTransform" content-attribute-reflects="1" content-attribute-value-syntax="svg_transform_list" read-only="1" type="SVGAnimatedTransformList"/>
        <property name="patternUnits" content-attribute="patternUnits" content-attribute-enum-values="objectBoundingBox userSpaceOnUse" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" content-attribute="x" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" content-attribute="y" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGPoint" extends="Object">
      <methods>
        <method name="matrixTransform" type="SVGPoint">
          <param name="matrix" type="SVGMatrix"/>
        </method>
      </methods>
      <properties>
        <property name="x" type="float"/>
        <property name="y" type="float"/>
      </properties>
    </interface>
    <interface name="SVGPointList" extends="Object">
      <methods>
        <method name="appendItem" type="SVGPoint">
          <param name="newItem" type="SVGPoint"/>
        </method>
        <method name="clear" type="void"/>
        <method name="getItem" type="SVGPoint">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="initialize" type="SVGPoint">
          <param name="newItem" type="SVGPoint"/>
        </method>
        <method name="insertItemBefore" type="SVGPoint">
          <param name="newItem" type="SVGPoint"/>
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeItem" type="SVGPoint">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="replaceItem" type="SVGPoint">
          <param name="newItem" type="SVGPoint"/>
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="numberOfItems" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="SVGPolygonElement" extends="SVGGraphicsElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="clip-rule" value-syntax="enum"/>
        <parsedattribute enum-values="inherit initial" name="color" value-syntax="css_color"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial" name="display" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="fill" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="inherit" name="fill-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="fill-rule" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="marker" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="marker-end" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="marker-mid" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="marker-start" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="mask" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="inherit initial" name="opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="auto none visiblePainted visibleFill visibleStroke visible painted fill stroke all inherit initial" name="pointer-events" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="stroke" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="none inherit" name="stroke-dasharray" value-syntax="comma_or_space_separated_css_percentage_or_length"/>
        <parsedattribute enum-values="inherit" name="stroke-dashoffset" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="butt round square inherit" name="stroke-linecap" value-syntax="enum"/>
        <parsedattribute enum-values="miter round bevel inherit" name="stroke-linejoin" value-syntax="enum"/>
        <parsedattribute enum-values="inherit" name="stroke-miterlimit" value-syntax="1_or_greater_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-width" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="visible hidden collapse inherit initial" name="visibility" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="polygon" namespace="SVG"/>
      <implements>SVGAnimatedPoints</implements>
    </interface>
    <interface name="SVGPolylineElement" extends="SVGGraphicsElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="clip-rule" value-syntax="enum"/>
        <parsedattribute enum-values="inherit initial" name="color" value-syntax="css_color"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial" name="display" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="fill" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="inherit" name="fill-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="fill-rule" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="marker" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="marker-end" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="marker-mid" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="marker-start" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="mask" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="inherit initial" name="opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="auto none visiblePainted visibleFill visibleStroke visible painted fill stroke all inherit initial" name="pointer-events" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="stroke" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="none inherit" name="stroke-dasharray" value-syntax="comma_or_space_separated_css_percentage_or_length"/>
        <parsedattribute enum-values="inherit" name="stroke-dashoffset" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="butt round square inherit" name="stroke-linecap" value-syntax="enum"/>
        <parsedattribute enum-values="miter round bevel inherit" name="stroke-linejoin" value-syntax="enum"/>
        <parsedattribute enum-values="inherit" name="stroke-miterlimit" value-syntax="1_or_greater_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-width" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="visible hidden collapse inherit initial" name="visibility" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="polyline" namespace="SVG"/>
      <implements>SVGAnimatedPoints</implements>
    </interface>
    <interface name="SVGPreserveAspectRatio" extends="Object">
      <constants>
        <constant name="SVG_MEETORSLICE_MEET" type="unsigned short" value="1"/>
        <constant name="SVG_MEETORSLICE_SLICE" type="unsigned short" value="2"/>
        <constant name="SVG_MEETORSLICE_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_PRESERVEASPECTRATIO_NONE" type="unsigned short" value="1"/>
        <constant name="SVG_PRESERVEASPECTRATIO_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMAXYMAX" type="unsigned short" value="10"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMAXYMID" type="unsigned short" value="7"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMAXYMIN" type="unsigned short" value="4"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMIDYMAX" type="unsigned short" value="9"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMIDYMID" type="unsigned short" value="6"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMIDYMIN" type="unsigned short" value="3"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMINYMAX" type="unsigned short" value="8"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMINYMID" type="unsigned short" value="5"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMINYMIN" type="unsigned short" value="2"/>
      </constants>
      <properties>
        <property name="align" type="unsigned short"/>
        <property name="meetOrSlice" type="unsigned short"/>
      </properties>
    </interface>
    <interface name="SVGRadialGradientElement" extends="SVGGradientElement">
      <element name="radialGradient" namespace="SVG"/>
      <properties>
        <property name="cx" content-attribute="cx" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="cy" content-attribute="cy" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="fx" content-attribute="fx" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="fy" content-attribute="fy" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="r" content-attribute="r" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGRect" extends="Object">
      <properties>
        <property name="height" type="float"/>
        <property name="width" type="float"/>
        <property name="x" type="float"/>
        <property name="y" type="float"/>
      </properties>
    </interface>
    <interface name="SVGRectElement" extends="SVGGraphicsElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="clip-rule" value-syntax="enum"/>
        <parsedattribute enum-values="inherit initial" name="color" value-syntax="css_color"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial" name="display" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="fill" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="inherit" name="fill-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="fill-rule" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="mask" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="inherit initial" name="opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="auto none visiblePainted visibleFill visibleStroke visible painted fill stroke all inherit initial" name="pointer-events" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="stroke" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="none inherit" name="stroke-dasharray" value-syntax="comma_or_space_separated_css_percentage_or_length"/>
        <parsedattribute enum-values="inherit" name="stroke-dashoffset" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="butt round square inherit" name="stroke-linecap" value-syntax="enum"/>
        <parsedattribute enum-values="miter round bevel inherit" name="stroke-linejoin" value-syntax="enum"/>
        <parsedattribute enum-values="inherit" name="stroke-miterlimit" value-syntax="1_or_greater_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-width" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="visible hidden collapse inherit initial" name="visibility" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="rect" namespace="SVG"/>
      <properties>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="rx" content-attribute="rx" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="ry" content-attribute="ry" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" content-attribute="x" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" content-attribute="y" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGScriptElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="false true" name="externalResourcesRequired" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="script" namespace="SVG"/>
      <implements>SVGURIReference</implements>
      <properties>
        <property name="type" content-attribute="type" content-attribute-reflects="1" content-attribute-value-syntax="mime_type" type="DOMString"/>
      </properties>
    </interface>
    <interface name="SVGStopElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="inherit initial" name="color" value-syntax="css_color"/>
        <parsedattribute enum-values="currentColor inherit initial" name="stop-color" value-syntax="css_color"/>
        <parsedattribute enum-values="inherit" name="stop-opacity" value-syntax="0_to_1_floating_point_number"/>
      </anonymous-content-attributes>
      <element name="stop" namespace="SVG"/>
      <properties>
        <property name="offset" content-attribute="offset" content-attribute-reflects="1" content-attribute-value-syntax="floating_point_number" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
    </interface>
    <interface name="SVGStringList" extends="Object">
      <methods>
        <method name="appendItem" type="DOMString">
          <param name="newItem" type="DOMString"/>
        </method>
        <method name="clear" type="void"/>
        <method name="getItem" type="DOMString">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="initialize" type="DOMString">
          <param name="newItem" type="DOMString"/>
        </method>
        <method name="insertItemBefore" type="DOMString">
          <param name="newItem" type="DOMString"/>
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeItem" type="DOMString">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="replaceItem" type="DOMString">
          <param name="newItem" type="DOMString"/>
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="numberOfItems" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="SVGStyleElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="default preserve" name="xml:space" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="style" namespace="SVG"/>
      <properties>
        <property name="disabled" type="boolean"/>
        <property name="media" content-attribute="media" content-attribute-reflects="1" content-attribute-value-syntax="media_query" type="DOMString"/>
        <property name="title" content-attribute="title" content-attribute-reflects="1" type="DOMString"/>
        <property name="type" content-attribute="type" content-attribute-reflects="1" content-attribute-value-syntax="mime_type" type="DOMString"/>
      </properties>
    </interface>
    <interface name="SVGSVGElement" extends="SVGGraphicsElement">
      <anonymous-content-attributes>
        <parsedattribute name="version" value-syntax="floating_point_number"/>
        <parsedattribute name="baseProfile"/>
        <parsedattribute enum-values="false true" name="externalResourcesRequired" value-syntax="enum"/>
        <parsedattribute enum-values="default preserve" name="xml:space" value-syntax="enum"/>
        <parsedattribute enum-values="auto inherit" name="clip" value-syntax="css_shape_rect"/>
        <parsedattribute enum-values="inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial" name="display" value-syntax="enum"/>
        <parsedattribute enum-values="visible hidden scroll auto inherit" name="overflow" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="accumulate inherit" name="enable-background" value-syntax="svg_enum_new_followed_by_svg_viewbox"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="mask" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="inherit initial" name="opacity" value-syntax="0_to_1_floating_point_number"/>
      </anonymous-content-attributes>
      <element name="svg" namespace="SVG"/>
      <events>
        <event name="SVGScroll" bubbles="1" dispatch="sync-or-async" type="Event"/>
        <event name="SVGZoom" bubbles="1" dispatch="sync" type="SVGZoomEvent"/>
      </events>
      <implements>DocumentEvent</implements>
      <implements>SVGFitToViewBox</implements>
      <implements>SVGZoomAndPan</implements>
      <methods>
        <method name="checkEnclosure" type="boolean">
          <param name="element" type="SVGElement"/>
          <param name="rect" type="SVGRect"/>
        </method>
        <method name="checkIntersection" type="boolean">
          <param name="element" type="SVGElement"/>
          <param name="rect" type="SVGRect"/>
        </method>
        <method name="createSVGAngle" type="SVGAngle"/>
        <method name="createSVGLength" type="SVGLength"/>
        <method name="createSVGMatrix" type="SVGMatrix"/>
        <method name="createSVGNumber" type="SVGNumber"/>
        <method name="createSVGPoint" type="SVGPoint"/>
        <method name="createSVGRect" type="SVGRect"/>
        <method name="createSVGTransform" type="SVGTransform"/>
        <method name="createSVGTransformFromMatrix" type="SVGTransform">
          <param name="matrix" type="SVGMatrix"/>
        </method>
        <method name="deselectAll" type="void"/>
        <method name="forceRedraw" type="void"/>
        <method name="getComputedStyle" type="CSSStyleDeclaration">
          <param name="elt" type="Element"/>
          <param name="pseudoElt" nullable="1" optional="1" type="DOMString"/>
        </method>
        <method name="getCurrentTime" type="float"/>
        <method name="getElementById" type="Element">
          <param name="elementId" type="DOMString"/>
        </method>
        <method name="getEnclosureList" type="NodeList">
          <param name="rect" type="SVGRect"/>
          <param name="referenceElement" type="SVGElement"/>
        </method>
        <method name="getIntersectionList" type="NodeList">
          <param name="rect" type="SVGRect"/>
          <param name="referenceElement" type="SVGElement"/>
        </method>
        <method name="pauseAnimations" type="void"/>
        <method name="setCurrentTime" type="void">
          <param name="seconds" type="float"/>
        </method>
        <method name="suspendRedraw" type="unsigned long">
          <param name="maxWaitMilliseconds" type="unsigned long"/>
        </method>
        <method name="unpauseAnimations" type="void"/>
        <method name="unsuspendRedraw" type="void">
          <param name="suspendHandleID" type="unsigned long"/>
        </method>
        <method name="unsuspendRedrawAll" type="void"/>
      </methods>
      <properties>
        <property name="contentScriptType" content-attribute="contentScriptType" content-attribute-reflects="1" content-attribute-value-syntax="mime_type" type="DOMString"/>
        <property name="contentStyleType" content-attribute="contentStyleType" content-attribute-reflects="1" content-attribute-value-syntax="mime_type" type="DOMString"/>
        <property name="currentScale" type="float"/>
        <property name="currentTranslate" read-only="1" type="SVGPoint"/>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="onabort" content-attribute="onabort" content-attribute-value-syntax="javascript" event-handler="SVGAbort" type="EventHandler"/>
        <property name="onerror" content-attribute="onerror" content-attribute-value-syntax="javascript" event-handler="SVGError" type="EventHandler"/>
        <property name="onresize" content-attribute="onresize" content-attribute-value-syntax="javascript" event-handler="resize" type="EventHandler"/>
        <property name="onscroll" content-attribute="onscroll" content-attribute-value-syntax="javascript" event-handler="scroll" type="EventHandler"/>
        <property name="onunload" content-attribute="onunload" content-attribute-value-syntax="javascript" event-handler="SVGUnload" type="EventHandler"/>
        <property name="onzoom" content-attribute="onzoom" content-attribute-value-syntax="javascript" event-handler="SVGZoom" type="EventHandler"/>
        <property name="pixelUnitToMillimeterX" read-only="1" type="float"/>
        <property name="pixelUnitToMillimeterY" read-only="1" type="float"/>
        <property name="screenPixelToMillimeterX" read-only="1" type="float"/>
        <property name="screenPixelToMillimeterY" read-only="1" type="float"/>
        <property name="viewport" read-only="1" type="SVGRect"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" content-attribute="x" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" content-attribute="y" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGSwitchElement" extends="SVGGraphicsElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial" name="display" value-syntax="enum"/>
        <parsedattribute enum-values="accumulate inherit" name="enable-background" value-syntax="svg_enum_new_followed_by_svg_viewbox"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="mask" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="inherit initial" name="opacity" value-syntax="0_to_1_floating_point_number"/>
      </anonymous-content-attributes>
      <element name="switch" namespace="SVG"/>
    </interface>
    <interface name="SVGSymbolElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="auto inherit" name="clip" value-syntax="css_shape_rect"/>
        <parsedattribute enum-values="visible hidden scroll auto inherit" name="overflow" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="accumulate inherit" name="enable-background" value-syntax="svg_enum_new_followed_by_svg_viewbox"/>
        <parsedattribute enum-values="false true" name="externalResourcesRequired" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="mask" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="inherit initial" name="opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="default preserve" name="xml:space" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="symbol" namespace="SVG"/>
      <implements>SVGFitToViewBox</implements>
    </interface>
    <interface name="SVGTextContentElement" extends="SVGGraphicsElement">
      <constants>
        <constant name="LENGTHADJUST_SPACING" type="unsigned short" value="1"/>
        <constant name="LENGTHADJUST_SPACINGANDGLYPHS" type="unsigned short" value="2"/>
        <constant name="LENGTHADJUST_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <methods>
        <method name="getCharNumAtPosition" type="long">
          <param name="point" type="SVGPoint"/>
        </method>
        <method name="getComputedTextLength" type="float"/>
        <method name="getEndPositionOfChar" type="SVGPoint">
          <param name="charnum" type="unsigned long"/>
        </method>
        <method name="getExtentOfChar" type="SVGRect">
          <param name="charnum" type="unsigned long"/>
        </method>
        <method name="getNumberOfChars" type="long"/>
        <method name="getRotationOfChar" type="float">
          <param name="charnum" type="unsigned long"/>
        </method>
        <method name="getStartPositionOfChar" type="SVGPoint">
          <param name="charnum" type="unsigned long"/>
        </method>
        <method name="getSubStringLength" type="float">
          <param name="charnum" type="unsigned long"/>
          <param name="nchars" type="unsigned long"/>
        </method>
        <method name="selectSubString" type="void">
          <param name="charnum" type="unsigned long"/>
          <param name="nchars" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="lengthAdjust" content-attribute="lengthAdjust" content-attribute-enum-values="spacing spacingAndGlyphs" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="textLength" content-attribute="textLength" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGTextElement" extends="SVGTextPositioningElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="clip-rule" value-syntax="enum"/>
        <parsedattribute enum-values="inherit initial" name="color" value-syntax="css_color"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial" name="display" value-syntax="enum"/>
        <parsedattribute enum-values="ltr rtl inherit" name="direction" value-syntax="enum"/>
        <parsedattribute enum-values="auto use-script no-change reset-size ideographic alphabetic hanging mathematical central middle text-after-edge text-before-edge inherit" name="dominant-baseline" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="fill" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="inherit" name="fill-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="fill-rule" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="caption icon menu message-box small-caption status-bar inherit" name="font" value-syntax="css_font"/>
        <parsedattribute enum-values="inherit" name="font-family" value-syntax="comma_separated_css_font_family_followed_by_generic_family"/>
        <parsedattribute enum-values="smaller larger xx-small x-small small medium large x-large xx-large inherit initial" name="font-size" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="none inherit" name="font-size-adjust" value-syntax="floating_point_number"/>
        <parsedattribute enum-values="normal wider narrower ultra-condensed extra-condensed condensed semi-condensed semi-expanded expanded extra-expanded ultra-expanded inherit" name="font-stretch" value-syntax="enum"/>
        <parsedattribute enum-values="normal italic oblique inherit initial" name="font-style" value-syntax="enum"/>
        <parsedattribute enum-values="normal small-caps inherit initial" name="font-variant" value-syntax="enum"/>
        <parsedattribute enum-values="normal bold bolder lighter 100 200 300 400 500 600 700 800 900 inherit initial" name="font-weight" value-syntax="enum"/>
        <parsedattribute enum-values="inherit" name="glyph-orientation-horizontal" value-syntax="css_angle"/>
        <parsedattribute enum-values="auto inherit" name="glyph-orientation-vertical" value-syntax="css_angle"/>
        <parsedattribute enum-values="auto inherit" name="kerning" value-syntax="css_length"/>
        <parsedattribute enum-values="normal inherit initial" name="letter-spacing" value-syntax="css_length"/>
        <parsedattribute enum-values="none inherit" name="mask" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="inherit initial" name="opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="auto none visiblePainted visibleFill visibleStroke visible painted fill stroke all inherit initial" name="pointer-events" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="stroke" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="none inherit" name="stroke-dasharray" value-syntax="comma_or_space_separated_css_percentage_or_length"/>
        <parsedattribute enum-values="inherit" name="stroke-dashoffset" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="butt round square inherit" name="stroke-linecap" value-syntax="enum"/>
        <parsedattribute enum-values="miter round bevel inherit" name="stroke-linejoin" value-syntax="enum"/>
        <parsedattribute enum-values="inherit" name="stroke-miterlimit" value-syntax="1_or_greater_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-width" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="start middle end inherit" name="text-anchor" value-syntax="enum"/>
        <parsedattribute enum-values="none underline overline line-through blink inherit" name="text-decoration" value-syntax="enum"/>
        <parsedattribute enum-values="normal embed bidi-override inherit" name="unicode-bidi" value-syntax="enum"/>
        <parsedattribute enum-values="visible hidden collapse inherit initial" name="visibility" value-syntax="enum"/>
        <parsedattribute enum-values="normal inherit initial" name="word-spacing" value-syntax="css_length"/>
        <parsedattribute enum-values="lr-tb tb-rl rl-tb bt-rl tb-lr bt-lr lr-bt rl-bt lr rl tb horizontal-tb vertical-lr vertical-rl inherit" name="writing-mode" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="text" namespace="SVG"/>
    </interface>
    <interface name="SVGTextPathElement" extends="SVGTextContentElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="auto baseline before-edge text-before-edge middle central after-edge text-after-edge ideographic alphabetic hanging mathematical inherit" name="alignment-baseline" value-syntax="enum"/>
        <parsedattribute enum-values="baseline sub super inherit" name="baseline-shift" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="inherit initial" name="color" value-syntax="css_color"/>
        <parsedattribute enum-values="inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial" name="display" value-syntax="enum"/>
        <parsedattribute enum-values="ltr rtl inherit" name="direction" value-syntax="enum"/>
        <parsedattribute enum-values="auto use-script no-change reset-size ideographic alphabetic hanging mathematical central middle text-after-edge text-before-edge inherit" name="dominant-baseline" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="fill" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="inherit" name="fill-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="fill-rule" value-syntax="enum"/>
        <parsedattribute enum-values="caption icon menu message-box small-caption status-bar inherit" name="font" value-syntax="css_font"/>
        <parsedattribute enum-values="inherit" name="font-family" value-syntax="comma_separated_css_font_family_followed_by_generic_family"/>
        <parsedattribute enum-values="smaller larger xx-small x-small small medium large x-large xx-large inherit initial" name="font-size" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="none inherit" name="font-size-adjust" value-syntax="floating_point_number"/>
        <parsedattribute enum-values="normal wider narrower ultra-condensed extra-condensed condensed semi-condensed semi-expanded expanded extra-expanded ultra-expanded inherit" name="font-stretch" value-syntax="enum"/>
        <parsedattribute enum-values="normal italic oblique inherit initial" name="font-style" value-syntax="enum"/>
        <parsedattribute enum-values="normal small-caps inherit initial" name="font-variant" value-syntax="enum"/>
        <parsedattribute enum-values="normal bold bolder lighter 100 200 300 400 500 600 700 800 900 inherit initial" name="font-weight" value-syntax="enum"/>
        <parsedattribute enum-values="inherit" name="glyph-orientation-horizontal" value-syntax="css_angle"/>
        <parsedattribute enum-values="auto inherit" name="glyph-orientation-vertical" value-syntax="css_angle"/>
        <parsedattribute enum-values="auto inherit" name="kerning" value-syntax="css_length"/>
        <parsedattribute enum-values="normal inherit initial" name="letter-spacing" value-syntax="css_length"/>
        <parsedattribute enum-values="none currentColor inherit" name="stroke" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="none inherit" name="stroke-dasharray" value-syntax="comma_or_space_separated_css_percentage_or_length"/>
        <parsedattribute enum-values="inherit" name="stroke-dashoffset" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="butt round square inherit" name="stroke-linecap" value-syntax="enum"/>
        <parsedattribute enum-values="miter round bevel inherit" name="stroke-linejoin" value-syntax="enum"/>
        <parsedattribute enum-values="inherit" name="stroke-miterlimit" value-syntax="1_or_greater_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-width" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="start middle end inherit" name="text-anchor" value-syntax="enum"/>
        <parsedattribute enum-values="none underline overline line-through blink inherit" name="text-decoration" value-syntax="enum"/>
        <parsedattribute enum-values="normal embed bidi-override inherit" name="unicode-bidi" value-syntax="enum"/>
        <parsedattribute enum-values="visible hidden collapse inherit initial" name="visibility" value-syntax="enum"/>
        <parsedattribute enum-values="normal inherit initial" name="word-spacing" value-syntax="css_length"/>
      </anonymous-content-attributes>
      <constants>
        <constant name="TEXTPATH_METHODTYPE_ALIGN" type="unsigned short" value="1"/>
        <constant name="TEXTPATH_METHODTYPE_STRETCH" type="unsigned short" value="2"/>
        <constant name="TEXTPATH_METHODTYPE_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="TEXTPATH_SPACINGTYPE_AUTO" type="unsigned short" value="1"/>
        <constant name="TEXTPATH_SPACINGTYPE_EXACT" type="unsigned short" value="2"/>
        <constant name="TEXTPATH_SPACINGTYPE_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <element name="textPath" namespace="SVG"/>
      <implements>SVGURIReference</implements>
      <properties>
        <property name="method" content-attribute="method" content-attribute-enum-values="align stretch" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="spacing" content-attribute="spacing" content-attribute-enum-values="auto exact" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="startOffset" content-attribute="startOffset" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGTextPositioningElement" extends="SVGTextContentElement">
      <properties>
        <property name="dx" content-attribute="dx" content-attribute-reflects="1" content-attribute-value-syntax="comma_or_space_separated_svg_number_with_optional_units" read-only="1" type="SVGAnimatedLengthList"/>
        <property name="dy" content-attribute="dy" content-attribute-reflects="1" content-attribute-value-syntax="comma_or_space_separated_svg_number_with_optional_units" read-only="1" type="SVGAnimatedLengthList"/>
        <property name="rotate" content-attribute="rotate" content-attribute-reflects="1" content-attribute-value-syntax="comma_or_space_separated_floating_point_numbers" read-only="1" type="SVGAnimatedNumberList"/>
        <property name="x" content-attribute="x" content-attribute-reflects="1" content-attribute-value-syntax="comma_or_space_separated_svg_number_with_optional_units" read-only="1" type="SVGAnimatedLengthList"/>
        <property name="y" content-attribute="y" content-attribute-reflects="1" content-attribute-value-syntax="comma_or_space_separated_svg_number_with_optional_units" read-only="1" type="SVGAnimatedLengthList"/>
      </properties>
    </interface>
    <interface name="SVGTitleElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="default preserve" name="xml:space" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="title" namespace="SVG"/>
    </interface>
    <interface name="SVGTransform" extends="Object">
      <constants>
        <constant name="SVG_TRANSFORM_MATRIX" type="unsigned short" value="1"/>
        <constant name="SVG_TRANSFORM_ROTATE" type="unsigned short" value="4"/>
        <constant name="SVG_TRANSFORM_SCALE" type="unsigned short" value="3"/>
        <constant name="SVG_TRANSFORM_SKEWX" type="unsigned short" value="5"/>
        <constant name="SVG_TRANSFORM_SKEWY" type="unsigned short" value="6"/>
        <constant name="SVG_TRANSFORM_TRANSLATE" type="unsigned short" value="2"/>
        <constant name="SVG_TRANSFORM_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <methods>
        <method name="setMatrix" type="void">
          <param name="matrix" type="SVGMatrix"/>
        </method>
        <method name="setRotate" type="void">
          <param name="angle" type="float"/>
          <param name="cx" type="float"/>
          <param name="cy" type="float"/>
        </method>
        <method name="setScale" type="void">
          <param name="sx" type="float"/>
          <param name="sy" type="float"/>
        </method>
        <method name="setSkewX" type="void">
          <param name="angle" type="float"/>
        </method>
        <method name="setSkewY" type="void">
          <param name="angle" type="float"/>
        </method>
        <method name="setTranslate" type="void">
          <param name="tx" type="float"/>
          <param name="ty" type="float"/>
        </method>
      </methods>
      <properties>
        <property name="angle" read-only="1" type="float"/>
        <property name="matrix" read-only="1" type="SVGMatrix"/>
        <property name="type" read-only="1" type="unsigned short"/>
      </properties>
    </interface>
    <interface name="SVGTransformList" extends="Object">
      <methods>
        <method name="appendItem" type="SVGTransform">
          <param name="newItem" type="SVGTransform"/>
        </method>
        <method name="clear" type="void"/>
        <method name="consolidate" type="SVGTransform"/>
        <method name="createSVGTransformFromMatrix" type="SVGTransform">
          <param name="matrix" type="SVGMatrix"/>
        </method>
        <method name="getItem" type="SVGTransform">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="initialize" type="SVGTransform">
          <param name="newItem" type="SVGTransform"/>
        </method>
        <method name="insertItemBefore" type="SVGTransform">
          <param name="newItem" type="SVGTransform"/>
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeItem" type="SVGTransform">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="replaceItem" type="SVGTransform">
          <param name="newItem" type="SVGTransform"/>
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="numberOfItems" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="SVGTSpanElement" extends="SVGTextPositioningElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="auto baseline before-edge text-before-edge middle central after-edge text-after-edge ideographic alphabetic hanging mathematical inherit" name="alignment-baseline" value-syntax="enum"/>
        <parsedattribute enum-values="baseline sub super inherit" name="baseline-shift" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="inherit initial" name="color" value-syntax="css_color"/>
        <parsedattribute enum-values="inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial" name="display" value-syntax="enum"/>
        <parsedattribute enum-values="ltr rtl inherit" name="direction" value-syntax="enum"/>
        <parsedattribute enum-values="auto use-script no-change reset-size ideographic alphabetic hanging mathematical central middle text-after-edge text-before-edge inherit" name="dominant-baseline" value-syntax="enum"/>
        <parsedattribute enum-values="none currentColor inherit" name="fill" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="inherit" name="fill-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="fill-rule" value-syntax="enum"/>
        <parsedattribute enum-values="caption icon menu message-box small-caption status-bar inherit" name="font" value-syntax="css_font"/>
        <parsedattribute enum-values="inherit" name="font-family" value-syntax="comma_separated_css_font_family_followed_by_generic_family"/>
        <parsedattribute enum-values="smaller larger xx-small x-small small medium large x-large xx-large inherit initial" name="font-size" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="none inherit" name="font-size-adjust" value-syntax="floating_point_number"/>
        <parsedattribute enum-values="normal wider narrower ultra-condensed extra-condensed condensed semi-condensed semi-expanded expanded extra-expanded ultra-expanded inherit" name="font-stretch" value-syntax="enum"/>
        <parsedattribute enum-values="normal italic oblique inherit initial" name="font-style" value-syntax="enum"/>
        <parsedattribute enum-values="normal small-caps inherit initial" name="font-variant" value-syntax="enum"/>
        <parsedattribute enum-values="normal bold bolder lighter 100 200 300 400 500 600 700 800 900 inherit initial" name="font-weight" value-syntax="enum"/>
        <parsedattribute enum-values="inherit" name="glyph-orientation-horizontal" value-syntax="css_angle"/>
        <parsedattribute enum-values="auto inherit" name="glyph-orientation-vertical" value-syntax="css_angle"/>
        <parsedattribute enum-values="auto inherit" name="kerning" value-syntax="css_length"/>
        <parsedattribute enum-values="normal inherit initial" name="letter-spacing" value-syntax="css_length"/>
        <parsedattribute enum-values="none currentColor inherit" name="stroke" value-syntax="svg_paint_or_css_color"/>
        <parsedattribute enum-values="none inherit" name="stroke-dasharray" value-syntax="comma_or_space_separated_css_percentage_or_length"/>
        <parsedattribute enum-values="inherit" name="stroke-dashoffset" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="butt round square inherit" name="stroke-linecap" value-syntax="enum"/>
        <parsedattribute enum-values="miter round bevel inherit" name="stroke-linejoin" value-syntax="enum"/>
        <parsedattribute enum-values="inherit" name="stroke-miterlimit" value-syntax="1_or_greater_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="inherit" name="stroke-width" value-syntax="css_percentage_or_length"/>
        <parsedattribute enum-values="start middle end inherit" name="text-anchor" value-syntax="enum"/>
        <parsedattribute enum-values="none underline overline line-through blink inherit" name="text-decoration" value-syntax="enum"/>
        <parsedattribute enum-values="normal embed bidi-override inherit" name="unicode-bidi" value-syntax="enum"/>
        <parsedattribute enum-values="visible hidden collapse inherit initial" name="visibility" value-syntax="enum"/>
        <parsedattribute enum-values="normal inherit initial" name="word-spacing" value-syntax="css_length"/>
      </anonymous-content-attributes>
      <element name="tspan" namespace="SVG"/>
    </interface>
    <interface name="SVGUnitTypes" extends="Object" static="1" no-interface-object="1">
      <constants>
        <constant name="SVG_UNIT_TYPE_OBJECTBOUNDINGBOX" type="unsigned short" value="2"/>
        <constant name="SVG_UNIT_TYPE_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_UNIT_TYPE_USERSPACEONUSE" type="unsigned short" value="1"/>
      </constants>
    </interface>
    <interface name="SVGUseElement" extends="SVGGraphicsElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="none inherit" name="clip-path" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="nonzero evenodd inherit" name="clip-rule" value-syntax="enum"/>
        <parsedattribute enum-values="auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit" name="cursor" value-syntax="comma_separated_css_url_with_optional_x_y_offset_followed_by_enum"/>
        <parsedattribute enum-values="inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial" name="display" value-syntax="enum"/>
        <parsedattribute enum-values="none inherit" name="filter" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="none inherit" name="mask" value-syntax="css_url_of_local_id_ref"/>
        <parsedattribute enum-values="inherit initial" name="opacity" value-syntax="0_to_1_floating_point_number"/>
        <parsedattribute enum-values="auto none visiblePainted visibleFill visibleStroke visible painted fill stroke all inherit initial" name="pointer-events" value-syntax="enum"/>
        <parsedattribute enum-values="visible hidden collapse inherit initial" name="visibility" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="use" namespace="SVG"/>
      <implements>SVGURIReference</implements>
      <properties>
        <property name="animatedInstanceRoot" read-only="1" type="SVGElementInstance"/>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="instanceRoot" read-only="1" type="SVGElementInstance"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" content-attribute="x" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" content-attribute="y" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGViewElement" extends="SVGElement">
      <anonymous-content-attributes>
        <parsedattribute enum-values="false true" name="externalResourcesRequired" value-syntax="enum"/>
      </anonymous-content-attributes>
      <element name="view" namespace="SVG"/>
      <implements>SVGZoomAndPan</implements>
      <implements>SVGFitToViewBox</implements>
      <properties>
        <property name="viewTarget" content-attribute="viewTarget" content-attribute-reflects="1" content-attribute-value-syntax="space_separated_urls" read-only="1" type="SVGStringList"/>
      </properties>
    </interface>
    <interface name="SVGZoomAndPan" extends="Object" static="1">
      <constants>
        <constant name="SVG_ZOOMANDPAN_DISABLE" type="unsigned short" value="1"/>
        <constant name="SVG_ZOOMANDPAN_MAGNIFY" type="unsigned short" value="2"/>
        <constant name="SVG_ZOOMANDPAN_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <properties>
        <property name="zoomAndPan" content-attribute="zoomAndPan" content-attribute-enum-values="disable magnify" content-attribute-reflects="1" content-attribute-value-syntax="enum" read-only="1" type="unsigned short"/>
      </properties>
    </interface>
    <interface name="SVGZoomEvent" extends="UIEvent">
      <properties>
        <property name="newScale" read-only="1" type="float"/>
        <property name="newTranslate" read-only="1" type="SVGPoint"/>
        <property name="previousScale" read-only="1" type="float"/>
        <property name="previousTranslate" read-only="1" type="SVGPoint"/>
        <property name="zoomRectScreen" read-only="1" type="SVGRect"/>
      </properties>
    </interface>
    <interface name="SyncManager" extends="Object">
      <methods>
        <method name="getTags" type="Promise&lt;sequence&lt;DOMString&gt;&gt;"/>
        <method name="register" type="Promise&lt;void&gt;">
          <param name="tag" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="Text" extends="CharacterData">
      <events>
        <event name="DOMNodeInserted" bubbles="1" dispatch="sync" type="MutationEvent"/>
        <event name="DOMNodeRemoved" bubbles="1" dispatch="sync" type="MutationEvent"/>
      </events>
      <methods>
        <method name="splitText" type="Text">
          <param name="offset" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="wholeText" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="TextEvent" extends="UIEvent">
      <constants>
        <constant name="DOM_INPUT_METHOD_DROP" type="unsigned long" value="0x03"/>
        <constant name="DOM_INPUT_METHOD_HANDWRITING" type="unsigned long" value="0x06"/>
        <constant name="DOM_INPUT_METHOD_IME" type="unsigned long" value="0x04"/>
        <constant name="DOM_INPUT_METHOD_KEYBOARD" type="unsigned long" value="0x01"/>
        <constant name="DOM_INPUT_METHOD_MULTIMODAL" type="unsigned long" value="0x08"/>
        <constant name="DOM_INPUT_METHOD_OPTION" type="unsigned long" value="0x05"/>
        <constant name="DOM_INPUT_METHOD_PASTE" type="unsigned long" value="0x02"/>
        <constant name="DOM_INPUT_METHOD_SCRIPT" type="unsigned long" value="0x09"/>
        <constant name="DOM_INPUT_METHOD_UNKNOWN" type="unsigned long" value="0x00"/>
        <constant name="DOM_INPUT_METHOD_VOICE" type="unsigned long" value="0x07"/>
      </constants>
      <methods>
        <method name="initTextEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="viewArg" type="Window"/>
          <param name="dataArg" type="DOMString"/>
          <param name="inputMethod" type="unsigned long"/>
          <param name="locale" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="data" read-only="1" type="DOMString"/>
        <property name="inputMethod" read-only="1" type="unsigned long"/>
        <property name="locale" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="TextMetrics" extends="Object">
      <properties>
        <property name="width" read-only="1" type="float"/>
      </properties>
    </interface>
    <interface name="TextTrack" extends="EventTarget">
      <constants>
        <constant name="DISABLED" type="unsigned short" value="0"/>
        <constant name="ERROR" type="unsigned short" value="3"/>
        <constant name="HIDDEN" type="unsigned short" value="1"/>
        <constant name="LOADED" type="unsigned short" value="2"/>
        <constant name="LOADING" type="unsigned short" value="1"/>
        <constant name="NONE" type="unsigned short" value="0"/>
        <constant name="SHOWING" type="unsigned short" value="2"/>
      </constants>
      <events>
        <event name="cuechange" dispatch="sync" skips-window="1" type="Event"/>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
        <event name="load" dispatch="sync" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="addCue" type="void">
          <param name="cue" type="TextTrackCue"/>
        </method>
        <method name="removeCue" type="void">
          <param name="cue" type="TextTrackCue"/>
        </method>
      </methods>
      <properties>
        <property name="activeCues" read-only="1" type="TextTrackCueList"/>
        <property name="cues" read-only="1" type="TextTrackCueList"/>
        <property name="inBandMetadataTrackDispatchType" read-only="1" type="DOMString"/>
        <property name="kind" read-only="1" type="DOMString"/>
        <property name="label" read-only="1" type="DOMString"/>
        <property name="language" read-only="1" type="DOMString"/>
        <property name="mode" type="(TextTrackMode or unsigned short)"/>
        <property name="oncuechange" event-handler="cuechange" type="EventHandler"/>
        <property name="onerror" event-handler="error" type="EventHandler"/>
        <property name="onload" event-handler="load" type="EventHandler"/>
        <property name="readyState" read-only="1" type="unsigned short"/>
      </properties>
    </interface>
    <interface name="TextTrackCue" extends="EventTarget">
      <constructor>
        <param name="startTime" type="double"/>
        <param name="endTime" type="double"/>
        <param name="text" type="DOMString"/>
      </constructor>
      <events>
        <event name="enter" dispatch="sync" skips-window="1" type="Event"/>
        <event name="exit" dispatch="sync" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="getCueAsHTML" type="DocumentFragment"/>
      </methods>
      <properties>
        <property name="endTime" type="double"/>
        <property name="id" type="DOMString"/>
        <property name="onenter" event-handler="enter" type="EventHandler"/>
        <property name="onexit" event-handler="exit" type="EventHandler"/>
        <property name="pauseOnExit" type="boolean"/>
        <property name="startTime" type="double"/>
        <property name="text" type="DOMString"/>
        <property name="track" read-only="1" type="TextTrack"/>
      </properties>
    </interface>
    <interface name="TextTrackCueList" extends="Object">
      <methods>
        <method name="getCueById" type="TextTrackCue">
          <param name="id" type="DOMString"/>
        </method>
        <method name="item" getter="1" type="TextTrackCue">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="TextTrackList" extends="EventTarget">
      <events>
        <event name="addtrack" dispatch="async" skips-window="1" type="TrackEvent"/>
        <event name="removetrack" dispatch="async" skips-window="1" type="TrackEvent"/>
      </events>
      <methods>
        <method name="item" getter="1" type="TextTrack">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="onaddtrack" event-handler="addtrack" nullable="1" type="EventHandler"/>
      </properties>
    </interface>
    <interface name="TimeRanges" extends="Object">
      <methods>
        <method name="end" type="double">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="start" type="double">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="Touch" extends="Object">
      <properties>
        <property name="clientX" read-only="1" type="long"/>
        <property name="clientY" read-only="1" type="long"/>
        <property name="identifier" read-only="1" type="long"/>
        <property name="pageX" read-only="1" type="long"/>
        <property name="pageY" read-only="1" type="long"/>
        <property name="screenX" read-only="1" type="long"/>
        <property name="screenY" read-only="1" type="long"/>
        <property name="target" read-only="1" type="EventTarget"/>
      </properties>
    </interface>
    <interface name="TouchEvent" extends="UIEvent">
      <properties>
        <property name="altKey" read-only="1" type="boolean"/>
        <property name="changedTouches" read-only="1" type="TouchList"/>
        <property name="charCode" read-only="1" type="short"/>
        <property name="ctrlKey" read-only="1" type="boolean"/>
        <property name="keyCode" read-only="1" type="short"/>
        <property name="metaKey" read-only="1" type="boolean"/>
        <property name="shiftKey" read-only="1" type="boolean"/>
        <property name="targetTouches" read-only="1" type="TouchList"/>
        <property name="touches" read-only="1" type="TouchList"/>
        <property name="which" read-only="1" type="unsigned short"/>
      </properties>
    </interface>
    <interface name="TouchList" extends="Object">
      <methods>
        <method name="item" getter="1" nullable="1" type="Touch">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="TrackEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="TrackEventInit"/>
      </constructor>
      <properties>
        <property name="track" nullable="1" read-only="1" type="(VideoTrack or AudioTrack or TextTrack)"/>
      </properties>
    </interface>
    <interface name="TransitionEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="TransitionEventInit"/>
      </constructor>
      <methods>
        <method name="initTransitionEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="propertyNameArg" type="DOMString"/>
          <param name="elapsedTimeArg" type="float"/>
        </method>
      </methods>
      <properties>
        <property name="elapsedTime" read-only="1" type="float"/>
        <property name="propertyName" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="TreeWalker" extends="Object">
      <methods>
        <method name="firstChild" type="Node"/>
        <method name="lastChild" type="Node"/>
        <method name="nextNode" type="Node"/>
        <method name="nextSibling" type="Node"/>
        <method name="parentNode" type="Node"/>
        <method name="previousNode" type="Node"/>
        <method name="previousSibling" type="Node"/>
      </methods>
      <properties>
        <property name="currentNode" type="Node"/>
        <property name="expandEntityReferences" read-only="1" type="boolean"/>
        <property name="filter" read-only="1" type="NodeFilter"/>
        <property name="root" read-only="1" type="Node"/>
        <property name="whatToShow" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="UIEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="UIEventInit"/>
      </constructor>
      <methods>
        <method name="initUIEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="viewArg" type="Window"/>
          <param name="detailArg" type="long"/>
        </method>
      </methods>
      <properties>
        <property name="detail" read-only="1" type="long"/>
        <property name="view" read-only="1" type="Window"/>
      </properties>
    </interface>
    <interface name="UnviewableContentIdentifiedEvent" extends="NavigationEventWithReferrer" tags="MSAppOnly">
      <properties>
        <property name="mediaType" read-only="1" tags="MSAppOnly" type="DOMString"/>
      </properties>
    </interface>
    <interface name="URL" extends="Object">
      <constructor>
        <param name="url" type="DOMString"/>
        <param name="base" optional="1" type="DOMString"/>
      </constructor>
      <methods>
        <method name="createObjectURL" static="1" type="DOMString">
          <param name="object" type="any"/>
          <param name="options" default="0" optional="1" type="ObjectURLOptions"/>
        </method>
        <method name="revokeObjectURL" static="1" type="void">
          <param name="url" type="DOMString"/>
        </method>
        <method name="toString" stringifier="1" type="DOMString"/>
      </methods>
      <properties>
        <property name="hash" type="DOMString"/>
        <property name="host" type="DOMString"/>
        <property name="hostname" type="DOMString"/>
        <property name="href" stringifier="1" type="DOMString"/>
        <property name="origin" read-only="1" type="DOMString"/>
        <property name="password" type="DOMString"/>
        <property name="pathname" type="DOMString"/>
        <property name="port" type="DOMString"/>
        <property name="protocol" type="DOMString"/>
        <property name="search" type="DOMString"/>
        <property name="username" type="DOMString"/>
      </properties>
    </interface>
    <interface name="ValidityState" extends="Object">
      <properties>
        <property name="badInput" read-only="1" type="boolean"/>
        <property name="customError" read-only="1" type="boolean"/>
        <property name="patternMismatch" read-only="1" type="boolean"/>
        <property name="rangeOverflow" read-only="1" type="boolean"/>
        <property name="rangeUnderflow" read-only="1" type="boolean"/>
        <property name="stepMismatch" read-only="1" type="boolean"/>
        <property name="tooLong" read-only="1" type="boolean"/>
        <property name="typeMismatch" read-only="1" type="boolean"/>
        <property name="valid" read-only="1" type="boolean"/>
        <property name="valueMissing" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="VideoPlaybackQuality" extends="Object">
      <properties>
        <property name="corruptedVideoFrames" read-only="1" type="unsigned long"/>
        <property name="creationTime" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="droppedVideoFrames" read-only="1" type="unsigned long"/>
        <property name="totalFrameDelay" read-only="1" type="double"/>
        <property name="totalVideoFrames" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="VideoTrack" extends="Object">
      <properties>
        <property name="id" read-only="1" type="DOMString"/>
        <property name="kind" type="DOMString"/>
        <property name="label" read-only="1" type="DOMString"/>
        <property name="language" type="DOMString"/>
        <property name="selected" type="boolean"/>
        <property name="sourceBuffer" read-only="1" type="SourceBuffer"/>
      </properties>
    </interface>
    <interface name="VideoTrackList" extends="EventTarget">
      <events>
        <event name="addtrack" dispatch="async" skips-window="1" type="TrackEvent"/>
        <event name="removetrack" dispatch="async" skips-window="1" type="TrackEvent"/>
        <event name="change" dispatch="async" skips-window="1" type="Event"/>
      </events>
      <methods>
        <method name="getTrackById" nullable="1" type="VideoTrack">
          <param name="id" type="DOMString"/>
        </method>
        <method name="item" getter="1" type="VideoTrack">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="onaddtrack" event-handler="addtrack" type="EventHandler"/>
        <property name="onchange" event-handler="change" type="EventHandler"/>
        <property name="onremovetrack" event-handler="removetrack" type="EventHandler"/>
        <property name="selectedIndex" read-only="1" type="long"/>
      </properties>
    </interface>
    <interface name="WaveShaperNode" extends="AudioNode">
      <properties>
        <property name="curve" nullable="1" type="Float32Array"/>
        <property name="oversample" type="OverSampleType"/>
      </properties>
    </interface>
    <interface name="WebAuthentication" extends="Object" secure-context="1">
      <methods>
        <method name="getAssertion" type="Promise&lt;WebAuthnAssertion&gt;">
          <param name="assertionChallenge" type="BufferSource"/>
          <param name="options" optional="1" type="AssertionOptions"/>
        </method>
        <method name="makeCredential" type="Promise&lt;ScopedCredentialInfo&gt;">
          <param name="accountInformation" type="Account"/>
          <param name="cryptoParameters" type="sequence&lt;ScopedCredentialParameters&gt;"/>
          <param name="attestationChallenge" type="BufferSource"/>
          <param name="options" optional="1" type="ScopedCredentialOptions"/>
        </method>
      </methods>
    </interface>
    <interface name="WebAuthnAssertion" extends="Object" secure-context="1">
      <properties>
        <property name="authenticatorData" read-only="1" type="ArrayBuffer"/>
        <property name="clientData" read-only="1" type="ArrayBuffer"/>
        <property name="credential" read-only="1" type="ScopedCredential"/>
        <property name="signature" read-only="1" type="ArrayBuffer"/>
      </properties>
    </interface>
    <interface name="WEBGL_compressed_texture_s3tc" extends="Object">
      <constants>
        <constant name="COMPRESSED_RGB_S3TC_DXT1_EXT" type="unsigned long" type-original="GLenum" value="0x83F0"/>
        <constant name="COMPRESSED_RGBA_S3TC_DXT1_EXT" type="unsigned long" type-original="GLenum" value="0x83F1"/>
        <constant name="COMPRESSED_RGBA_S3TC_DXT3_EXT" type="unsigned long" type-original="GLenum" value="0x83F2"/>
        <constant name="COMPRESSED_RGBA_S3TC_DXT5_EXT" type="unsigned long" type-original="GLenum" value="0x83F3"/>
      </constants>
    </interface>
    <interface name="WEBGL_debug_renderer_info" extends="Object">
      <constants>
        <constant name="UNMASKED_RENDERER_WEBGL" type="unsigned long" type-original="GLenum" value="0x9246"/>
        <constant name="UNMASKED_VENDOR_WEBGL" type="unsigned long" type-original="GLenum" value="0x9245"/>
      </constants>
    </interface>
    <interface name="WEBGL_depth_texture" extends="Object">
      <constants>
        <constant name="UNSIGNED_INT_24_8_WEBGL" type="unsigned long" type-original="GLenum" value="0x84FA"/>
      </constants>
    </interface>
    <interface name="WebGLActiveInfo" extends="Object">
      <properties>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="size" read-only="1" type="long" type-original="GLint"/>
        <property name="type" read-only="1" type="unsigned long" type-original="GLenum"/>
      </properties>
    </interface>
    <interface name="WebGLBuffer" extends="WebGLObject"/>
    <interface name="WebGLContextEvent" extends="Event">
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="WebGLContextEventInit"/>
      </constructor>
      <properties>
        <property name="statusMessage" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="WebGLFramebuffer" extends="WebGLObject"/>
    <interface name="WebGLObject" extends="Object"/>
    <interface name="WebGLProgram" extends="WebGLObject"/>
    <interface name="WebGLRenderbuffer" extends="WebGLObject"/>
    <interface name="WebGLRenderingContext" extends="Object">
      <constants>
        <constant name="ACTIVE_ATTRIBUTES" type="unsigned long" type-original="GLenum" value="0x8B89"/>
        <constant name="ACTIVE_TEXTURE" type="unsigned long" type-original="GLenum" value="0x84E0"/>
        <constant name="ACTIVE_UNIFORMS" type="unsigned long" type-original="GLenum" value="0x8B86"/>
        <constant name="ALIASED_LINE_WIDTH_RANGE" type="unsigned long" type-original="GLenum" value="0x846E"/>
        <constant name="ALIASED_POINT_SIZE_RANGE" type="unsigned long" type-original="GLenum" value="0x846D"/>
        <constant name="ALPHA" type="unsigned long" type-original="GLenum" value="0x1906"/>
        <constant name="ALPHA_BITS" type="unsigned long" type-original="GLenum" value="0x0D55"/>
        <constant name="ALWAYS" type="unsigned long" type-original="GLenum" value="0x0207"/>
        <constant name="ARRAY_BUFFER" type="unsigned long" type-original="GLenum" value="0x8892"/>
        <constant name="ARRAY_BUFFER_BINDING" type="unsigned long" type-original="GLenum" value="0x8894"/>
        <constant name="ATTACHED_SHADERS" type="unsigned long" type-original="GLenum" value="0x8B85"/>
        <constant name="BACK" type="unsigned long" type-original="GLenum" value="0x0405"/>
        <constant name="BLEND" type="unsigned long" type-original="GLenum" value="0x0BE2"/>
        <constant name="BLEND_COLOR" type="unsigned long" type-original="GLenum" value="0x8005"/>
        <constant name="BLEND_DST_ALPHA" type="unsigned long" type-original="GLenum" value="0x80CA"/>
        <constant name="BLEND_DST_RGB" type="unsigned long" type-original="GLenum" value="0x80C8"/>
        <constant name="BLEND_EQUATION" type="unsigned long" type-original="GLenum" value="0x8009"/>
        <constant name="BLEND_EQUATION_ALPHA" type="unsigned long" type-original="GLenum" value="0x883D"/>
        <constant name="BLEND_EQUATION_RGB" type="unsigned long" type-original="GLenum" value="0x8009"/>
        <constant name="BLEND_SRC_ALPHA" type="unsigned long" type-original="GLenum" value="0x80CB"/>
        <constant name="BLEND_SRC_RGB" type="unsigned long" type-original="GLenum" value="0x80C9"/>
        <constant name="BLUE_BITS" type="unsigned long" type-original="GLenum" value="0x0D54"/>
        <constant name="BOOL" type="unsigned long" type-original="GLenum" value="0x8B56"/>
        <constant name="BOOL_VEC2" type="unsigned long" type-original="GLenum" value="0x8B57"/>
        <constant name="BOOL_VEC3" type="unsigned long" type-original="GLenum" value="0x8B58"/>
        <constant name="BOOL_VEC4" type="unsigned long" type-original="GLenum" value="0x8B59"/>
        <constant name="BROWSER_DEFAULT_WEBGL" type="unsigned long" type-original="GLenum" value="0x9244"/>
        <constant name="BUFFER_SIZE" type="unsigned long" type-original="GLenum" value="0x8764"/>
        <constant name="BUFFER_USAGE" type="unsigned long" type-original="GLenum" value="0x8765"/>
        <constant name="BYTE" type="unsigned long" type-original="GLenum" value="0x1400"/>
        <constant name="CCW" type="unsigned long" type-original="GLenum" value="0x0901"/>
        <constant name="CLAMP_TO_EDGE" type="unsigned long" type-original="GLenum" value="0x812F"/>
        <constant name="COLOR_ATTACHMENT0" type="unsigned long" type-original="GLenum" value="0x8CE0"/>
        <constant name="COLOR_BUFFER_BIT" type="unsigned long" type-original="GLenum" value="0x00004000"/>
        <constant name="COLOR_CLEAR_VALUE" type="unsigned long" type-original="GLenum" value="0x0C22"/>
        <constant name="COLOR_WRITEMASK" type="unsigned long" type-original="GLenum" value="0x0C23"/>
        <constant name="COMPILE_STATUS" type="unsigned long" type-original="GLenum" value="0x8B81"/>
        <constant name="COMPRESSED_TEXTURE_FORMATS" type="unsigned long" type-original="GLenum" value="0x86A3"/>
        <constant name="CONSTANT_ALPHA" type="unsigned long" type-original="GLenum" value="0x8003"/>
        <constant name="CONSTANT_COLOR" type="unsigned long" type-original="GLenum" value="0x8001"/>
        <constant name="CONTEXT_LOST_WEBGL" type="unsigned long" type-original="GLenum" value="0x9242"/>
        <constant name="CULL_FACE" type="unsigned long" type-original="GLenum" value="0x0B44"/>
        <constant name="CULL_FACE_MODE" type="unsigned long" type-original="GLenum" value="0x0B45"/>
        <constant name="CURRENT_PROGRAM" type="unsigned long" type-original="GLenum" value="0x8B8D"/>
        <constant name="CURRENT_VERTEX_ATTRIB" type="unsigned long" type-original="GLenum" value="0x8626"/>
        <constant name="CW" type="unsigned long" type-original="GLenum" value="0x0900"/>
        <constant name="DECR" type="unsigned long" type-original="GLenum" value="0x1E03"/>
        <constant name="DECR_WRAP" type="unsigned long" type-original="GLenum" value="0x8508"/>
        <constant name="DELETE_STATUS" type="unsigned long" type-original="GLenum" value="0x8B80"/>
        <constant name="DEPTH_ATTACHMENT" type="unsigned long" type-original="GLenum" value="0x8D00"/>
        <constant name="DEPTH_BITS" type="unsigned long" type-original="GLenum" value="0x0D56"/>
        <constant name="DEPTH_BUFFER_BIT" type="unsigned long" type-original="GLenum" value="0x00000100"/>
        <constant name="DEPTH_CLEAR_VALUE" type="unsigned long" type-original="GLenum" value="0x0B73"/>
        <constant name="DEPTH_COMPONENT" type="unsigned long" type-original="GLenum" value="0x1902"/>
        <constant name="DEPTH_COMPONENT16" type="unsigned long" type-original="GLenum" value="0x81A5"/>
        <constant name="DEPTH_FUNC" type="unsigned long" type-original="GLenum" value="0x0B74"/>
        <constant name="DEPTH_RANGE" type="unsigned long" type-original="GLenum" value="0x0B70"/>
        <constant name="DEPTH_STENCIL" type="unsigned long" type-original="GLenum" value="0x84F9"/>
        <constant name="DEPTH_STENCIL_ATTACHMENT" type="unsigned long" type-original="GLenum" value="0x821A"/>
        <constant name="DEPTH_TEST" type="unsigned long" type-original="GLenum" value="0x0B71"/>
        <constant name="DEPTH_WRITEMASK" type="unsigned long" type-original="GLenum" value="0x0B72"/>
        <constant name="DITHER" type="unsigned long" type-original="GLenum" value="0x0BD0"/>
        <constant name="DONT_CARE" type="unsigned long" type-original="GLenum" value="0x1100"/>
        <constant name="DST_ALPHA" type="unsigned long" type-original="GLenum" value="0x0304"/>
        <constant name="DST_COLOR" type="unsigned long" type-original="GLenum" value="0x0306"/>
        <constant name="DYNAMIC_DRAW" type="unsigned long" type-original="GLenum" value="0x88E8"/>
        <constant name="ELEMENT_ARRAY_BUFFER" type="unsigned long" type-original="GLenum" value="0x8893"/>
        <constant name="ELEMENT_ARRAY_BUFFER_BINDING" type="unsigned long" type-original="GLenum" value="0x8895"/>
        <constant name="EQUAL" type="unsigned long" type-original="GLenum" value="0x0202"/>
        <constant name="FASTEST" type="unsigned long" type-original="GLenum" value="0x1101"/>
        <constant name="FLOAT" type="unsigned long" type-original="GLenum" value="0x1406"/>
        <constant name="FLOAT_MAT2" type="unsigned long" type-original="GLenum" value="0x8B5A"/>
        <constant name="FLOAT_MAT3" type="unsigned long" type-original="GLenum" value="0x8B5B"/>
        <constant name="FLOAT_MAT4" type="unsigned long" type-original="GLenum" value="0x8B5C"/>
        <constant name="FLOAT_VEC2" type="unsigned long" type-original="GLenum" value="0x8B50"/>
        <constant name="FLOAT_VEC3" type="unsigned long" type-original="GLenum" value="0x8B51"/>
        <constant name="FLOAT_VEC4" type="unsigned long" type-original="GLenum" value="0x8B52"/>
        <constant name="FRAGMENT_SHADER" type="unsigned long" type-original="GLenum" value="0x8B30"/>
        <constant name="FRAMEBUFFER" type="unsigned long" type-original="GLenum" value="0x8D40"/>
        <constant name="FRAMEBUFFER_ATTACHMENT_OBJECT_NAME" type="unsigned long" type-original="GLenum" value="0x8CD1"/>
        <constant name="FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE" type="unsigned long" type-original="GLenum" value="0x8CD0"/>
        <constant name="FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE" type="unsigned long" type-original="GLenum" value="0x8CD3"/>
        <constant name="FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL" type="unsigned long" type-original="GLenum" value="0x8CD2"/>
        <constant name="FRAMEBUFFER_BINDING" type="unsigned long" type-original="GLenum" value="0x8CA6"/>
        <constant name="FRAMEBUFFER_COMPLETE" type="unsigned long" type-original="GLenum" value="0x8CD5"/>
        <constant name="FRAMEBUFFER_INCOMPLETE_ATTACHMENT" type="unsigned long" type-original="GLenum" value="0x8CD6"/>
        <constant name="FRAMEBUFFER_INCOMPLETE_DIMENSIONS" type="unsigned long" type-original="GLenum" value="0x8CD9"/>
        <constant name="FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT" type="unsigned long" type-original="GLenum" value="0x8CD7"/>
        <constant name="FRAMEBUFFER_UNSUPPORTED" type="unsigned long" type-original="GLenum" value="0x8CDD"/>
        <constant name="FRONT" type="unsigned long" type-original="GLenum" value="0x0404"/>
        <constant name="FRONT_AND_BACK" type="unsigned long" type-original="GLenum" value="0x0408"/>
        <constant name="FRONT_FACE" type="unsigned long" type-original="GLenum" value="0x0B46"/>
        <constant name="FUNC_ADD" type="unsigned long" type-original="GLenum" value="0x8006"/>
        <constant name="FUNC_REVERSE_SUBTRACT" type="unsigned long" type-original="GLenum" value="0x800B"/>
        <constant name="FUNC_SUBTRACT" type="unsigned long" type-original="GLenum" value="0x800A"/>
        <constant name="GENERATE_MIPMAP_HINT" type="unsigned long" type-original="GLenum" value="0x8192"/>
        <constant name="GEQUAL" type="unsigned long" type-original="GLenum" value="0x0206"/>
        <constant name="GREATER" type="unsigned long" type-original="GLenum" value="0x0204"/>
        <constant name="GREEN_BITS" type="unsigned long" type-original="GLenum" value="0x0D53"/>
        <constant name="HIGH_FLOAT" type="unsigned long" type-original="GLenum" value="0x8DF2"/>
        <constant name="HIGH_INT" type="unsigned long" type-original="GLenum" value="0x8DF5"/>
        <constant name="IMPLEMENTATION_COLOR_READ_FORMAT" type="unsigned long" type-original="GLenum" value="0x8B9B"/>
        <constant name="IMPLEMENTATION_COLOR_READ_TYPE" type="unsigned long" type-original="GLenum" value="0x8B9A"/>
        <constant name="INCR" type="unsigned long" type-original="GLenum" value="0x1E02"/>
        <constant name="INCR_WRAP" type="unsigned long" type-original="GLenum" value="0x8507"/>
        <constant name="INT" type="unsigned long" type-original="GLenum" value="0x1404"/>
        <constant name="INT_VEC2" type="unsigned long" type-original="GLenum" value="0x8B53"/>
        <constant name="INT_VEC3" type="unsigned long" type-original="GLenum" value="0x8B54"/>
        <constant name="INT_VEC4" type="unsigned long" type-original="GLenum" value="0x8B55"/>
        <constant name="INVALID_ENUM" type="unsigned long" type-original="GLenum" value="0x0500"/>
        <constant name="INVALID_FRAMEBUFFER_OPERATION" type="unsigned long" type-original="GLenum" value="0x0506"/>
        <constant name="INVALID_OPERATION" type="unsigned long" type-original="GLenum" value="0x0502"/>
        <constant name="INVALID_VALUE" type="unsigned long" type-original="GLenum" value="0x0501"/>
        <constant name="INVERT" type="unsigned long" type-original="GLenum" value="0x150A"/>
        <constant name="KEEP" type="unsigned long" type-original="GLenum" value="0x1E00"/>
        <constant name="LEQUAL" type="unsigned long" type-original="GLenum" value="0x0203"/>
        <constant name="LESS" type="unsigned long" type-original="GLenum" value="0x0201"/>
        <constant name="LINE_LOOP" type="unsigned long" type-original="GLenum" value="0x0002"/>
        <constant name="LINE_STRIP" type="unsigned long" type-original="GLenum" value="0x0003"/>
        <constant name="LINE_WIDTH" type="unsigned long" type-original="GLenum" value="0x0B21"/>
        <constant name="LINEAR" type="unsigned long" type-original="GLenum" value="0x2601"/>
        <constant name="LINEAR_MIPMAP_LINEAR" type="unsigned long" type-original="GLenum" value="0x2703"/>
        <constant name="LINEAR_MIPMAP_NEAREST" type="unsigned long" type-original="GLenum" value="0x2701"/>
        <constant name="LINES" type="unsigned long" type-original="GLenum" value="0x0001"/>
        <constant name="LINK_STATUS" type="unsigned long" type-original="GLenum" value="0x8B82"/>
        <constant name="LOW_FLOAT" type="unsigned long" type-original="GLenum" value="0x8DF0"/>
        <constant name="LOW_INT" type="unsigned long" type-original="GLenum" value="0x8DF3"/>
        <constant name="LUMINANCE" type="unsigned long" type-original="GLenum" value="0x1909"/>
        <constant name="LUMINANCE_ALPHA" type="unsigned long" type-original="GLenum" value="0x190A"/>
        <constant name="MAX_COMBINED_TEXTURE_IMAGE_UNITS" type="unsigned long" type-original="GLenum" value="0x8B4D"/>
        <constant name="MAX_CUBE_MAP_TEXTURE_SIZE" type="unsigned long" type-original="GLenum" value="0x851C"/>
        <constant name="MAX_FRAGMENT_UNIFORM_VECTORS" type="unsigned long" type-original="GLenum" value="0x8DFD"/>
        <constant name="MAX_RENDERBUFFER_SIZE" type="unsigned long" type-original="GLenum" value="0x84E8"/>
        <constant name="MAX_TEXTURE_IMAGE_UNITS" type="unsigned long" type-original="GLenum" value="0x8872"/>
        <constant name="MAX_TEXTURE_SIZE" type="unsigned long" type-original="GLenum" value="0x0D33"/>
        <constant name="MAX_VARYING_VECTORS" type="unsigned long" type-original="GLenum" value="0x8DFC"/>
        <constant name="MAX_VERTEX_ATTRIBS" type="unsigned long" type-original="GLenum" value="0x8869"/>
        <constant name="MAX_VERTEX_TEXTURE_IMAGE_UNITS" type="unsigned long" type-original="GLenum" value="0x8B4C"/>
        <constant name="MAX_VERTEX_UNIFORM_VECTORS" type="unsigned long" type-original="GLenum" value="0x8DFB"/>
        <constant name="MAX_VIEWPORT_DIMS" type="unsigned long" type-original="GLenum" value="0x0D3A"/>
        <constant name="MEDIUM_FLOAT" type="unsigned long" type-original="GLenum" value="0x8DF1"/>
        <constant name="MEDIUM_INT" type="unsigned long" type-original="GLenum" value="0x8DF4"/>
        <constant name="MIRRORED_REPEAT" type="unsigned long" type-original="GLenum" value="0x8370"/>
        <constant name="NEAREST" type="unsigned long" type-original="GLenum" value="0x2600"/>
        <constant name="NEAREST_MIPMAP_LINEAR" type="unsigned long" type-original="GLenum" value="0x2702"/>
        <constant name="NEAREST_MIPMAP_NEAREST" type="unsigned long" type-original="GLenum" value="0x2700"/>
        <constant name="NEVER" type="unsigned long" type-original="GLenum" value="0x0200"/>
        <constant name="NICEST" type="unsigned long" type-original="GLenum" value="0x1102"/>
        <constant name="NO_ERROR" type="unsigned long" type-original="GLenum" value="0"/>
        <constant name="NONE" type="unsigned long" type-original="GLenum" value="0"/>
        <constant name="NOTEQUAL" type="unsigned long" type-original="GLenum" value="0x0205"/>
        <constant name="ONE" type="unsigned long" type-original="GLenum" value="1"/>
        <constant name="ONE_MINUS_CONSTANT_ALPHA" type="unsigned long" type-original="GLenum" value="0x8004"/>
        <constant name="ONE_MINUS_CONSTANT_COLOR" type="unsigned long" type-original="GLenum" value="0x8002"/>
        <constant name="ONE_MINUS_DST_ALPHA" type="unsigned long" type-original="GLenum" value="0x0305"/>
        <constant name="ONE_MINUS_DST_COLOR" type="unsigned long" type-original="GLenum" value="0x0307"/>
        <constant name="ONE_MINUS_SRC_ALPHA" type="unsigned long" type-original="GLenum" value="0x0303"/>
        <constant name="ONE_MINUS_SRC_COLOR" type="unsigned long" type-original="GLenum" value="0x0301"/>
        <constant name="OUT_OF_MEMORY" type="unsigned long" type-original="GLenum" value="0x0505"/>
        <constant name="PACK_ALIGNMENT" type="unsigned long" type-original="GLenum" value="0x0D05"/>
        <constant name="POINTS" type="unsigned long" type-original="GLenum" value="0x0000"/>
        <constant name="POLYGON_OFFSET_FACTOR" type="unsigned long" type-original="GLenum" value="0x8038"/>
        <constant name="POLYGON_OFFSET_FILL" type="unsigned long" type-original="GLenum" value="0x8037"/>
        <constant name="POLYGON_OFFSET_UNITS" type="unsigned long" type-original="GLenum" value="0x2A00"/>
        <constant name="RED_BITS" type="unsigned long" type-original="GLenum" value="0x0D52"/>
        <constant name="RENDERBUFFER" type="unsigned long" type-original="GLenum" value="0x8D41"/>
        <constant name="RENDERBUFFER_ALPHA_SIZE" type="unsigned long" type-original="GLenum" value="0x8D53"/>
        <constant name="RENDERBUFFER_BINDING" type="unsigned long" type-original="GLenum" value="0x8CA7"/>
        <constant name="RENDERBUFFER_BLUE_SIZE" type="unsigned long" type-original="GLenum" value="0x8D52"/>
        <constant name="RENDERBUFFER_DEPTH_SIZE" type="unsigned long" type-original="GLenum" value="0x8D54"/>
        <constant name="RENDERBUFFER_GREEN_SIZE" type="unsigned long" type-original="GLenum" value="0x8D51"/>
        <constant name="RENDERBUFFER_HEIGHT" type="unsigned long" type-original="GLenum" value="0x8D43"/>
        <constant name="RENDERBUFFER_INTERNAL_FORMAT" type="unsigned long" type-original="GLenum" value="0x8D44"/>
        <constant name="RENDERBUFFER_RED_SIZE" type="unsigned long" type-original="GLenum" value="0x8D50"/>
        <constant name="RENDERBUFFER_STENCIL_SIZE" type="unsigned long" type-original="GLenum" value="0x8D55"/>
        <constant name="RENDERBUFFER_WIDTH" type="unsigned long" type-original="GLenum" value="0x8D42"/>
        <constant name="RENDERER" type="unsigned long" type-original="GLenum" value="0x1F01"/>
        <constant name="REPEAT" type="unsigned long" type-original="GLenum" value="0x2901"/>
        <constant name="REPLACE" type="unsigned long" type-original="GLenum" value="0x1E01"/>
        <constant name="RGB" type="unsigned long" type-original="GLenum" value="0x1907"/>
        <constant name="RGB5_A1" type="unsigned long" type-original="GLenum" value="0x8057"/>
        <constant name="RGB565" type="unsigned long" type-original="GLenum" value="0x8D62"/>
        <constant name="RGBA" type="unsigned long" type-original="GLenum" value="0x1908"/>
        <constant name="RGBA4" type="unsigned long" type-original="GLenum" value="0x8056"/>
        <constant name="SAMPLE_ALPHA_TO_COVERAGE" type="unsigned long" type-original="GLenum" value="0x809E"/>
        <constant name="SAMPLE_BUFFERS" type="unsigned long" type-original="GLenum" value="0x80A8"/>
        <constant name="SAMPLE_COVERAGE" type="unsigned long" type-original="GLenum" value="0x80A0"/>
        <constant name="SAMPLE_COVERAGE_INVERT" type="unsigned long" type-original="GLenum" value="0x80AB"/>
        <constant name="SAMPLE_COVERAGE_VALUE" type="unsigned long" type-original="GLenum" value="0x80AA"/>
        <constant name="SAMPLER_2D" type="unsigned long" type-original="GLenum" value="0x8B5E"/>
        <constant name="SAMPLER_CUBE" type="unsigned long" type-original="GLenum" value="0x8B60"/>
        <constant name="SAMPLES" type="unsigned long" type-original="GLenum" value="0x80A9"/>
        <constant name="SCISSOR_BOX" type="unsigned long" type-original="GLenum" value="0x0C10"/>
        <constant name="SCISSOR_TEST" type="unsigned long" type-original="GLenum" value="0x0C11"/>
        <constant name="SHADER_TYPE" type="unsigned long" type-original="GLenum" value="0x8B4F"/>
        <constant name="SHADING_LANGUAGE_VERSION" type="unsigned long" type-original="GLenum" value="0x8B8C"/>
        <constant name="SHORT" type="unsigned long" type-original="GLenum" value="0x1402"/>
        <constant name="SRC_ALPHA" type="unsigned long" type-original="GLenum" value="0x0302"/>
        <constant name="SRC_ALPHA_SATURATE" type="unsigned long" type-original="GLenum" value="0x0308"/>
        <constant name="SRC_COLOR" type="unsigned long" type-original="GLenum" value="0x0300"/>
        <constant name="STATIC_DRAW" type="unsigned long" type-original="GLenum" value="0x88E4"/>
        <constant name="STENCIL_ATTACHMENT" type="unsigned long" type-original="GLenum" value="0x8D20"/>
        <constant name="STENCIL_BACK_FAIL" type="unsigned long" type-original="GLenum" value="0x8801"/>
        <constant name="STENCIL_BACK_FUNC" type="unsigned long" type-original="GLenum" value="0x8800"/>
        <constant name="STENCIL_BACK_PASS_DEPTH_FAIL" type="unsigned long" type-original="GLenum" value="0x8802"/>
        <constant name="STENCIL_BACK_PASS_DEPTH_PASS" type="unsigned long" type-original="GLenum" value="0x8803"/>
        <constant name="STENCIL_BACK_REF" type="unsigned long" type-original="GLenum" value="0x8CA3"/>
        <constant name="STENCIL_BACK_VALUE_MASK" type="unsigned long" type-original="GLenum" value="0x8CA4"/>
        <constant name="STENCIL_BACK_WRITEMASK" type="unsigned long" type-original="GLenum" value="0x8CA5"/>
        <constant name="STENCIL_BITS" type="unsigned long" type-original="GLenum" value="0x0D57"/>
        <constant name="STENCIL_BUFFER_BIT" type="unsigned long" type-original="GLenum" value="0x00000400"/>
        <constant name="STENCIL_CLEAR_VALUE" type="unsigned long" type-original="GLenum" value="0x0B91"/>
        <constant name="STENCIL_FAIL" type="unsigned long" type-original="GLenum" value="0x0B94"/>
        <constant name="STENCIL_FUNC" type="unsigned long" type-original="GLenum" value="0x0B92"/>
        <constant name="STENCIL_INDEX" type="unsigned long" type-original="GLenum" value="0x1901"/>
        <constant name="STENCIL_INDEX8" type="unsigned long" type-original="GLenum" value="0x8D48"/>
        <constant name="STENCIL_PASS_DEPTH_FAIL" type="unsigned long" type-original="GLenum" value="0x0B95"/>
        <constant name="STENCIL_PASS_DEPTH_PASS" type="unsigned long" type-original="GLenum" value="0x0B96"/>
        <constant name="STENCIL_REF" type="unsigned long" type-original="GLenum" value="0x0B97"/>
        <constant name="STENCIL_TEST" type="unsigned long" type-original="GLenum" value="0x0B90"/>
        <constant name="STENCIL_VALUE_MASK" type="unsigned long" type-original="GLenum" value="0x0B93"/>
        <constant name="STENCIL_WRITEMASK" type="unsigned long" type-original="GLenum" value="0x0B98"/>
        <constant name="STREAM_DRAW" type="unsigned long" type-original="GLenum" value="0x88E0"/>
        <constant name="SUBPIXEL_BITS" type="unsigned long" type-original="GLenum" value="0x0D50"/>
        <constant name="TEXTURE" type="unsigned long" type-original="GLenum" value="0x1702"/>
        <constant name="TEXTURE_2D" type="unsigned long" type-original="GLenum" value="0x0DE1"/>
        <constant name="TEXTURE_BINDING_2D" type="unsigned long" type-original="GLenum" value="0x8069"/>
        <constant name="TEXTURE_BINDING_CUBE_MAP" type="unsigned long" type-original="GLenum" value="0x8514"/>
        <constant name="TEXTURE_CUBE_MAP" type="unsigned long" type-original="GLenum" value="0x8513"/>
        <constant name="TEXTURE_CUBE_MAP_NEGATIVE_X" type="unsigned long" type-original="GLenum" value="0x8516"/>
        <constant name="TEXTURE_CUBE_MAP_NEGATIVE_Y" type="unsigned long" type-original="GLenum" value="0x8518"/>
        <constant name="TEXTURE_CUBE_MAP_NEGATIVE_Z" type="unsigned long" type-original="GLenum" value="0x851A"/>
        <constant name="TEXTURE_CUBE_MAP_POSITIVE_X" type="unsigned long" type-original="GLenum" value="0x8515"/>
        <constant name="TEXTURE_CUBE_MAP_POSITIVE_Y" type="unsigned long" type-original="GLenum" value="0x8517"/>
        <constant name="TEXTURE_CUBE_MAP_POSITIVE_Z" type="unsigned long" type-original="GLenum" value="0x8519"/>
        <constant name="TEXTURE_MAG_FILTER" type="unsigned long" type-original="GLenum" value="0x2800"/>
        <constant name="TEXTURE_MIN_FILTER" type="unsigned long" type-original="GLenum" value="0x2801"/>
        <constant name="TEXTURE_WRAP_S" type="unsigned long" type-original="GLenum" value="0x2802"/>
        <constant name="TEXTURE_WRAP_T" type="unsigned long" type-original="GLenum" value="0x2803"/>
        <constant name="TEXTURE0" type="unsigned long" type-original="GLenum" value="0x84C0"/>
        <constant name="TEXTURE1" type="unsigned long" type-original="GLenum" value="0x84C1"/>
        <constant name="TEXTURE10" type="unsigned long" type-original="GLenum" value="0x84CA"/>
        <constant name="TEXTURE11" type="unsigned long" type-original="GLenum" value="0x84CB"/>
        <constant name="TEXTURE12" type="unsigned long" type-original="GLenum" value="0x84CC"/>
        <constant name="TEXTURE13" type="unsigned long" type-original="GLenum" value="0x84CD"/>
        <constant name="TEXTURE14" type="unsigned long" type-original="GLenum" value="0x84CE"/>
        <constant name="TEXTURE15" type="unsigned long" type-original="GLenum" value="0x84CF"/>
        <constant name="TEXTURE16" type="unsigned long" type-original="GLenum" value="0x84D0"/>
        <constant name="TEXTURE17" type="unsigned long" type-original="GLenum" value="0x84D1"/>
        <constant name="TEXTURE18" type="unsigned long" type-original="GLenum" value="0x84D2"/>
        <constant name="TEXTURE19" type="unsigned long" type-original="GLenum" value="0x84D3"/>
        <constant name="TEXTURE2" type="unsigned long" type-original="GLenum" value="0x84C2"/>
        <constant name="TEXTURE20" type="unsigned long" type-original="GLenum" value="0x84D4"/>
        <constant name="TEXTURE21" type="unsigned long" type-original="GLenum" value="0x84D5"/>
        <constant name="TEXTURE22" type="unsigned long" type-original="GLenum" value="0x84D6"/>
        <constant name="TEXTURE23" type="unsigned long" type-original="GLenum" value="0x84D7"/>
        <constant name="TEXTURE24" type="unsigned long" type-original="GLenum" value="0x84D8"/>
        <constant name="TEXTURE25" type="unsigned long" type-original="GLenum" value="0x84D9"/>
        <constant name="TEXTURE26" type="unsigned long" type-original="GLenum" value="0x84DA"/>
        <constant name="TEXTURE27" type="unsigned long" type-original="GLenum" value="0x84DB"/>
        <constant name="TEXTURE28" type="unsigned long" type-original="GLenum" value="0x84DC"/>
        <constant name="TEXTURE29" type="unsigned long" type-original="GLenum" value="0x84DD"/>
        <constant name="TEXTURE3" type="unsigned long" type-original="GLenum" value="0x84C3"/>
        <constant name="TEXTURE30" type="unsigned long" type-original="GLenum" value="0x84DE"/>
        <constant name="TEXTURE31" type="unsigned long" type-original="GLenum" value="0x84DF"/>
        <constant name="TEXTURE4" type="unsigned long" type-original="GLenum" value="0x84C4"/>
        <constant name="TEXTURE5" type="unsigned long" type-original="GLenum" value="0x84C5"/>
        <constant name="TEXTURE6" type="unsigned long" type-original="GLenum" value="0x84C6"/>
        <constant name="TEXTURE7" type="unsigned long" type-original="GLenum" value="0x84C7"/>
        <constant name="TEXTURE8" type="unsigned long" type-original="GLenum" value="0x84C8"/>
        <constant name="TEXTURE9" type="unsigned long" type-original="GLenum" value="0x84C9"/>
        <constant name="TRIANGLE_FAN" type="unsigned long" type-original="GLenum" value="0x0006"/>
        <constant name="TRIANGLE_STRIP" type="unsigned long" type-original="GLenum" value="0x0005"/>
        <constant name="TRIANGLES" type="unsigned long" type-original="GLenum" value="0x0004"/>
        <constant name="UNPACK_ALIGNMENT" type="unsigned long" type-original="GLenum" value="0x0CF5"/>
        <constant name="UNPACK_COLORSPACE_CONVERSION_WEBGL" type="unsigned long" type-original="GLenum" value="0x9243"/>
        <constant name="UNPACK_FLIP_Y_WEBGL" type="unsigned long" type-original="GLenum" value="0x9240"/>
        <constant name="UNPACK_PREMULTIPLY_ALPHA_WEBGL" type="unsigned long" type-original="GLenum" value="0x9241"/>
        <constant name="UNSIGNED_BYTE" type="unsigned long" type-original="GLenum" value="0x1401"/>
        <constant name="UNSIGNED_INT" type="unsigned long" type-original="GLenum" value="0x1405"/>
        <constant name="UNSIGNED_SHORT" type="unsigned long" type-original="GLenum" value="0x1403"/>
        <constant name="UNSIGNED_SHORT_4_4_4_4" type="unsigned long" type-original="GLenum" value="0x8033"/>
        <constant name="UNSIGNED_SHORT_5_5_5_1" type="unsigned long" type-original="GLenum" value="0x8034"/>
        <constant name="UNSIGNED_SHORT_5_6_5" type="unsigned long" type-original="GLenum" value="0x8363"/>
        <constant name="VALIDATE_STATUS" type="unsigned long" type-original="GLenum" value="0x8B83"/>
        <constant name="VENDOR" type="unsigned long" type-original="GLenum" value="0x1F00"/>
        <constant name="VERSION" type="unsigned long" type-original="GLenum" value="0x1F02"/>
        <constant name="VERTEX_ATTRIB_ARRAY_BUFFER_BINDING" type="unsigned long" type-original="GLenum" value="0x889F"/>
        <constant name="VERTEX_ATTRIB_ARRAY_ENABLED" type="unsigned long" type-original="GLenum" value="0x8622"/>
        <constant name="VERTEX_ATTRIB_ARRAY_NORMALIZED" type="unsigned long" type-original="GLenum" value="0x886A"/>
        <constant name="VERTEX_ATTRIB_ARRAY_POINTER" type="unsigned long" type-original="GLenum" value="0x8645"/>
        <constant name="VERTEX_ATTRIB_ARRAY_SIZE" type="unsigned long" type-original="GLenum" value="0x8623"/>
        <constant name="VERTEX_ATTRIB_ARRAY_STRIDE" type="unsigned long" type-original="GLenum" value="0x8624"/>
        <constant name="VERTEX_ATTRIB_ARRAY_TYPE" type="unsigned long" type-original="GLenum" value="0x8625"/>
        <constant name="VERTEX_SHADER" type="unsigned long" type-original="GLenum" value="0x8B31"/>
        <constant name="VIEWPORT" type="unsigned long" type-original="GLenum" value="0x0BA2"/>
        <constant name="ZERO" type="unsigned long" type-original="GLenum" value="0"/>
      </constants>
      <methods>
        <method name="activeTexture" type="void">
          <param name="texture" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="attachShader" type="void">
          <param name="program" nullable="1" type="WebGLProgram"/>
          <param name="shader" nullable="1" type="WebGLShader"/>
        </method>
        <method name="bindAttribLocation" type="void">
          <param name="program" nullable="1" type="WebGLProgram"/>
          <param name="index" type="unsigned long" type-original="GLuint"/>
          <param name="name" type="DOMString"/>
        </method>
        <method name="bindBuffer" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="buffer" nullable="1" type="WebGLBuffer"/>
        </method>
        <method name="bindFramebuffer" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="framebuffer" nullable="1" type="WebGLFramebuffer"/>
        </method>
        <method name="bindRenderbuffer" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="renderbuffer" nullable="1" type="WebGLRenderbuffer"/>
        </method>
        <method name="bindTexture" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="texture" nullable="1" type="WebGLTexture"/>
        </method>
        <method name="blendColor" type="void">
          <param name="red" type="float" type-original="GLclampf"/>
          <param name="green" type="float" type-original="GLclampf"/>
          <param name="blue" type="float" type-original="GLclampf"/>
          <param name="alpha" type="float" type-original="GLclampf"/>
        </method>
        <method name="blendEquation" type="void">
          <param name="mode" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="blendEquationSeparate" type="void">
          <param name="modeRGB" type="unsigned long" type-original="GLenum"/>
          <param name="modeAlpha" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="blendFunc" type="void">
          <param name="sfactor" type="unsigned long" type-original="GLenum"/>
          <param name="dfactor" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="blendFuncSeparate" type="void">
          <param name="srcRGB" type="unsigned long" type-original="GLenum"/>
          <param name="dstRGB" type="unsigned long" type-original="GLenum"/>
          <param name="srcAlpha" type="unsigned long" type-original="GLenum"/>
          <param name="dstAlpha" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="bufferData" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="size" type="(long long or ArrayBufferView or ArrayBuffer?)"/>
          <param name="usage" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="bufferSubData" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="offset" type="long long" type-original="GLintptr"/>
          <param name="data" type="(ArrayBufferView or ArrayBuffer?)"/>
        </method>
        <method name="checkFramebufferStatus" type="unsigned long" type-original="GLenum">
          <param name="target" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="clear" type="void">
          <param name="mask" type="unsigned long" type-original="GLbitfield"/>
        </method>
        <method name="clearColor" type="void">
          <param name="red" type="float" type-original="GLclampf"/>
          <param name="green" type="float" type-original="GLclampf"/>
          <param name="blue" type="float" type-original="GLclampf"/>
          <param name="alpha" type="float" type-original="GLclampf"/>
        </method>
        <method name="clearDepth" type="void">
          <param name="depth" type="float" type-original="GLclampf"/>
        </method>
        <method name="clearStencil" type="void">
          <param name="s" type="long" type-original="GLint"/>
        </method>
        <method name="colorMask" type="void">
          <param name="red" type="boolean" type-original="GLboolean"/>
          <param name="green" type="boolean" type-original="GLboolean"/>
          <param name="blue" type="boolean" type-original="GLboolean"/>
          <param name="alpha" type="boolean" type-original="GLboolean"/>
        </method>
        <method name="compileShader" type="void">
          <param name="shader" nullable="1" type="WebGLShader"/>
        </method>
        <method name="compressedTexImage2D" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="level" type="long" type-original="GLint"/>
          <param name="internalformat" type="unsigned long" type-original="GLenum"/>
          <param name="width" type="long" type-original="GLsizei"/>
          <param name="height" type="long" type-original="GLsizei"/>
          <param name="border" type="long" type-original="GLint"/>
          <param name="data" type="ArrayBufferView"/>
        </method>
        <method name="compressedTexSubImage2D" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="level" type="long" type-original="GLint"/>
          <param name="xoffset" type="long" type-original="GLint"/>
          <param name="yoffset" type="long" type-original="GLint"/>
          <param name="width" type="long" type-original="GLsizei"/>
          <param name="height" type="long" type-original="GLsizei"/>
          <param name="format" type="unsigned long" type-original="GLenum"/>
          <param name="data" type="ArrayBufferView"/>
        </method>
        <method name="copyTexImage2D" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="level" type="long" type-original="GLint"/>
          <param name="internalformat" type="unsigned long" type-original="GLenum"/>
          <param name="x" type="long" type-original="GLint"/>
          <param name="y" type="long" type-original="GLint"/>
          <param name="width" type="long" type-original="GLsizei"/>
          <param name="height" type="long" type-original="GLsizei"/>
          <param name="border" type="long" type-original="GLint"/>
        </method>
        <method name="copyTexSubImage2D" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="level" type="long" type-original="GLint"/>
          <param name="xoffset" type="long" type-original="GLint"/>
          <param name="yoffset" type="long" type-original="GLint"/>
          <param name="x" type="long" type-original="GLint"/>
          <param name="y" type="long" type-original="GLint"/>
          <param name="width" type="long" type-original="GLsizei"/>
          <param name="height" type="long" type-original="GLsizei"/>
        </method>
        <method name="createBuffer" nullable="1" type="WebGLBuffer"/>
        <method name="createFramebuffer" nullable="1" type="WebGLFramebuffer"/>
        <method name="createProgram" nullable="1" type="WebGLProgram"/>
        <method name="createRenderbuffer" nullable="1" type="WebGLRenderbuffer"/>
        <method name="createShader" nullable="1" type="WebGLShader">
          <param name="type" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="createTexture" nullable="1" type="WebGLTexture"/>
        <method name="cullFace" type="void">
          <param name="mode" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="deleteBuffer" type="void">
          <param name="buffer" nullable="1" type="WebGLBuffer"/>
        </method>
        <method name="deleteFramebuffer" type="void">
          <param name="framebuffer" nullable="1" type="WebGLFramebuffer"/>
        </method>
        <method name="deleteProgram" type="void">
          <param name="program" nullable="1" type="WebGLProgram"/>
        </method>
        <method name="deleteRenderbuffer" type="void">
          <param name="renderbuffer" nullable="1" type="WebGLRenderbuffer"/>
        </method>
        <method name="deleteShader" type="void">
          <param name="shader" nullable="1" type="WebGLShader"/>
        </method>
        <method name="deleteTexture" type="void">
          <param name="texture" nullable="1" type="WebGLTexture"/>
        </method>
        <method name="depthFunc" type="void">
          <param name="func" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="depthMask" type="void">
          <param name="flag" type="boolean" type-original="GLboolean"/>
        </method>
        <method name="depthRange" type="void">
          <param name="zNear" type="float" type-original="GLclampf"/>
          <param name="zFar" type="float" type-original="GLclampf"/>
        </method>
        <method name="detachShader" type="void">
          <param name="program" nullable="1" type="WebGLProgram"/>
          <param name="shader" nullable="1" type="WebGLShader"/>
        </method>
        <method name="disable" type="void">
          <param name="cap" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="disableVertexAttribArray" type="void">
          <param name="index" type="unsigned long" type-original="GLuint"/>
        </method>
        <method name="drawArrays" type="void">
          <param name="mode" type="unsigned long" type-original="GLenum"/>
          <param name="first" type="long" type-original="GLint"/>
          <param name="count" type="long" type-original="GLsizei"/>
        </method>
        <method name="drawElements" type="void">
          <param name="mode" type="unsigned long" type-original="GLenum"/>
          <param name="count" type="long" type-original="GLsizei"/>
          <param name="type" type="unsigned long" type-original="GLenum"/>
          <param name="offset" type="long long" type-original="GLintptr"/>
        </method>
        <method name="enable" type="void">
          <param name="cap" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="enableVertexAttribArray" type="void">
          <param name="index" type="unsigned long" type-original="GLuint"/>
        </method>
        <method name="finish" type="void"/>
        <method name="flush" type="void"/>
        <method name="framebufferRenderbuffer" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="attachment" type="unsigned long" type-original="GLenum"/>
          <param name="renderbuffertarget" type="unsigned long" type-original="GLenum"/>
          <param name="renderbuffer" nullable="1" type="WebGLRenderbuffer"/>
        </method>
        <method name="framebufferTexture2D" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="attachment" type="unsigned long" type-original="GLenum"/>
          <param name="textarget" type="unsigned long" type-original="GLenum"/>
          <param name="texture" nullable="1" type="WebGLTexture"/>
          <param name="level" type="long" type-original="GLint"/>
        </method>
        <method name="frontFace" type="void">
          <param name="mode" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="generateMipmap" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="getActiveAttrib" nullable="1" type="WebGLActiveInfo">
          <param name="program" nullable="1" type="WebGLProgram"/>
          <param name="index" type="unsigned long" type-original="GLuint"/>
        </method>
        <method name="getActiveUniform" nullable="1" type="WebGLActiveInfo">
          <param name="program" nullable="1" type="WebGLProgram"/>
          <param name="index" type="unsigned long" type-original="GLuint"/>
        </method>
        <method name="getAttachedShaders" nullable="1" type="sequence&lt;WebGLShader&gt;">
          <param name="program" nullable="1" type="WebGLProgram"/>
        </method>
        <method name="getAttribLocation" type="long" type-original="GLint">
          <param name="program" nullable="1" type="WebGLProgram"/>
          <param name="name" type="DOMString"/>
        </method>
        <method name="getBufferParameter" type="any">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="pname" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="getContextAttributes" type="WebGLContextAttributes"/>
        <method name="getError" type="unsigned long" type-original="GLenum"/>
        <method name="getExtension" nullable="1" type="object">
          <param name="name" type="DOMString"/>
        </method>
        <method name="getFramebufferAttachmentParameter" type="any">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="attachment" type="unsigned long" type-original="GLenum"/>
          <param name="pname" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="getParameter" type="any">
          <param name="pname" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="getProgramInfoLog" nullable="1" type="DOMString">
          <param name="program" nullable="1" type="WebGLProgram"/>
        </method>
        <method name="getProgramParameter" type="any">
          <param name="program" nullable="1" type="WebGLProgram"/>
          <param name="pname" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="getRenderbufferParameter" type="any">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="pname" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="getShaderInfoLog" nullable="1" type="DOMString">
          <param name="shader" nullable="1" type="WebGLShader"/>
        </method>
        <method name="getShaderParameter" type="any">
          <param name="shader" nullable="1" type="WebGLShader"/>
          <param name="pname" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="getShaderPrecisionFormat" nullable="1" type="WebGLShaderPrecisionFormat">
          <param name="shadertype" type="unsigned long" type-original="GLenum"/>
          <param name="precisiontype" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="getShaderSource" nullable="1" type="DOMString">
          <param name="shader" nullable="1" type="WebGLShader"/>
        </method>
        <method name="getSupportedExtensions" nullable="1" type="sequence&lt;DOMString&gt;"/>
        <method name="getTexParameter" type="any">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="pname" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="getUniform" type="any">
          <param name="program" nullable="1" type="WebGLProgram"/>
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
        </method>
        <method name="getUniformLocation" nullable="1" type="WebGLUniformLocation">
          <param name="program" nullable="1" type="WebGLProgram"/>
          <param name="name" type="DOMString"/>
        </method>
        <method name="getVertexAttrib" type="any">
          <param name="index" type="unsigned long" type-original="GLuint"/>
          <param name="pname" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="getVertexAttribOffset" type="long long" type-original="GLsizeiptr">
          <param name="index" type="unsigned long" type-original="GLuint"/>
          <param name="pname" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="hint" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="mode" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="isBuffer" type="boolean" type-original="GLboolean">
          <param name="buffer" nullable="1" type="WebGLBuffer"/>
        </method>
        <method name="isContextLost" type="boolean"/>
        <method name="isEnabled" type="boolean" type-original="GLboolean">
          <param name="cap" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="isFramebuffer" type="boolean" type-original="GLboolean">
          <param name="framebuffer" nullable="1" type="WebGLFramebuffer"/>
        </method>
        <method name="isProgram" type="boolean" type-original="GLboolean">
          <param name="program" nullable="1" type="WebGLProgram"/>
        </method>
        <method name="isRenderbuffer" type="boolean" type-original="GLboolean">
          <param name="renderbuffer" nullable="1" type="WebGLRenderbuffer"/>
        </method>
        <method name="isShader" type="boolean" type-original="GLboolean">
          <param name="shader" nullable="1" type="WebGLShader"/>
        </method>
        <method name="isTexture" type="boolean" type-original="GLboolean">
          <param name="texture" nullable="1" type="WebGLTexture"/>
        </method>
        <method name="lineWidth" type="void">
          <param name="width" type="float" type-original="GLfloat"/>
        </method>
        <method name="linkProgram" type="void">
          <param name="program" nullable="1" type="WebGLProgram"/>
        </method>
        <method name="pixelStorei" type="void">
          <param name="pname" type="unsigned long" type-original="GLenum"/>
          <param name="param" type="long" type-original="GLint"/>
        </method>
        <method name="polygonOffset" type="void">
          <param name="factor" type="float" type-original="GLfloat"/>
          <param name="units" type="float" type-original="GLfloat"/>
        </method>
        <method name="readPixels" type="void">
          <param name="x" type="long" type-original="GLint"/>
          <param name="y" type="long" type-original="GLint"/>
          <param name="width" type="long" type-original="GLsizei"/>
          <param name="height" type="long" type-original="GLsizei"/>
          <param name="format" type="unsigned long" type-original="GLenum"/>
          <param name="type" type="unsigned long" type-original="GLenum"/>
          <param name="pixels" nullable="1" type="ArrayBufferView"/>
        </method>
        <method name="renderbufferStorage" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="internalformat" type="unsigned long" type-original="GLenum"/>
          <param name="width" type="long" type-original="GLsizei"/>
          <param name="height" type="long" type-original="GLsizei"/>
        </method>
        <method name="sampleCoverage" type="void">
          <param name="value" type="float" type-original="GLclampf"/>
          <param name="invert" type="boolean" type-original="GLboolean"/>
        </method>
        <method name="scissor" type="void">
          <param name="x" type="long" type-original="GLint"/>
          <param name="y" type="long" type-original="GLint"/>
          <param name="width" type="long" type-original="GLsizei"/>
          <param name="height" type="long" type-original="GLsizei"/>
        </method>
        <method name="shaderSource" type="void">
          <param name="shader" nullable="1" type="WebGLShader"/>
          <param name="source" type="DOMString"/>
        </method>
        <method name="stencilFunc" type="void">
          <param name="func" type="unsigned long" type-original="GLenum"/>
          <param name="ref" type="long" type-original="GLint"/>
          <param name="mask" type="unsigned long" type-original="GLuint"/>
        </method>
        <method name="stencilFuncSeparate" type="void">
          <param name="face" type="unsigned long" type-original="GLenum"/>
          <param name="func" type="unsigned long" type-original="GLenum"/>
          <param name="ref" type="long" type-original="GLint"/>
          <param name="mask" type="unsigned long" type-original="GLuint"/>
        </method>
        <method name="stencilMask" type="void">
          <param name="mask" type="unsigned long" type-original="GLuint"/>
        </method>
        <method name="stencilMaskSeparate" type="void">
          <param name="face" type="unsigned long" type-original="GLenum"/>
          <param name="mask" type="unsigned long" type-original="GLuint"/>
        </method>
        <method name="stencilOp" type="void">
          <param name="fail" type="unsigned long" type-original="GLenum"/>
          <param name="zfail" type="unsigned long" type-original="GLenum"/>
          <param name="zpass" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="stencilOpSeparate" type="void">
          <param name="face" type="unsigned long" type-original="GLenum"/>
          <param name="fail" type="unsigned long" type-original="GLenum"/>
          <param name="zfail" type="unsigned long" type-original="GLenum"/>
          <param name="zpass" type="unsigned long" type-original="GLenum"/>
        </method>
        <method name="texImage2D" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="level" type="long" type-original="GLint"/>
          <param name="internalformat" type="unsigned long" type-original="GLenum"/>
          <param name="format" type="unsigned long" type-original="GLenum"/>
          <param name="type" type="unsigned long" type-original="GLenum"/>
          <param name="pixels" nullable="1" type="ImageData"/>
        </method>
        <method name="texParameterf" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="pname" type="unsigned long" type-original="GLenum"/>
          <param name="param" type="float" type-original="GLfloat"/>
        </method>
        <method name="texParameteri" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="pname" type="unsigned long" type-original="GLenum"/>
          <param name="param" type="long" type-original="GLint"/>
        </method>
        <method name="texSubImage2D" type="void">
          <param name="target" type="unsigned long" type-original="GLenum"/>
          <param name="level" type="long" type-original="GLint"/>
          <param name="xoffset" type="long" type-original="GLint"/>
          <param name="yoffset" type="long" type-original="GLint"/>
          <param name="format" type="unsigned long" type-original="GLenum"/>
          <param name="type" type="unsigned long" type-original="GLenum"/>
          <param name="pixels" nullable="1" type="ImageData"/>
        </method>
        <method name="uniform1f" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="x" type="float" type-original="GLfloat"/>
        </method>
        <method name="uniform1fv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="v" type="Float32Array"/>
        </method>
        <method name="uniform1i" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="x" type="long" type-original="GLint"/>
        </method>
        <method name="uniform1iv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="v" type="Int32Array"/>
        </method>
        <method name="uniform2f" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="x" type="float" type-original="GLfloat"/>
          <param name="y" type="float" type-original="GLfloat"/>
        </method>
        <method name="uniform2fv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="v" type="Float32Array"/>
        </method>
        <method name="uniform2i" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="x" type="long" type-original="GLint"/>
          <param name="y" type="long" type-original="GLint"/>
        </method>
        <method name="uniform2iv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="v" type="Int32Array"/>
        </method>
        <method name="uniform3f" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="x" type="float" type-original="GLfloat"/>
          <param name="y" type="float" type-original="GLfloat"/>
          <param name="z" type="float" type-original="GLfloat"/>
        </method>
        <method name="uniform3fv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="v" type="Float32Array"/>
        </method>
        <method name="uniform3i" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="x" type="long" type-original="GLint"/>
          <param name="y" type="long" type-original="GLint"/>
          <param name="z" type="long" type-original="GLint"/>
        </method>
        <method name="uniform3iv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="v" type="Int32Array"/>
        </method>
        <method name="uniform4f" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="x" type="float" type-original="GLfloat"/>
          <param name="y" type="float" type-original="GLfloat"/>
          <param name="z" type="float" type-original="GLfloat"/>
          <param name="w" type="float" type-original="GLfloat"/>
        </method>
        <method name="uniform4fv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="v" type="Float32Array"/>
        </method>
        <method name="uniform4i" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="x" type="long" type-original="GLint"/>
          <param name="y" type="long" type-original="GLint"/>
          <param name="z" type="long" type-original="GLint"/>
          <param name="w" type="long" type-original="GLint"/>
        </method>
        <method name="uniform4iv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="v" type="Int32Array"/>
        </method>
        <method name="uniformMatrix2fv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="transpose" type="boolean" type-original="GLboolean"/>
          <param name="value" type="Float32Array"/>
        </method>
        <method name="uniformMatrix3fv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="transpose" type="boolean" type-original="GLboolean"/>
          <param name="value" type="Float32Array"/>
        </method>
        <method name="uniformMatrix4fv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="transpose" type="boolean" type-original="GLboolean"/>
          <param name="value" type="Float32Array"/>
        </method>
        <method name="useProgram" type="void">
          <param name="program" nullable="1" type="WebGLProgram"/>
        </method>
        <method name="validateProgram" type="void">
          <param name="program" nullable="1" type="WebGLProgram"/>
        </method>
        <method name="vertexAttrib1f" type="void">
          <param name="indx" type="unsigned long" type-original="GLuint"/>
          <param name="x" type="float" type-original="GLfloat"/>
        </method>
        <method name="vertexAttrib1fv" type="void">
          <param name="indx" type="unsigned long" type-original="GLuint"/>
          <param name="values" type="Float32Array"/>
        </method>
        <method name="vertexAttrib2f" type="void">
          <param name="indx" type="unsigned long" type-original="GLuint"/>
          <param name="x" type="float" type-original="GLfloat"/>
          <param name="y" type="float" type-original="GLfloat"/>
        </method>
        <method name="vertexAttrib2fv" type="void">
          <param name="indx" type="unsigned long" type-original="GLuint"/>
          <param name="values" type="Float32Array"/>
        </method>
        <method name="vertexAttrib3f" type="void">
          <param name="indx" type="unsigned long" type-original="GLuint"/>
          <param name="x" type="float" type-original="GLfloat"/>
          <param name="y" type="float" type-original="GLfloat"/>
          <param name="z" type="float" type-original="GLfloat"/>
        </method>
        <method name="vertexAttrib3fv" type="void">
          <param name="indx" type="unsigned long" type-original="GLuint"/>
          <param name="values" type="Float32Array"/>
        </method>
        <method name="vertexAttrib4f" type="void">
          <param name="indx" type="unsigned long" type-original="GLuint"/>
          <param name="x" type="float" type-original="GLfloat"/>
          <param name="y" type="float" type-original="GLfloat"/>
          <param name="z" type="float" type-original="GLfloat"/>
          <param name="w" type="float" type-original="GLfloat"/>
        </method>
        <method name="vertexAttrib4fv" type="void">
          <param name="indx" type="unsigned long" type-original="GLuint"/>
          <param name="values" type="Float32Array"/>
        </method>
        <method name="vertexAttribPointer" type="void">
          <param name="indx" type="unsigned long" type-original="GLuint"/>
          <param name="size" type="long" type-original="GLint"/>
          <param name="type" type="unsigned long" type-original="GLenum"/>
          <param name="normalized" type="boolean" type-original="GLboolean"/>
          <param name="stride" type="long" type-original="GLsizei"/>
          <param name="offset" type="long long" type-original="GLintptr"/>
        </method>
        <method name="viewport" type="void">
          <param name="x" type="long" type-original="GLint"/>
          <param name="y" type="long" type-original="GLint"/>
          <param name="width" type="long" type-original="GLsizei"/>
          <param name="height" type="long" type-original="GLsizei"/>
        </method>
      </methods>
      <properties>
        <property name="canvas" read-only="1" type="HTMLCanvasElement"/>
        <property name="drawingBufferHeight" read-only="1" type="long" type-original="GLsizei"/>
        <property name="drawingBufferWidth" read-only="1" type="long" type-original="GLsizei"/>
      </properties>
    </interface>
    <interface name="WebGLShader" extends="WebGLObject"/>
    <interface name="WebGLShaderPrecisionFormat" extends="Object">
      <properties>
        <property name="precision" read-only="1" type="long" type-original="GLint"/>
        <property name="rangeMax" read-only="1" type="long" type-original="GLint"/>
        <property name="rangeMin" read-only="1" type="long" type-original="GLint"/>
      </properties>
    </interface>
    <interface name="WebGLTexture" extends="WebGLObject"/>
    <interface name="WebGLUniformLocation" extends="Object"/>
    <interface name="WebKitCSSMatrix" extends="Object">
      <constructor>
        <param name="text" optional="1" type="DOMString"/>
      </constructor>
      <methods>
        <method name="inverse" type="WebKitCSSMatrix"/>
        <method name="multiply" type="WebKitCSSMatrix">
          <param name="secondMatrix" type="WebKitCSSMatrix"/>
        </method>
        <method name="rotate" type="WebKitCSSMatrix">
          <param name="angleX" type="float"/>
          <param name="angleY" default="0" optional="1" type="float"/>
          <param name="angleZ" default="0" optional="1" type="float"/>
        </method>
        <method name="rotateAxisAngle" type="WebKitCSSMatrix">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="z" type="float"/>
          <param name="angle" type="float"/>
        </method>
        <method name="scale" type="WebKitCSSMatrix">
          <param name="scaleX" type="float"/>
          <param name="scaleY" optional="1" type="float"/>
          <param name="scaleZ" default="1" optional="1" type="float"/>
        </method>
        <method name="setMatrixValue" type="void">
          <param name="value" type="DOMString"/>
        </method>
        <method name="skewX" type="WebKitCSSMatrix">
          <param name="angle" type="float"/>
        </method>
        <method name="skewY" type="WebKitCSSMatrix">
          <param name="angle" type="float"/>
        </method>
        <method name="toString" stringifier="1" type="DOMString"/>
        <method name="translate" type="WebKitCSSMatrix">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="z" default="0" optional="1" type="float"/>
        </method>
      </methods>
      <properties>
        <property name="a" type="float"/>
        <property name="b" type="float"/>
        <property name="c" type="float"/>
        <property name="d" type="float"/>
        <property name="e" type="float"/>
        <property name="f" type="float"/>
        <property name="m11" type="float"/>
        <property name="m12" type="float"/>
        <property name="m13" type="float"/>
        <property name="m14" type="float"/>
        <property name="m21" type="float"/>
        <property name="m22" type="float"/>
        <property name="m23" type="float"/>
        <property name="m24" type="float"/>
        <property name="m31" type="float"/>
        <property name="m32" type="float"/>
        <property name="m33" type="float"/>
        <property name="m34" type="float"/>
        <property name="m41" type="float"/>
        <property name="m42" type="float"/>
        <property name="m43" type="float"/>
        <property name="m44" type="float"/>
      </properties>
    </interface>
    <interface name="WebKitDirectoryEntry" extends="WebKitEntry">
      <methods>
        <method name="createReader" type="WebKitDirectoryReader"/>
      </methods>
    </interface>
    <interface name="WebKitDirectoryReader" extends="Object">
      <methods>
        <method name="readEntries" type="void">
          <param name="successCallback" type="WebKitEntriesCallback"/>
          <param name="errorCallback" optional="1" type="WebKitErrorCallback"/>
        </method>
      </methods>
    </interface>
    <interface name="WebKitEntry" extends="Object">
      <properties>
        <property name="filesystem" read-only="1" type="WebKitFileSystem"/>
        <property name="fullPath" read-only="1" type="DOMString"/>
        <property name="isDirectory" read-only="1" type="boolean"/>
        <property name="isFile" read-only="1" type="boolean"/>
        <property name="name" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="WebKitFileEntry" extends="WebKitEntry">
      <methods>
        <method name="file" type="void">
          <param name="successCallback" type="WebKitFileCallback"/>
          <param name="errorCallback" optional="1" type="WebKitErrorCallback"/>
        </method>
      </methods>
    </interface>
    <interface name="WebKitFileSystem" extends="Object">
      <properties>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="root" read-only="1" type="WebKitDirectoryEntry"/>
      </properties>
    </interface>
    <interface name="WebKitPoint" extends="Object">
      <constructor>
        <param name="x" default="0" optional="1" type="float"/>
        <param name="y" default="0" optional="1" type="float"/>
      </constructor>
      <properties>
        <property name="x" type="float"/>
        <property name="y" type="float"/>
      </properties>
    </interface>
    <interface name="webkitRTCPeerConnection" extends="RTCPeerConnection">
      <constructor>
        <param name="configuration" type="RTCConfiguration"/>
      </constructor>
    </interface>
    <interface name="WebSocket" extends="EventTarget">
      <constants>
        <constant name="CLOSED" type="unsigned short" value="3"/>
        <constant name="CLOSING" type="unsigned short" value="2"/>
        <constant name="CONNECTING" type="unsigned short" value="0"/>
        <constant name="OPEN" type="unsigned short" value="1"/>
      </constants>
      <constructor>
        <param name="url" type="DOMString"/>
        <param name="protocols" optional="1" type="(DOMString or DOMString[])"/>
      </constructor>
      <events>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
        <event name="message" dispatch="async" skips-window="1" type="MessageEvent"/>
        <event name="open" dispatch="sync" skips-window="1" type="Event"/>
        <event name="close" dispatch="sync" skips-window="1" type="CloseEvent"/>
      </events>
      <methods>
        <method name="close" type="void">
          <param name="code" optional="1" type="unsigned short"/>
          <param name="reason" optional="1" type="DOMString"/>
        </method>
        <method name="send" type="void">
          <param name="data" type="any"/>
        </method>
      </methods>
      <properties>
        <property name="binaryType" type="DOMString"/>
        <property name="bufferedAmount" read-only="1" type="unsigned long"/>
        <property name="extensions" read-only="1" type="DOMString"/>
        <property name="onclose" event-handler="close" type="EventHandler"/>
        <property name="onerror" event-handler="error" type="EventHandler"/>
        <property name="onmessage" event-handler="message" type="EventHandler"/>
        <property name="onopen" event-handler="open" type="EventHandler"/>
        <property name="protocol" read-only="1" type="DOMString"/>
        <property name="readyState" read-only="1" type="unsigned short"/>
        <property name="url" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="WheelEvent" extends="MouseEvent">
      <constants>
        <constant name="DOM_DELTA_LINE" type="unsigned long" value="0x01"/>
        <constant name="DOM_DELTA_PAGE" type="unsigned long" value="0x02"/>
        <constant name="DOM_DELTA_PIXEL" type="unsigned long" value="0x00"/>
      </constants>
      <constructor>
        <param name="typeArg" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="WheelEventInit"/>
      </constructor>
      <methods>
        <method name="getCurrentPoint" type="void">
          <param name="element" type="Element"/>
        </method>
        <method name="initWheelEvent" type="void">
          <param name="typeArg" type="DOMString"/>
          <param name="canBubbleArg" type="boolean"/>
          <param name="cancelableArg" type="boolean"/>
          <param name="viewArg" type="Window"/>
          <param name="detailArg" type="long"/>
          <param name="screenXArg" type="long"/>
          <param name="screenYArg" type="long"/>
          <param name="clientXArg" type="long"/>
          <param name="clientYArg" type="long"/>
          <param name="buttonArg" type="unsigned short"/>
          <param name="relatedTargetArg" type="EventTarget"/>
          <param name="modifiersListArg" type="DOMString"/>
          <param name="deltaXArg" type="long"/>
          <param name="deltaYArg" type="long"/>
          <param name="deltaZArg" type="long"/>
          <param name="deltaMode" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="deltaMode" read-only="1" type="unsigned long"/>
        <property name="deltaX" read-only="1" type="long"/>
        <property name="deltaY" read-only="1" type="long"/>
        <property name="deltaZ" read-only="1" type="long"/>
        <property name="wheelDelta" read-only="1" type="long"/>
        <property name="wheelDeltaX" read-only="1" type="long"/>
        <property name="wheelDeltaY" read-only="1" type="long"/>
      </properties>
    </interface>
    <interface name="Window" extends="EventTarget" implicit-this="1" primary-global="Window">
      <constructor />
      <anonymous-methods>
        <method getter="1" type="Window">
          <param name="index" type="unsigned long"/>
        </method>
        <method getter="1" type="(Window or Element or HTMLCollection)">
          <param name="name" type="DOMString"/>
        </method>
      </anonymous-methods>
      <events>
        <event name="load" alternate-target="Document" dispatch="sync" follows="DOMContentLoaded readystatechange" type="Event"/>
        <event name="SVGUnload" dispatch="sync" type="Event"/>
        <event name="unload" dispatch="sync" follows="beforeunload" type="Event"/>
        <event name="beforeunload" cancelable="1" dispatch="sync" precedes="unload" type="BeforeUnloadEvent"/>
        <event name="hashchange" dispatch="async" type="HashChangeEvent"/>
        <event name="popstate" dispatch="sync" type="PopStateEvent"/>
        <event name="SVGResize" dispatch="sync" type="Event"/>
        <event name="resize" dispatch="async" type="UIEvent"/>
        <event name="beforeprint" dispatch="sync" precedes="afterprint" type="Event"/>
        <event name="afterprint" dispatch="sync" follows="beforeprint" type="Event"/>
        <event name="focus" dispatch="sync" type="FocusEvent"/>
        <event name="blur" dispatch="sync" type="FocusEvent"/>
        <event name="storage" dispatch="sync" type="StorageEvent"/>
        <event name="error" dispatch="sync" type="ErrorEvent"/>
        <event name="message" dispatch="async" type="MessageEvent"/>
        <event name="orientationchange" dispatch="async" type="Event"/>
        <event name="deviceorientation" dispatch="sync" type="DeviceOrientationEvent"/>
        <event name="devicemotion" dispatch="sync" type="DeviceMotionEvent"/>
        <event name="devicelight" dispatch="sync" type="DeviceLightEvent"/>
        <event name="compassneedscalibration" dispatch="async" type="Event"/>
        <event name="pageshow" dispatch="sync" type="PageTransitionEvent"/>
        <event name="pagehide" dispatch="sync" type="PageTransitionEvent"/>
        <event name="gamepadconnected" dispatch="sync" type="GamepadEvent"/>
        <event name="gamepaddisconnected" dispatch="sync" type="GamepadEvent"/>
        <event name="navigatingfocus" dispatch="sync" type="FocusNavigationEvent"/>
      </events>
      <implements>WindowTimers</implements>
      <implements>WindowSessionStorage</implements>
      <implements>WindowLocalStorage</implements>
      <implements>WindowConsole</implements>
      <implements>GlobalEventHandlers</implements>
      <implements>IDBEnvironment</implements>
      <implements>WindowBase64</implements>
      <implements>GlobalFetch</implements>
      <methods>
        <method name="alert" type="void">
          <param name="message" default="&quot;&quot;" optional="1" type="DOMString"/>
        </method>
        <method name="blur" do-not-check-domain-security="1" type="void"/>
        <method name="cancelAnimationFrame" type="void">
          <param name="handle" type="long"/>
        </method>
        <method name="captureEvents" type="void"/>
        <method name="close" do-not-check-domain-security="1" type="void"/>
        <method name="confirm" type="boolean">
          <param name="message" default="&quot;&quot;" optional="1" type="DOMString"/>
        </method>
        <method name="departFocus" type="void">
          <param name="navigationReason" type="NavigationReason"/>
          <param name="origin" type="FocusNavigationOrigin"/>
        </method>
        <method name="focus" do-not-check-domain-security="1" type="void"/>
        <method name="getComputedStyle" type="CSSStyleDeclaration">
          <param name="elt" type="Element"/>
          <param name="pseudoElt" nullable="1" optional="1" type="DOMString"/>
        </method>
        <method name="getMatchedCSSRules" type="CSSRuleList">
          <param name="elt" type="Element"/>
          <param name="pseudoElt" nullable="1" optional="1" type="DOMString"/>
        </method>
        <method name="getSelection" type="Selection"/>
        <method name="matchMedia" type="MediaQueryList">
          <param name="mediaQuery" type="DOMString"/>
        </method>
        <method name="moveBy" type="void">
          <param name="x" default="0" optional="1" type="long"/>
          <param name="y" default="0" optional="1" type="long"/>
        </method>
        <method name="moveTo" type="void">
          <param name="x" default="0" optional="1" type="long"/>
          <param name="y" default="0" optional="1" type="long"/>
        </method>
        <method name="msWriteProfilerMark" type="void">
          <param name="profilerMarkName" type="DOMString"/>
        </method>
        <method name="open" type="Window">
          <param name="url" default="&quot;about:blank&quot;" optional="1" type="DOMString"/>
          <param name="target" default="&quot;_blank&quot;" optional="1" type="DOMString"/>
          <param name="features" default="&quot;&quot;" optional="1" type="DOMString"/>
          <param name="replace" default="false" optional="1" type="boolean"/>
        </method>
        <method name="postMessage" do-not-check-domain-security="1" type="void">
          <param name="message" type="any"/>
          <param name="targetOrigin" type="DOMString"/>
          <param name="transfer" optional="1" type="sequence&lt;Transferable&gt;"/>
        </method>
        <method name="print" type="void"/>
        <method name="prompt" nullable="1" type="DOMString">
          <param name="message" default="&quot;&quot;" optional="1" type="DOMString"/>
          <param name="default" default="&quot;&quot;" optional="1" type="DOMString"/>
        </method>
        <method name="releaseEvents" type="void"/>
        <method name="requestAnimationFrame" type="long">
          <param name="callback" type="FrameRequestCallback"/>
        </method>
        <method name="resizeBy" type="void">
          <param name="x" default="0" optional="1" type="long"/>
          <param name="y" default="0" optional="1" type="long"/>
        </method>
        <method name="resizeTo" type="void">
          <param name="x" default="0" optional="1" type="long"/>
          <param name="y" default="0" optional="1" type="long"/>
        </method>
        <method name="scroll" type="void">
          <param name="x" default="0" optional="1" type="long"/>
          <param name="y" default="0" optional="1" type="long"/>
        </method>
        <method name="scrollBy" type="void">
          <param name="x" default="0" optional="1" type="long"/>
          <param name="y" default="0" optional="1" type="long"/>
        </method>
        <method name="scrollTo" type="void">
          <param name="x" default="0" optional="1" type="long"/>
          <param name="y" default="0" optional="1" type="long"/>
        </method>
        <method name="stop" type="void"/>
        <method name="webkitCancelAnimationFrame" type="void">
          <param name="handle" type="long"/>
        </method>
        <method name="webkitConvertPointFromNodeToPage" type="WebKitPoint">
          <param name="node" type="Node"/>
          <param name="pt" type="WebKitPoint"/>
        </method>
        <method name="webkitConvertPointFromPageToNode" type="WebKitPoint">
          <param name="node" type="Node"/>
          <param name="pt" type="WebKitPoint"/>
        </method>
        <method name="webkitRequestAnimationFrame" type="long">
          <param name="callback" type="FrameRequestCallback"/>
        </method>
      </methods>
      <properties>
        <property name="applicationCache" read-only="1" type="ApplicationCache"/>
        <property name="caches" read-only="1" same-object="1" secure-context="1" type="CacheStorage"/>
        <property name="clientInformation" read-only="1" type="Navigator"/>
        <property name="closed" do-not-check-domain-security="1" read-only="1" type="boolean"/>
        <property name="crypto" read-only="1" type="Crypto"/>
        <property name="defaultStatus" type="DOMString"/>
        <property name="devicePixelRatio" read-only="1" replaceable="1" type="double"/>
        <property name="document" property-descriptor-not-configurable="1" read-only="1" type="Document" unforgeable="1"/>
        <property name="doNotTrack" read-only="1" type="DOMString"/>
        <property name="event" type="Event"/>
        <property name="external" read-only="1" replaceable="1" type="External"/>
        <property name="frameElement" read-only="1" type="Element"/>
        <property name="frames" do-not-check-domain-security="1" read-only="1" replaceable="1" type="Window"/>
        <property name="history" read-only="1" type="History"/>
        <property name="innerHeight" read-only="1" replaceable="1" type="long"/>
        <property name="innerWidth" read-only="1" replaceable="1" type="long"/>
        <property name="isSecureContext" read-only="1" type="boolean"/>
        <property name="length" do-not-check-domain-security="1" read-only="1" replaceable="1" type="unsigned long"/>
        <property name="location" do-not-check-domain-security="1" property-descriptor-not-configurable="1" put-forwards="href" read-only="1" type="Location" unforgeable="1"/>
        <property name="locationbar" read-only="1" replaceable="1" type="BarProp"/>
        <property name="menubar" read-only="1" replaceable="1" type="BarProp"/>
        <property name="msContentScript" read-only="1" type="ExtensionScriptApis"/>
        <property name="msCredentials" read-only="1" type="MSCredentials"/>
        <property name="name" type="DOMString"/>
        <property name="navigator" read-only="1" type="Navigator"/>
        <property name="offscreenBuffering" type="(DOMString or boolean)"/>
        <property name="onabort" event-handler="abort" type="EventHandler"/>
        <property name="onafterprint" event-handler="afterprint" type="EventHandler"/>
        <property name="onbeforeprint" event-handler="beforeprint" type="EventHandler"/>
        <property name="onbeforeunload" event-handler="beforeunload" type="EventHandler"/>
        <property name="onblur" event-handler="blur" type="EventHandler"/>
        <property name="oncanplay" event-handler="canplay" type="EventHandler"/>
        <property name="oncanplaythrough" event-handler="canplaythrough" type="EventHandler"/>
        <property name="onchange" event-handler="change" type="EventHandler"/>
        <property name="onclick" event-handler="click" type="EventHandler"/>
        <property name="oncompassneedscalibration" event-handler="compassneedscalibration" type="EventHandler"/>
        <property name="oncontextmenu" event-handler="contextmenu" type="EventHandler"/>
        <property name="ondblclick" event-handler="dblclick" type="EventHandler"/>
        <property name="ondevicelight" event-handler="devicelight" type="EventHandler"/>
        <property name="ondevicemotion" event-handler="devicemotion" type="EventHandler"/>
        <property name="ondeviceorientation" event-handler="deviceorientation" type="EventHandler"/>
        <property name="ondrag" event-handler="drag" type="EventHandler"/>
        <property name="ondragend" event-handler="dragend" type="EventHandler"/>
        <property name="ondragenter" event-handler="dragenter" type="EventHandler"/>
        <property name="ondragleave" event-handler="dragleave" type="EventHandler"/>
        <property name="ondragover" event-handler="dragover" type="EventHandler"/>
        <property name="ondragstart" event-handler="dragstart" type="EventHandler"/>
        <property name="ondrop" event-handler="drop" type="EventHandler"/>
        <property name="ondurationchange" event-handler="durationchange" type="EventHandler"/>
        <property name="onemptied" event-handler="emptied" type="EventHandler"/>
        <property name="onended" event-handler="ended" type="EventHandler"/>
        <property name="onerror" event-handler="error" type="ErrorEventHandler"/>
        <property name="onfocus" event-handler="focus" type="EventHandler"/>
        <property name="onhashchange" event-handler="hashchange" type="EventHandler"/>
        <property name="oninput" event-handler="input" type="EventHandler"/>
        <property name="oninvalid" event-handler="invalid" type="EventHandler"/>
        <property name="onkeydown" event-handler="keydown" type="EventHandler"/>
        <property name="onkeypress" event-handler="keypress" type="EventHandler"/>
        <property name="onkeyup" event-handler="keyup" type="EventHandler"/>
        <property name="onload" event-handler="load" type="EventHandler"/>
        <property name="onloadeddata" event-handler="loadeddata" type="EventHandler"/>
        <property name="onloadedmetadata" event-handler="loadedmetadata" type="EventHandler"/>
        <property name="onloadstart" event-handler="loadstart" type="EventHandler"/>
        <property name="onmessage" event-handler="message" type="EventHandler"/>
        <property name="onmousedown" event-handler="mousedown" type="EventHandler"/>
        <property name="onmouseenter" event-handler="mouseenter" type="EventHandler"/>
        <property name="onmouseleave" event-handler="mouseleave" type="EventHandler"/>
        <property name="onmousemove" event-handler="mousemove" type="EventHandler"/>
        <property name="onmouseout" event-handler="mouseout" type="EventHandler"/>
        <property name="onmouseover" event-handler="mouseover" type="EventHandler"/>
        <property name="onmouseup" event-handler="mouseup" type="EventHandler"/>
        <property name="onmousewheel" event-handler="mousewheel" type="EventHandler"/>
        <property name="onmsgesturechange" event-handler="MSGestureChange" type="EventHandler"/>
        <property name="onmsgesturedoubletap" event-handler="MSGestureDoubleTap" type="EventHandler"/>
        <property name="onmsgestureend" event-handler="MSGestureEnd" type="EventHandler"/>
        <property name="onmsgesturehold" event-handler="MSGestureHold" type="EventHandler"/>
        <property name="onmsgesturestart" event-handler="MSGestureStart" type="EventHandler"/>
        <property name="onmsgesturetap" event-handler="MSGestureTap" type="EventHandler"/>
        <property name="onmsinertiastart" event-handler="MSInertiaStart" type="EventHandler"/>
        <property name="onmspointercancel" event-handler="MSPointerCancel" type="EventHandler"/>
        <property name="onmspointerdown" event-handler="MSPointerDown" type="EventHandler"/>
        <property name="onmspointerenter" event-handler="MSPointerEnter" type="EventHandler"/>
        <property name="onmspointerleave" event-handler="MSPointerLeave" type="EventHandler"/>
        <property name="onmspointermove" event-handler="MSPointerMove" type="EventHandler"/>
        <property name="onmspointerout" event-handler="MSPointerOut" type="EventHandler"/>
        <property name="onmspointerover" event-handler="MSPointerOver" type="EventHandler"/>
        <property name="onmspointerup" event-handler="MSPointerUp" type="EventHandler"/>
        <property name="onoffline" event-handler="offline" type="EventHandler"/>
        <property name="ononline" event-handler="online" type="EventHandler"/>
        <property name="onorientationchange" event-handler="orientationchange" type="EventHandler"/>
        <property name="onpagehide" event-handler="pagehide" type="EventHandler"/>
        <property name="onpageshow" event-handler="pageshow" type="EventHandler"/>
        <property name="onpause" event-handler="pause" type="EventHandler"/>
        <property name="onplay" event-handler="play" type="EventHandler"/>
        <property name="onplaying" event-handler="playing" type="EventHandler"/>
        <property name="onpopstate" event-handler="popstate" type="EventHandler"/>
        <property name="onprogress" event-handler="progress" type="EventHandler"/>
        <property name="onratechange" event-handler="ratechange" type="EventHandler"/>
        <property name="onreadystatechange" event-handler="readystatechange" type="EventHandler"/>
        <property name="onreset" event-handler="reset" type="EventHandler"/>
        <property name="onresize" event-handler="resize" type="EventHandler"/>
        <property name="onscroll" event-handler="scroll" type="EventHandler"/>
        <property name="onseeked" event-handler="seeked" type="EventHandler"/>
        <property name="onseeking" event-handler="seeking" type="EventHandler"/>
        <property name="onselect" event-handler="select" type="EventHandler"/>
        <property name="onstalled" event-handler="stalled" type="EventHandler"/>
        <property name="onstorage" event-handler="storage" type="EventHandler"/>
        <property name="onsubmit" event-handler="submit" type="EventHandler"/>
        <property name="onsuspend" event-handler="suspend" type="EventHandler"/>
        <property name="ontimeupdate" event-handler="timeupdate" type="EventHandler"/>
        <property name="ontouchcancel" event-handler="touchcancel" type="any"/>
        <property name="ontouchend" event-handler="touchend" type="any"/>
        <property name="ontouchmove" event-handler="touchmove" type="any"/>
        <property name="ontouchstart" event-handler="touchstart" type="any"/>
        <property name="onunload" event-handler="unload" type="EventHandler"/>
        <property name="onvolumechange" event-handler="volumechange" type="EventHandler"/>
        <property name="onwaiting" event-handler="waiting" type="EventHandler"/>
        <property name="opener" do-not-check-domain-security="1" read-only="1" replaceable="1" type="Window"/>
        <property name="orientation" read-only="1" type="DOMString"/>
        <property name="outerHeight" read-only="1" replaceable="1" type="long"/>
        <property name="outerWidth" read-only="1" replaceable="1" type="long"/>
        <property name="pageXOffset" read-only="1" replaceable="1" type="long"/>
        <property name="pageYOffset" read-only="1" replaceable="1" type="long"/>
        <property name="parent" do-not-check-domain-security="1" read-only="1" replaceable="1" type="Window"/>
        <property name="performance" read-only="1" replaceable="1" type="Performance"/>
        <property name="personalbar" read-only="1" replaceable="1" type="BarProp"/>
        <property name="screen" read-only="1" type="Screen"/>
        <property name="screenLeft" read-only="1" type="long"/>
        <property name="screenTop" read-only="1" type="long"/>
        <property name="screenX" read-only="1" replaceable="1" type="long"/>
        <property name="screenY" read-only="1" replaceable="1" type="long"/>
        <property name="scrollbars" read-only="1" replaceable="1" type="BarProp"/>
        <property name="scrollX" read-only="1" replaceable="1" type="long"/>
        <property name="scrollY" read-only="1" replaceable="1" type="long"/>
        <property name="self" do-not-check-domain-security="1" read-only="1" replaceable="1" type="Window"/>
        <property name="speechSynthesis" read-only="1" type="SpeechSynthesis"/>
        <property name="status" type="DOMString"/>
        <property name="statusbar" read-only="1" replaceable="1" type="BarProp"/>
        <property name="styleMedia" read-only="1" type="StyleMedia"/>
        <property name="toolbar" read-only="1" replaceable="1" type="BarProp"/>
        <property name="top" do-not-check-domain-security="1" property-descriptor-not-configurable="1" read-only="1" type="Window"/>
        <property name="window" do-not-check-domain-security="1" property-descriptor-not-configurable="1" read-only="1" type="Window" unforgeable="1"/>
      </properties>
    </interface>
    <interface name="Worker" extends="EventTarget">
      <constructor>
        <param name="stringUrl" type="DOMString"/>
      </constructor>
      <events>
        <event name="error" dispatch="async" skips-window="1" type="ErrorEvent"/>
        <event name="message" dispatch="async" skips-window="1" type="MessageEvent"/>
      </events>
      <implements>AbstractWorker</implements>
      <methods>
        <method name="postMessage" type="void">
          <param name="message" type="any"/>
          <param name="transfer" optional="1" type="sequence&lt;Transferable&gt;"/>
        </method>
        <method name="terminate" type="void"/>
      </methods>
      <properties>
        <property name="onmessage" event-handler="message" type="EventHandler"/>
      </properties>
    </interface>
    <interface name="XMLDocument" extends="Document"/>
    <interface name="XMLHttpRequest" extends="EventTarget">
      <constants>
        <constant name="DONE" type="unsigned short" value="4"/>
        <constant name="HEADERS_RECEIVED" type="unsigned short" value="2"/>
        <constant name="LOADING" type="unsigned short" value="3"/>
        <constant name="OPENED" type="unsigned short" value="1"/>
        <constant name="UNSENT" type="unsigned short" value="0"/>
      </constants>
      <constructor/>
      <events>
        <event name="readystatechange" dispatch="sync-or-async" precedes="load" skips-window="1" type="Event"/>
        <event name="load" dispatch="sync-or-async" follows="progress readystatechange" precedes="loadend" skips-window="1" type="ProgressEvent"/>
        <event name="timeout" dispatch="sync-or-async" skips-window="1" type="Event"/>
        <event name="progress" dispatch="sync-or-async" follows="readystatechange" precedes="load" skips-window="1" type="ProgressEvent"/>
        <event name="abort" dispatch="sync-or-async" skips-window="1" type="Event"/>
        <event name="error" dispatch="sync-or-async" skips-window="1" type="Event"/>
        <event name="loadstart" dispatch="sync-or-async" precedes="readystatechange" skips-window="1" type="ProgressEvent"/>
        <event name="loadend" dispatch="sync-or-async" follows="load" skips-window="1" type="ProgressEvent"/>
      </events>
      <implements>XMLHttpRequestEventTarget</implements>
      <methods>
        <method name="abort" type="void"/>
        <method name="getAllResponseHeaders" type="DOMString"/>
        <method name="getResponseHeader" nullable="1" type="DOMString">
          <param name="header" type="DOMString"/>
        </method>
        <method name="msCachingEnabled" type="boolean"/>
        <method name="open" type="void">
          <param name="method" type="DOMString"/>
          <param name="url" type="DOMString"/>
          <param name="async" default="true" optional="1" type="boolean"/>
          <param name="user" default="null" nullable="1" optional="1" type="DOMString"/>
          <param name="password" default="null" nullable="1" optional="1" type="DOMString"/>
        </method>
        <method name="overrideMimeType" type="void">
          <param name="mime" type="DOMString"/>
        </method>
        <method name="send" type="void">
          <param name="data" optional="1" type="(Document or DOMString)"/>
        </method>
        <method name="setRequestHeader" type="void">
          <param name="header" type="DOMString"/>
          <param name="value" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="msCaching" type="DOMString"/>
        <property name="onreadystatechange" event-handler="readystatechange" type="EventHandler"/>
        <property name="readyState" read-only="1" type="unsigned short"/>
        <property name="response" read-only="1" type="any"/>
        <property name="responseText" read-only="1" type="DOMString"/>
        <property name="responseType" type="XMLHttpRequestResponseType"/>
        <property name="responseURL" read-only="1" type="DOMString"/>
        <property name="responseXML" nullable="1" read-only="1" type="Document"/>
        <property name="status" read-only="1" type="unsigned short"/>
        <property name="statusText" read-only="1" type="DOMString"/>
        <property name="timeout" type="unsigned long"/>
        <property name="upload" read-only="1" type="XMLHttpRequestUpload"/>
        <property name="withCredentials" type="boolean"/>
      </properties>
    </interface>
    <interface name="XMLHttpRequestUpload" extends="EventTarget">
      <events>
        <event name="readystatechange" dispatch="sync-or-async" follows="loadstart" precedes="progress" skips-window="1" type="ProgressEvent"/>
        <event name="progress" dispatch="sync-or-async" follows="readystatechange" precedes="load" skips-window="1" type="ProgressEvent"/>
        <event name="abort" dispatch="sync-or-async" skips-window="1" type="ProgressEvent"/>
        <event name="error" dispatch="sync-or-async" skips-window="1" type="ProgressEvent"/>
        <event name="load" dispatch="sync-or-async" follows="progress" precedes="loadend" skips-window="1" type="ProgressEvent"/>
        <event name="loadstart" dispatch="sync-or-async" precedes="readystatechange" skips-window="1" type="ProgressEvent"/>
        <event name="loadend" dispatch="sync-or-async" follows="load" skips-window="1" type="ProgressEvent"/>
        <event name="timeout" dispatch="sync-or-async" skips-window="1" type="ProgressEvent"/>
      </events>
      <implements>XMLHttpRequestEventTarget</implements>
    </interface>
    <interface name="XMLSerializer" extends="Object">
      <constructor/>
      <methods>
        <method name="serializeToString" type="DOMString">
          <param name="target" type="Node"/>
        </method>
      </methods>
    </interface>
    <interface name="XPathEvaluator" extends="Object">
      <constructor/>
      <methods>
        <method name="createExpression" type="XPathExpression">
          <param name="expression" type="DOMString"/>
          <param name="resolver" type="XPathNSResolver"/>
        </method>
        <method name="createNSResolver" type="XPathNSResolver">
          <param name="nodeResolver" optional="1" type="Node"/>
        </method>
        <method name="evaluate" type="XPathResult">
          <param name="expression" type="DOMString"/>
          <param name="contextNode" type="Node"/>
          <param name="resolver" type="XPathNSResolver"/>
          <param name="type" type="unsigned short"/>
          <param name="result" type="XPathResult"/>
        </method>
      </methods>
    </interface>
    <interface name="XPathExpression" extends="Object">
      <methods>
        <method name="evaluate" type="XPathExpression">
          <param name="contextNode" type="Node"/>
          <param name="type" type="unsigned short"/>
          <param name="result" type="XPathResult"/>
        </method>
      </methods>
    </interface>
    <interface name="XPathNSResolver" extends="Object">
      <methods>
        <method name="lookupNamespaceURI" type="DOMString">
          <param name="prefix" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="XPathResult" extends="Object">
      <constants>
        <constant name="ANY_TYPE" type="unsigned short" value="0"/>
        <constant name="ANY_UNORDERED_NODE_TYPE" type="unsigned short" value="8"/>
        <constant name="BOOLEAN_TYPE" type="unsigned short" value="3"/>
        <constant name="FIRST_ORDERED_NODE_TYPE" type="unsigned short" value="9"/>
        <constant name="NUMBER_TYPE" type="unsigned short" value="1"/>
        <constant name="ORDERED_NODE_ITERATOR_TYPE" type="unsigned short" value="5"/>
        <constant name="ORDERED_NODE_SNAPSHOT_TYPE" type="unsigned short" value="7"/>
        <constant name="STRING_TYPE" type="unsigned short" value="2"/>
        <constant name="UNORDERED_NODE_ITERATOR_TYPE" type="unsigned short" value="4"/>
        <constant name="UNORDERED_NODE_SNAPSHOT_TYPE" type="unsigned short" value="6"/>
      </constants>
      <methods>
        <method name="iterateNext" type="Node"/>
        <method name="snapshotItem" type="Node">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="booleanValue" read-only="1" type="boolean"/>
        <property name="invalidIteratorState" read-only="1" type="boolean"/>
        <property name="numberValue" read-only="1" type="double"/>
        <property name="resultType" read-only="1" type="unsigned short"/>
        <property name="singleNodeValue" read-only="1" type="Node"/>
        <property name="snapshotLength" read-only="1" type="unsigned long"/>
        <property name="stringValue" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="XSLTProcessor" extends="Object">
      <constructor/>
      <methods>
        <method name="clearParameters" type="void"/>
        <method name="getParameter" type="any">
          <param name="namespaceURI" treat-null-as="EmptyString" type="DOMString"/>
          <param name="localName" type="DOMString"/>
        </method>
        <method name="importStylesheet" type="void">
          <param name="style" type="Node"/>
        </method>
        <method name="removeParameter" type="void">
          <param name="namespaceURI" treat-null-as="EmptyString" type="DOMString"/>
          <param name="localName" type="DOMString"/>
        </method>
        <method name="reset" type="void"/>
        <method name="setParameter" type="void">
          <param name="namespaceURI" treat-null-as="EmptyString" type="DOMString"/>
          <param name="localName" type="DOMString"/>
          <param name="value" type="any"/>
        </method>
        <method name="transformToDocument" type="Document">
          <param name="source" type="Node"/>
        </method>
        <method name="transformToFragment" type="DocumentFragment">
          <param name="source" type="Node"/>
          <param name="document" type="Document"/>
        </method>
      </methods>
    </interface>
  </interfaces>
  <mixin-interfaces>
    <interface name="AbstractWorker" extends="Object" no-interface-object="1">
      <properties>
        <property name="onerror" event-handler="error" type="EventHandler"/>
      </properties>
    </interface>
    <interface name="Body" extends="Object" no-interface-object="1">
      <methods>
        <method name="arrayBuffer" type="Promise&lt;ArrayBuffer&gt;"/>
        <method name="blob" type="Promise&lt;Blob&gt;"/>
        <method name="json" type="Promise&lt;any&gt;"/>
        <method name="text" type="Promise&lt;DOMString&gt;"/>
      </methods>
      <properties>
        <property name="bodyUsed" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="CanvasPathMethods" extends="Object" no-interface-object="1">
      <methods>
        <method name="arc" type="void">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="radius" type="float"/>
          <param name="startAngle" type="float"/>
          <param name="endAngle" type="float"/>
          <param name="anticlockwise" default="false" optional="1" type="boolean"/>
        </method>
        <method name="arcTo" type="void">
          <param name="x1" type="float"/>
          <param name="y1" type="float"/>
          <param name="x2" type="float"/>
          <param name="y2" type="float"/>
          <param name="radius" type="float"/>
        </method>
        <method name="bezierCurveTo" type="void">
          <param name="cp1x" type="float"/>
          <param name="cp1y" type="float"/>
          <param name="cp2x" type="float"/>
          <param name="cp2y" type="float"/>
          <param name="x" type="float"/>
          <param name="y" type="float"/>
        </method>
        <method name="closePath" type="void"/>
        <method name="ellipse" type="void">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="radiusX" type="float"/>
          <param name="radiusY" type="float"/>
          <param name="rotation" type="float"/>
          <param name="startAngle" type="float"/>
          <param name="endAngle" type="float"/>
          <param name="anticlockwise" default="false" optional="1" type="boolean"/>
        </method>
        <method name="lineTo" type="void">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
        </method>
        <method name="moveTo" type="void">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
        </method>
        <method name="quadraticCurveTo" type="void">
          <param name="cpx" type="float"/>
          <param name="cpy" type="float"/>
          <param name="x" type="float"/>
          <param name="y" type="float"/>
        </method>
        <method name="rect" type="void">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="w" type="float"/>
          <param name="h" type="float"/>
        </method>
      </methods>
    </interface>
    <interface name="ChildNode" extends="Object" no-interface-object="1">
      <methods>
      </methods>
    </interface>
    <interface name="DocumentEvent" extends="Object" no-interface-object="1">
      <methods>
        <method name="createEvent" type="Event">
          <param name="eventInterface" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="DOML2DeprecatedColorProperty" extends="Object" no-interface-object="1">
      <properties>
        <property name="color" content-attribute="color" content-attribute-reflects="1" content-attribute-value-syntax="simple_color" type="DOMString"/>
      </properties>
    </interface>
    <interface name="DOML2DeprecatedSizeProperty" extends="Object" no-interface-object="1">
      <properties>
        <property name="size" content-attribute="size" content-attribute-reflects="1" content-attribute-value-syntax="1_or_greater_integer" type="long"/>
      </properties>
    </interface>
    <interface name="ElementTraversal" extends="Object" no-interface-object="1">
      <properties>
        <property name="childElementCount" read-only="1" type="unsigned long"/>
        <property name="firstElementChild" read-only="1" type="Element"/>
        <property name="lastElementChild" read-only="1" type="Element"/>
        <property name="nextElementSibling" read-only="1" type="Element"/>
        <property name="previousElementSibling" read-only="1" type="Element"/>
      </properties>
    </interface>
    <interface name="GetSVGDocument" extends="Object" no-interface-object="1">
      <methods>
        <method name="getSVGDocument" type="Document"/>
      </methods>
    </interface>
    <interface name="GlobalEventHandlers" extends="Object" no-interface-object="1">
      <properties>
        <property name="onpointercancel" content-attribute="onpointercancel" content-attribute-value-syntax="javascript" event-handler="pointercancel" type="EventHandler"/>
        <property name="onpointerdown" content-attribute="onpointerdown" content-attribute-value-syntax="javascript" event-handler="pointerdown" type="EventHandler"/>
        <property name="onpointerenter" content-attribute="onpointerenter" content-attribute-value-syntax="javascript" event-handler="pointerenter" type="EventHandler"/>
        <property name="onpointerleave" content-attribute="onpointerleave" content-attribute-value-syntax="javascript" event-handler="pointerleave" type="EventHandler"/>
        <property name="onpointermove" content-attribute="onpointermove" content-attribute-value-syntax="javascript" event-handler="pointermove" type="EventHandler"/>
        <property name="onpointerout" content-attribute="onpointerout" content-attribute-value-syntax="javascript" event-handler="pointerout" type="EventHandler"/>
        <property name="onpointerover" content-attribute="onpointerover" content-attribute-value-syntax="javascript" event-handler="pointerover" type="EventHandler"/>
        <property name="onpointerup" content-attribute="onpointerup" content-attribute-value-syntax="javascript" event-handler="pointerup" type="EventHandler"/>
        <property name="onwheel" content-attribute="onwheel" content-attribute-value-syntax="javascript" event-handler="wheel" type="EventHandler"/>
      </properties>
    </interface>
    <interface name="GlobalFetch" extends="Object" no-interface-object="1">
      <methods>
        <method name="fetch" type="Promise&lt;Response&gt;">
          <param name="input" type="RequestInfo"/>
          <param name="init" optional="1" type="RequestInit"/>
        </method>
      </methods>
    </interface>
    <interface name="HTMLTableAlignment" extends="Object" no-interface-object="1">
      <properties>
        <property name="ch" content-attribute="char" content-attribute-reflects="1" type="DOMString"/>
        <property name="chOff" content-attribute="charoff" content-attribute-reflects="1" type="DOMString"/>
        <property name="vAlign" content-attribute="valign" content-attribute-enum-values="middle baseline bottom top" content-attribute-reflects="1" content-attribute-value-syntax="enum" type="DOMString"/>
      </properties>
    </interface>
    <interface name="IDBEnvironment" extends="Object" no-interface-object="1">
      <properties>
        <property name="indexedDB" read-only="1" type="IDBFactory"/>
      </properties>
    </interface>
    <interface name="LinkStyle" extends="Object" no-interface-object="1">
      <properties>
        <property name="sheet" read-only="1" type="StyleSheet"/>
      </properties>
    </interface>
    <interface name="MSBaseReader" extends="Object" no-interface-object="1">
      <constants>
        <constant name="DONE" type="unsigned short" value="2"/>
        <constant name="EMPTY" type="unsigned short" value="0"/>
        <constant name="LOADING" type="unsigned short" value="1"/>
      </constants>
      <methods>
        <method name="abort" type="void"/>
      </methods>
      <properties>
        <property name="onabort" event-handler="abort" type="EventHandler"/>
        <property name="onerror" event-handler="error" type="EventHandler"/>
        <property name="onload" event-handler="load" type="EventHandler"/>
        <property name="onloadend" event-handler="loadend" type="EventHandler"/>
        <property name="onloadstart" event-handler="loadstart" type="EventHandler"/>
        <property name="onprogress" event-handler="progress" type="EventHandler"/>
        <property name="readyState" read-only="1" type="unsigned short"/>
        <property name="result" read-only="1" type="any"/>
      </properties>
    </interface>
    <interface name="MSFileSaver" extends="Object" no-interface-object="1">
      <methods>
        <method name="msSaveBlob" type="boolean">
          <param name="blob" type="any"/>
          <param name="defaultName" optional="1" type="DOMString"/>
        </method>
        <method name="msSaveOrOpenBlob" type="boolean">
          <param name="blob" type="any"/>
          <param name="defaultName" optional="1" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="MSNavigatorDoNotTrack" extends="Object" no-interface-object="1">
      <methods>
        <method name="confirmSiteSpecificTrackingException" type="boolean">
          <param name="args" type="ConfirmSiteSpecificExceptionsInformation"/>
        </method>
        <method name="confirmWebWideTrackingException" type="boolean">
          <param name="args" type="ExceptionInformation"/>
        </method>
        <method name="removeSiteSpecificTrackingException" type="void">
          <param name="args" type="ExceptionInformation"/>
        </method>
        <method name="removeWebWideTrackingException" type="void">
          <param name="args" type="ExceptionInformation"/>
        </method>
        <method name="storeSiteSpecificTrackingException" type="void">
          <param name="args" type="StoreSiteSpecificExceptionsInformation"/>
        </method>
        <method name="storeWebWideTrackingException" type="void">
          <param name="args" type="StoreExceptionsInformation"/>
        </method>
      </methods>
    </interface>
    <interface name="NavigatorBeacon" extends="Object" no-interface-object="1">
      <methods>
        <method name="sendBeacon" type="boolean">
          <param name="url" type="USVString"/>
          <param name="data" default="null" nullable="1" optional="1" type="BodyInit"/>
        </method>
      </methods>
    </interface>
    <interface name="NavigatorConcurrentHardware" exposed="Window Worker" extends="Object" no-interface-object="1">
      <properties>
        <property name="hardwareConcurrency" read-only="1" type="unsigned long long"/>
      </properties>
    </interface>
    <interface name="NavigatorContentUtils" extends="Object" no-interface-object="1"/>
    <interface name="NavigatorGeolocation" extends="Object" no-interface-object="1">
      <properties>
        <property name="geolocation" read-only="1" type="Geolocation"/>
      </properties>
    </interface>
    <interface name="NavigatorID" extends="Object" no-interface-object="1">
      <properties>
        <property name="appCodeName" read-only="1" type="DOMString"/>
        <property name="appName" read-only="1" type="DOMString"/>
        <property name="appVersion" read-only="1" type="DOMString"/>
        <property name="platform" read-only="1" type="DOMString"/>
        <property name="product" read-only="1" type="DOMString"/>
        <property name="productSub" read-only="1" type="DOMString"/>
        <property name="userAgent" property-descriptor-not-configurable="1" read-only="1" type="DOMString"/>
        <property name="vendor" read-only="1" type="DOMString"/>
        <property name="vendorSub" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="NavigatorOnLine" extends="Object" no-interface-object="1">
      <properties>
        <property name="onLine" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="NavigatorStorageUtils" extends="Object" no-interface-object="1"/>
    <interface name="NavigatorUserMedia" extends="Object" no-interface-object="1">
      <methods>
        <method name="getUserMedia" type="void">
          <param name="constraints" type="MediaStreamConstraints"/>
          <param name="successCallback" type="NavigatorUserMediaSuccessCallback"/>
          <param name="errorCallback" type="NavigatorUserMediaErrorCallback"/>
        </method>
      </methods>
      <properties>
        <property name="mediaDevices" read-only="1" type="MediaDevices"/>
      </properties>
    </interface>
    <interface name="NodeSelector" extends="Object" no-interface-object="1">
      <methods>
        <method name="querySelector" type="Element">
          <param name="selectors" type="DOMString"/>
        </method>
        <method name="querySelectorAll" type="NodeList">
          <param name="selectors" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="RandomSource" extends="Object" no-interface-object="1">
      <methods>
        <method name="getRandomValues" type="ArrayBufferView">
          <param name="array" type="ArrayBufferView"/>
        </method>
      </methods>
    </interface>
    <interface name="SVGAnimatedPoints" extends="Object" no-interface-object="1">
      <properties>
        <property name="animatedPoints" read-only="1" type="SVGPointList"/>
        <property name="points" content-attribute="points" content-attribute-reflects="1" content-attribute-value-syntax="svg_coordinate_pair_list" read-only="1" type="SVGPointList"/>
      </properties>
    </interface>
    <interface name="SVGFilterPrimitiveStandardAttributes" extends="Object" no-interface-object="1">
      <properties>
        <property name="height" content-attribute="height" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="result" content-attribute="result" content-attribute-reflects="1" read-only="1" type="SVGAnimatedString"/>
        <property name="width" content-attribute="width" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" content-attribute="x" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" content-attribute="y" content-attribute-reflects="1" content-attribute-value-syntax="svg_number_with_optional_unit" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGFitToViewBox" extends="Object" no-interface-object="1">
      <properties>
        <property name="preserveAspectRatio" content-attribute="preserveAspectRatio" content-attribute-reflects="1" content-attribute-value-syntax="svg_aspect_ratio" read-only="1" type="SVGAnimatedPreserveAspectRatio"/>
        <property name="viewBox" content-attribute="viewBox" content-attribute-reflects="1" content-attribute-value-syntax="svg_viewbox" read-only="1" type="SVGAnimatedRect"/>
      </properties>
    </interface>
    <interface name="SVGTests" extends="Object" no-interface-object="1">
      <methods>
        <method name="hasExtension" type="boolean">
          <param name="extension" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="requiredExtensions" content-attribute="requiredExtensions" content-attribute-reflects="1" content-attribute-value-syntax="space_separated_urls" read-only="1" type="SVGStringList"/>
        <property name="requiredFeatures" content-attribute="requiredFeatures" content-attribute-reflects="1" content-attribute-value-syntax="space_separated_tokens" read-only="1" type="SVGStringList"/>
        <property name="systemLanguage" content-attribute="systemLanguage" content-attribute-reflects="1" content-attribute-value-syntax="comma_separated_bcp47_langs" read-only="1" type="SVGStringList"/>
      </properties>
    </interface>
    <interface name="SVGURIReference" extends="Object" no-interface-object="1">
      <properties>
        <property name="href" content-attribute="href" content-attribute-aliases="xlink:href" content-attribute-reflects="1" content-attribute-value-syntax="url" read-only="1" type="SVGAnimatedString"/>
      </properties>
    </interface>
    <interface name="WindowBase64" extends="Object" no-interface-object="1">
      <methods>
        <method name="atob" type="DOMString">
          <param name="encodedString" type="DOMString"/>
        </method>
        <method name="btoa" type="DOMString">
          <param name="rawString" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="WindowConsole" extends="Object" no-interface-object="1">
      <properties>
        <property name="console" read-only="1" replaceable="1" type="Console"/>
      </properties>
    </interface>
    <interface name="WindowLocalStorage" extends="Object" no-interface-object="1">
      <properties>
        <property name="localStorage" read-only="1" type="Storage"/>
      </properties>
    </interface>
    <interface name="WindowSessionStorage" extends="Object" no-interface-object="1">
      <properties>
        <property name="sessionStorage" read-only="1" type="Storage"/>
      </properties>
    </interface>
    <interface name="WindowTimers" extends="Object" no-interface-object="1">
      <implements>WindowTimersExtension</implements>
      <methods>
        <method name="clearInterval" type="void">
          <param name="handle" type="long"/>
        </method>
        <method name="clearTimeout" type="void">
          <param name="handle" type="long"/>
        </method>
        <method name="setInterval" type="long">
          <param name="handler" type="any"/>
          <param name="timeout" optional="1" type="any"/>
          <param name="args" type="any" variadic="1"/>
        </method>
        <method name="setTimeout" type="long">
          <param name="handler" type="any"/>
          <param name="timeout" optional="1" type="any"/>
          <param name="args" type="any" variadic="1"/>
        </method>
      </methods>
    </interface>
    <interface name="WindowTimersExtension" extends="Object" no-interface-object="1">
      <methods>
        <method name="clearImmediate" type="void">
          <param name="handle" type="long"/>
        </method>
        <method name="setImmediate" type="long">
          <param name="expression" type="any"/>
          <param name="args" type="any" variadic="1"/>
        </method>
      </methods>
    </interface>
    <interface name="XMLHttpRequestEventTarget" extends="Object" no-interface-object="1">
      <properties>
        <property name="onabort" event-handler="abort" type="EventHandler"/>
        <property name="onerror" event-handler="error" type="EventHandler"/>
        <property name="onload" event-handler="load" type="EventHandler"/>
        <property name="onloadend" event-handler="loadend" type="EventHandler"/>
        <property name="onloadstart" event-handler="loadstart" type="EventHandler"/>
        <property name="onprogress" event-handler="progress" type="EventHandler"/>
        <property name="ontimeout" event-handler="timeout" type="EventHandler"/>
      </properties>
    </interface>
  </mixin-interfaces>
  <typedefs>
    <typedef new-type="AAGUID" type="DOMString"/>
    <typedef new-type="AlgorithmIdentifier" type="(DOMString or Algorithm)"/>
    <typedef new-type="BodyInit" type="(Blob or BufferSource or FormData or DOMString)"/>
    <typedef new-type="ByteString" type="DOMString"/>
    <typedef new-type="ConstrainBoolean" type="(boolean or ConstrainBooleanParameters)"/>
    <typedef new-type="ConstrainDOMString" type="(DOMString or sequence&lt;DOMString&gt; or ConstrainDOMStringParameters)"/>
    <typedef new-type="ConstrainDouble" type="(double or ConstrainDoubleRange)"/>
    <typedef new-type="ConstrainLong" type="(long or ConstrainLongRange)"/>
    <typedef new-type="CryptoOperationData" type="ArrayBufferView"/>
    <typedef new-type="GLbitfield" type="unsigned long"/>
    <typedef new-type="GLboolean" type="boolean"/>
    <typedef new-type="GLbyte" type="byte"/>
    <typedef new-type="GLclampf" type="float"/>
    <typedef new-type="GLenum" type="unsigned long"/>
    <typedef new-type="GLfloat" type="float"/>
    <typedef new-type="GLint" type="long"/>
    <typedef new-type="GLintptr" type="long long"/>
    <typedef new-type="GLshort" type="short"/>
    <typedef new-type="GLsizei" type="long"/>
    <typedef new-type="GLsizeiptr" type="long long"/>
    <typedef new-type="GLubyte" type="octet"/>
    <typedef new-type="GLuint" type="unsigned long"/>
    <typedef new-type="GLushort" type="unsigned short"/>
    <typedef new-type="HeadersInit" type="(Headers or sequence&lt;sequence&lt;DOMString&gt;&gt;)"/>
    <typedef new-type="IDBKeyPath" type="DOMString"/>
    <typedef new-type="JSON" type="any"/>
    <typedef new-type="KeyFormat" type="DOMString"/>
    <typedef new-type="KeyType" type="DOMString"/>
    <typedef new-type="KeyUsage" type="DOMString"/>
    <typedef new-type="MSInboundPayload" type="(MSVideoRecvPayload or MSAudioRecvPayload)"/>
    <typedef new-type="MSLocalClientEvent" type="(MSLocalClientEventBase or MSAudioLocalClientEvent)"/>
    <typedef new-type="MSOutboundPayload" type="(MSVideoSendPayload or MSAudioSendPayload)"/>
    <typedef new-type="RTCIceGatherCandidate" type="(RTCIceCandidateDictionary or RTCIceCandidateComplete)"/>
    <typedef new-type="RTCTransport" type="(RTCDtlsTransport or RTCSrtpSdesTransport)"/>
    <typedef new-type="RequestInfo" type="(Request or DOMString)"/>
    <typedef new-type="USVString" type="DOMString"/>
    <typedef new-type="payloadtype" type="octet"/>
  </typedefs>
</webidl-xml>